{"title": "Vertex AI - Use Private Service Connect to access a Vector Search index from on-premises", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Use Private Service Connect to access a Vector Search index from on-premises\nOn-premises hosts can reach a Vector Search index endpoint either through the public internet or privately through a hybrid networking architecture that uses Private Service Connect (PSC) over Cloud VPN or Cloud Interconnect. Both options offer SSL/TLS encryption. However, the private option offers much better performance and is therefore recommended for critical applications.\nIn this tutorial, you use High-Availability VPN (HA VPN) to access a Vector Search index endpoint privately, between two Virtual Private Cloud (VPC) networks that can serve as a basis for multi-cloud and on-premises private connectivity.\nThis tutorial is intended for enterprise network administrators, data scientists, and researchers who are familiar with Vertex AI, Virtual Private Cloud, the Google Cloud console, and the [Cloud Shell](/shell/docs/how-cloud-shell-works) . Familiarity with [Vector Search](/vertex-ai/docs/vector-search/overview) is helpful but not required.\n **Note:** The Vector Search index endpoint that you create is a public endpoint. In a production environment, you would [use VPC Service Controls to create secure perimeters](/vertex-ai/docs/general/vpc-service-controls) to allow or deny access to Vertex AI and other Google APIs on the Vector Search index endpoint over the public internet. This tutorial does not cover using VPC Service Controls with Vertex AI.", "content": "## Objectives\n- Create two VPC networks, as shown in the preceding diagram:- One (`onprem-vpc`) represents an on-premises network.\n- The other (`vertex-networking-vpc`) is for the Vector Search index endpoint.\n- Deploy HA VPN gateways, Cloud VPN tunnels, and Cloud Routers to connect`vertex-networking-vpc`and`onprem-vpc`.\n- Build and deploy a Vector Search index.\n- Create a Private Service Connect (PSC) endpoint to forward queries to the Vector Search index endpoint.\n- Configure a Cloud Router custom route advertisement in`vertex-networking-vpc`to announce routes for the Private Service Connect endpoint to`onprem-vpc`.\n- Create a Compute Engine VM instance in`onprem-vpc`to represent a client application that sends requests to the Vector Search index endpoint over HA VPN.\n## CostsIn this document, you use the following billable components of Google Cloud:- [Cloud NAT](/nat/pricing) \n- [Cloud Storage](/storage/pricing) \n- [Cloud VPN](/network-connectivity/pricing#vpn-pricing) \n- [Compute Engine](/compute/all-pricing) \n- [Vertex AI](/vertex-ai/pricing) \n- [Virtual Private Cloud](/vpc/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, go to the project selector page. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- Select or create a Google Cloud project.\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Open [Cloud Shell](/shell/docs/launching-cloud-shell-editor) to execute the commands listed  in this tutorial. Cloud Shell is an interactive shell environment  for Google Cloud that lets you manage your projects and resources from  your web browser.\n- In the Cloud Shell, set the current project to your Google Cloud project ID and store the same project ID into the`projectid`shell variable:```\n projectid=\"PROJECT_ID\"\n gcloud config set project ${projectid}\n```Replacewith your project ID. If necessary, you can locate your project ID in the Google Cloud console. For more information, see [Find your project ID](/vertex-ai/docs/tutorials/tabular-bq-prediction/prerequisites#find-project-id) .\n- If you're not the project owner, ask the project owner to grant you the [Project IAM Admin (roles/resourcemanager.projectIamAdmin)](/resource-manager/docs/access-control-proj#resourcemanager.projectIamAdmin) role. You must have this role to grantIAM roles in the next step.\n- Grant roles to your Google Account. Run the following command once for each of the following   IAM roles: `roles/aiplatform.user,  roles/compute.instanceAdmin.v1,  roles/compute.networkAdmin,  roles/compute.securityAdmin,  roles/dns.admin,  roles/iam.serviceAccountAdmin,  roles/iam.serviceAccountUser,  roles/iap.admin,  roles/iap.tunnelResourceAccessor,  roles/notebooks.admin,  roles/servicemanagement.quotaAdmin,  roles/servicedirectory.editor,  roles/storage.admin` ```\ngcloud projects add-iam-policy-binding PROJECT_ID --member=\"user:EMAIL_ADDRESS\" --role=ROLE\n```- Replace``with your project ID.\n- Replace``with your email address.\n- Replace``with each individual role.\n- Enable the DNS,  IAM,  Compute Engine,  Notebooks,  and Vertex AI APIs:```\ngcloud services enable dns.googleapis.com iam.googleapis.com compute.googleapis.com notebooks.googleapis.com aiplatform.googleapis.com\n```\n## Create the VPC networksIn this section you create two VPC networks: one for creating a Vector Search index and deploying it to an endpoint, the other for private access to that endpoint.\n### Create the VPC network for the Vector Search index endpoint (vertex-networking-vpc)\n- Create the VPC network for the index endpoint:```\ngcloud compute networks create vertex-networking-vpc --project=$projectid --subnet-mode custom\n```\n- Create a subnet named `workbench-subnet` , with a primary IPv4 range of `172.16.20.0/28` :```\ngcloud compute networks subnets create workbench-subnet \\\u00a0 --project=$projectid --range=172.16.20.0/28 \\\u00a0 --network=vertex-networking-vpc \\\u00a0 --region=us-central1 \\\u00a0 --enable-private-ip-google-access\n```\n- Create a subnet named `consumer-endpoint-subnet` , with a primary IPv4 range of `172.16.30.0/28` :```\ngcloud compute networks subnets create consumer-endpoint-subnet \\\u00a0 --project=$projectid \\\u00a0 --range=172.16.30.0/28 \\\u00a0 --network=vertex-networking-vpc \\\u00a0 --region=us-central1 \\\u00a0 --enable-private-ip-google-access\n```\n### Create the VPC network for private access to the endpoint (onprem-vpc)\n- Create the VPC network to simulate the on-premises network ( `onprem-vpc` ):```\ngcloud compute networks create onprem-vpc \\\u00a0 --subnet-mode custom\n```\n- In the `onprem-vpc` network, create a subnet named `onprem-vpc-subnet1` , with a primary IPv4 range of `172.16.10.0/29` :```\ngcloud compute networks subnets create onprem-vpc-subnet1 \\\u00a0 --network onprem-vpc \\\u00a0 --range 172.16.10.0/29 \\\u00a0 --region us-central1\n```\n### Verify that the VPC networks are correctly configured\n- In the Google Cloud console, go to the **Networks in current project** tab in the **VPC networks** page. [Go to VPC networks](https://console.cloud.google.com/networking/networks/list?pageTab=CURRENT_PROJECT_NETWORKS) \n- In the list of VPC networks, verify that the two networks have been created: `vertex-networking-vpc` and `onprem-vpc` .\n- Click the **Subnets in current project** tab.\n- In the list of VPC subnets, verify that the `workbench-subnet` , `consumer-endpoint-subnet` , and `onprem-vpc-subnet1` subnets have been created.\n### Create the on-prem-client VM instanceIn this section you create a VM instance to represent a client application that sends requests to the Vector Search index endpoint over HA VPN.- In the Cloud Shell, create the `on-prem-client` VM instance:```\ngcloud compute instances create on-prem-client \\\u00a0 --zone=us-central1-a \\\u00a0 --image-family=debian-11 \\\u00a0 --image-project=debian-cloud \\\u00a0 --subnet=onprem-vpc-subnet1 \\\u00a0 --scopes=https://www.googleapis.com/auth/cloud-platform \\\u00a0 --no-address \\\u00a0 --shielded-secure-boot \\\u00a0 --metadata startup-script=\"#! /bin/bash\u00a0 \u00a0 sudo apt-get update\u00a0 \u00a0 sudo apt-get install tcpdump dnsutils -y\"\n```\n## Configure hybrid connectivityIn this section you create two HA VPN gateways that are connected to each other. One resides in the `vertex-networking-vpc` VPC network. The other resides in the `onprem-vpc` VPC network. Each gateway contains a Cloud Router and a pair of VPN tunnels.\n### Create the HA VPN gateways\n- In the Cloud Shell, create the HA VPN gateway for the `vertex-networking-vpc` VPC network:```\ngcloud compute vpn-gateways create vertex-networking-vpn-gw1 \\\u00a0 \u00a0--network vertex-networking-vpc \\\u00a0 \u00a0--region us-central1\n```\n- Create the HA VPN gateway for the `onprem-vpc` VPC network:```\ngcloud compute vpn-gateways create onprem-vpn-gw1 \\\u00a0 \u00a0--network onprem-vpc \\\u00a0 \u00a0--region us-central1\n```\n- In the Google Cloud console, go to the **Cloud VPN Gateways** tab in the **VPN** page. [Go to VPN](https://console.cloud.google.com/hybrid/vpn?tab=gateways) \n- Verify that the two gateways ( `vertex-networking-vpn-gw1` and `onprem-vpn-gw1` ) have been created and that each one has two interface IP addresses.\n### Create Cloud Routers and Cloud NAT gatewaysIn each of the two VPC networks, you create two Cloud Routers: one general and one regional. In each of the regional Cloud Routers, you create a Cloud NAT gateway. Cloud NAT gateways provide outgoing connectivity for Compute Engine virtual machine (VM) instances that don't have external IP addresses.- In the Cloud Shell, create a Cloud Router for the `vertex-networking-vpc` VPC network:```\ngcloud compute routers create vertex-networking-vpc-router1 \\\u00a0 \u00a0--region us-central1\\\u00a0 \u00a0--network vertex-networking-vpc \\\u00a0 \u00a0--asn 65001\n```\n- Create a Cloud Router for the `onprem-vpc` VPC network:```\ngcloud compute routers create onprem-vpc-router1 \\\u00a0 \u00a0--region us-central1\\\u00a0 \u00a0--network onprem-vpc\\\u00a0 \u00a0--asn 65002\n```\n- Create a regional Cloud Router for the `vertex-networking-vpc` VPC network:```\ngcloud compute routers create cloud-router-us-central1-vertex-nat \\\u00a0 --network vertex-networking-vpc \\\u00a0 --region us-central1\n```\n- Configure a Cloud NAT gateway on the regional Cloud Router:```\ngcloud compute routers nats create cloud-nat-us-central1 \\\u00a0 --router=cloud-router-us-central1-vertex-nat \\\u00a0 --auto-allocate-nat-external-ips \\\u00a0 --nat-all-subnet-ip-ranges \\\u00a0 --region us-central1\n```\n- Create a regional Cloud Router for the `onprem-vpc` VPC network:```\ngcloud compute routers create cloud-router-us-central1-onprem-nat \\\u00a0 --network onprem-vpc \\\u00a0 --region us-central1\n```\n- Configure a Cloud NAT gateway on the regional Cloud Router:```\ngcloud compute routers nats create cloud-nat-us-central1-on-prem \\\u00a0 --router=cloud-router-us-central1-onprem-nat \\\u00a0 --auto-allocate-nat-external-ips \\\u00a0 --nat-all-subnet-ip-ranges \\\u00a0 --region us-central1\n```\n- In the Google Cloud console, go to the **Cloud Routers** page. [Go to Cloud Routers](https://console.cloud.google.com/hybrid/routers/list) \n- In the **Cloud Routers** list, verify that the following routers have been created:- `cloud-router-us-central1-onprem-nat`\n- `cloud-router-us-central1-vertex-nat`\n- `onprem-vpc-router1`\n- `vertex-networking-vpc-router1`\nYou may need to refresh the Google Cloud console browser tab to see the new values.\n- In the Cloud Routers list, click `cloud-router-us-central1-vertex-nat` .\n- In the **Router details** page, verify that the `cloud-nat-us-central1` Cloud NAT gateway has been created.\n- Click the arrow_back back arrow to return to the **Cloud Routers** page.\n- In the router list, click `cloud-router-us-central1-onprem-nat` .\n- In the **Router details** page, verify that the `cloud-nat-us-central1-on-prem` Cloud NAT gateway has been created.\n### Create VPN tunnels\n- In the Cloud Shell, in the `vertex-networking-vpc` network, create a VPN tunnel called `vertex-networking-vpc-tunnel0` :```\ngcloud compute vpn-tunnels create vertex-networking-vpc-tunnel0 \\\u00a0 --peer-gcp-gateway onprem-vpn-gw1 \\\u00a0 --region us-central1 \\\u00a0 --ike-version 2 \\\u00a0 --shared-secret [ZzTLxKL8fmRykwNDfCvEFIjmlYLhMucH] \\\u00a0 --router vertex-networking-vpc-router1 \\\u00a0 --vpn-gateway vertex-networking-vpn-gw1 \\\u00a0 --interface 0\n```\n- In the `vertex-networking-vpc` network, create a VPN tunnel called `vertex-networking-vpc-tunnel1` :```\ngcloud compute vpn-tunnels create vertex-networking-vpc-tunnel1 \\\u00a0 --peer-gcp-gateway onprem-vpn-gw1 \\\u00a0 --region us-central1 \\\u00a0 --ike-version 2 \\\u00a0 --shared-secret [bcyPaboPl8fSkXRmvONGJzWTrc6tRqY5] \\\u00a0 --router vertex-networking-vpc-router1 \\\u00a0 --vpn-gateway vertex-networking-vpn-gw1 \\\u00a0 --interface 1\n```\n- In the `onprem-vpc` network, create a VPN tunnel called `onprem-vpc-tunnel0` :```\ngcloud compute vpn-tunnels create onprem-vpc-tunnel0 \\\u00a0 --peer-gcp-gateway vertex-networking-vpn-gw1 \\\u00a0 --region us-central1\\\u00a0 --ike-version 2 \\\u00a0 --shared-secret [ZzTLxKL8fmRykwNDfCvEFIjmlYLhMucH] \\\u00a0 --router onprem-vpc-router1 \\\u00a0 --vpn-gateway onprem-vpn-gw1 \\\u00a0 --interface 0\n```\n- In the `onprem-vpc` network, create a VPN tunnel called `onprem-vpc-tunnel1` :```\ngcloud compute vpn-tunnels create onprem-vpc-tunnel1 \\\u00a0 --peer-gcp-gateway vertex-networking-vpn-gw1 \\\u00a0 --region us-central1\\\u00a0 --ike-version 2 \\\u00a0 --shared-secret [bcyPaboPl8fSkXRmvONGJzWTrc6tRqY5] \\\u00a0 --router onprem-vpc-router1 \\\u00a0 --vpn-gateway onprem-vpn-gw1 \\\u00a0 --interface 1\n```\n- In the Google Cloud console, go to the **VPN** page. [Go to VPN](https://console.cloud.google.com/hybrid/vpn) \n- In the list of VPN tunnels, verify that the four VPN tunnels have been created.\n## Establish BGP sessionsCloud Router uses Border Gateway Protocol (BGP) to exchange routes between your VPC network (in this case, `vertex-networking-vpc` ) and your on-premises network (represented by `onprem-vpc` ). On Cloud Router, you configure an interface and a BGP peer for your on-premises router. The interface and BGP peer configuration together form a BGP session. In this section you create two BGP sessions for `vertex-networking-vpc` and two for `onprem-vpc` .\nOnce you've configured the interfaces and BGP peers between your routers, they will automatically start exchanging routes.\n### Establish BGP sessions for vertex-networking-vpc\n- In the Cloud Shell, in the `vertex-networking-vpc` network, create a BGP interface for `vertex-networking-vpc-tunnel0` :```\ngcloud compute routers add-interface vertex-networking-vpc-router1 \\\u00a0 --interface-name if-tunnel0-to-onprem \\\u00a0 --ip-address 169.254.0.1 \\\u00a0 --mask-length 30 \\\u00a0 --vpn-tunnel vertex-networking-vpc-tunnel0 \\\u00a0 --region us-central1\n```\n- In the `vertex-networking-vpc` network, create a BGP peer for `bgp-onprem-tunnel0` :```\ngcloud compute routers add-bgp-peer vertex-networking-vpc-router1 \\\u00a0 --peer-name bgp-onprem-tunnel0 \\\u00a0 --interface if-tunnel0-to-onprem \\\u00a0 --peer-ip-address 169.254.0.2 \\\u00a0 --peer-asn 65002 \\\u00a0 --region us-central1\n```\n- In the `vertex-networking-vpc` network, create a BGP interface for `vertex-networking-vpc-tunnel1` :```\ngcloud compute routers add-interface vertex-networking-vpc-router1 \\\u00a0 --interface-name if-tunnel1-to-onprem \\\u00a0 --ip-address 169.254.1.1 \\\u00a0 --mask-length 30 \\\u00a0 --vpn-tunnel vertex-networking-vpc-tunnel1 \\\u00a0 --region us-central1\n```\n- In the `vertex-networking-vpc` network, create a BGP peer for `bgp-onprem-tunnel1` :```\ngcloud compute routers add-bgp-peer vertex-networking-vpc-router1 \\\u00a0 --peer-name bgp-onprem-tunnel1 \\\u00a0 --interface if-tunnel1-to-onprem \\\u00a0 --peer-ip-address 169.254.1.2 \\\u00a0 --peer-asn 65002 \\\u00a0 --region us-central1\n```\n### Establish BGP sessions for onprem-vpc\n- In the `onprem-vpc` network, create a BGP interface for `onprem-vpc-tunnel0` :```\ngcloud compute routers add-interface onprem-vpc-router1 \\\u00a0 --interface-name if-tunnel0-to-vertex-networking-vpc \\\u00a0 --ip-address 169.254.0.2 \\\u00a0 --mask-length 30 \\\u00a0 --vpn-tunnel onprem-vpc-tunnel0 \\\u00a0 --region us-central1\n```\n- In the `onprem-vpc` network, create a BGP peer for `bgp-vertex-networking-vpc-tunnel0` :```\ngcloud compute routers add-bgp-peer onprem-vpc-router1 \\\u00a0 --peer-name bgp-vertex-networking-vpc-tunnel0 \\\u00a0 --interface if-tunnel0-to-vertex-networking-vpc \\\u00a0 --peer-ip-address 169.254.0.1 \\\u00a0 --peer-asn 65001 \\\u00a0 --region us-central1\n```\n- In the `onprem-vpc` network, create a BGP interface for `onprem-vpc-tunnel1` :```\ngcloud compute routers add-interface \u00a0 onprem-vpc-router1 \u00a0\\\u00a0 --interface-name if-tunnel1-to-vertex-networking-vpc \\\u00a0 --ip-address 169.254.1.2 \\\u00a0 --mask-length 30 \\\u00a0 --vpn-tunnel onprem-vpc-tunnel1 \\\u00a0 --region us-central1\n```\n- In the `onprem-vpc` network, create a BGP peer for `bgp-vertex-networking-vpc-tunnel1` :```\ngcloud compute routers add-bgp-peer onprem-vpc-router1 \\\u00a0 --peer-name bgp-vertex-networking-vpc-tunnel1 \\\u00a0 --interface if-tunnel1-to-vertex-networking-vpc \\\u00a0 --peer-ip-address 169.254.1.1 \\\u00a0 --peer-asn 65001 \\\u00a0 --region us-central1\n```\n### Validate BGP session creation\n- In the Google Cloud console, go to the **VPN** page. [Go to VPN](https://console.cloud.google.com/hybrid/vpn/list) \n- In the list of VPN tunnels, verify that the value in the **BGP session status** column for each of the tunnels has changed from **Configure BGP session** to **BGP established** . You may need to refresh the Google Cloud console browser tab to see the new values.\n### Validate the vertex-networking-vpc learned routes\n- In the Google Cloud console, go to the **VPC networks** page. [Go to VPC networks](https://console.cloud.google.com/networking/networks/list) \n- In the list of VPC networks, click `vertex-networking-vpc` .\n- Click the **Routes** tab.\n- Select **us-central1 (Iowa)** in the **Region** list and click **View** .\n- In the **Destination IP range** column, verify that the `onprem-vpc-subnet1` subnet's IP range ( `172.16.10.0/29` ) appears twice.\n### Validate the on-prem-vpc learned routes\n- Click the arrow_back back arrow to return to the **VPC networks** page.\n- In the list of VPC networks, click `on-prem-vpc` .\n- Click the **Routes** tab.\n- Select **us-central1 (Iowa)** in the **Region** list and click **View** .\n- In the **Destination IP range** column, verify that the `workbench-subnet` subnet's IP range ( `172.16.20.0/28` ) and the `consumer-endpoint-subnet` subnet's IP range ( `172.16.30.0/28` ) each appear twice.\n## Create a Vertex AI Workbench instanceIn this section you create a user-managed service account, and then you create a Vertex AI Workbench instance that uses your service account for accessing Google Cloud services and APIs.\n### Create a service accountIn this tutorial, you create a user-managed service account following Compute Engine and IAM [best practices](/iam/docs/service-account-types#default) .- In the Cloud Shell, create a service account named `workbench-sa` :```\ngcloud iam service-accounts create workbench-sa \\\u00a0 \u00a0--display-name=\"workbench-sa\"\n```\n- Assign the [Vertex AI User (roles/aiplatform.user)](/iam/docs/understanding-roles#aiplatform.user) IAM role to the service account:```\ngcloud projects add-iam-policy-binding $projectid \\\u00a0 --member=\"serviceAccount:workbench-sa@$projectid.iam.gserviceaccount.com\" \\\u00a0 --role=\"roles/aiplatform.user\"\n```\n- Assign the [Storage Admin (roles/storage.admin)](/iam/docs/understanding-roles#storage.admin) IAM role to the service account:```\ngcloud projects add-iam-policy-binding $projectid \\\u00a0 --member=\"serviceAccount:workbench-sa@$projectid.iam.gserviceaccount.com\" \\\u00a0 --role=\"roles/storage.admin\"\n```\n- Assign the [Service Usage Admin (roles/serviceusage.serviceUsageAdmin)](/iam/docs/understanding-roles#serviceusage.serviceUsageAdmin) IAM role to the service account:```\ngcloud projects add-iam-policy-binding $projectid \\\u00a0 --member=\"serviceAccount:workbench-sa@$projectid.iam.gserviceaccount.com\" \\\u00a0 --role=\"roles/serviceusage.serviceUsageAdmin\"\n```\n### Create the Vertex AI Workbench instanceCreate a Vertex AI Workbench instance, specifying the `workbench-sa` service account:\n```\ngcloud workbench instances create workbench-tutorial \\\u00a0 --vm-image-project=deeplearning-platform-release \\\u00a0 --vm-image-family=common-cpu-notebooks \\\u00a0 --machine-type=n1-standard-4 \\\u00a0 --location=us-central1-a \\\u00a0 --subnet-region=us-central1 \\\u00a0 --shielded-secure-boot=SHIELDED_SECURE_BOOT \\\u00a0 --subnet=workbench-subnet \\\u00a0 --disable-public-ip \\\u00a0 --service-account-email=workbench-sa@$projectid.iam.gserviceaccount.com\n```## Create and deploy a Vector Search index\n### Prepare your environment\n- In the Google Cloud console, go to the **Instances** tab in the **Vertex AI Workbench** page. [Go to Vertex AI Workbench](https://console.cloud.google.com/vertex-ai/workbench/instances) \n- Next to your Vertex AI Workbench instance's name ( `workbench-tutorial` ), click **Open JupyterLab** .Your Vertex AI Workbench instance opens JupyterLab.\n- Select **File\u00a0> New\u00a0> Notebook** .\n- From the **Select Kernel** menu, select **Python 3 (Local)** and click **Select** .\n- When your new notebook opens, there is a default code cell where you can enter code. It looks like `[ ]:` followed by a text field. The text field is where you paste your code.To install the Vertex AI SDK for Python, paste the following code into the cell and click play_arrow **Run theselected cells and advance** :```\n!pip install --upgrade --user google-cloud-aiplatform google-cloud-storage\n```\n- In this step and each of the following ones, add a new code cell (if necessary) by clicking add **Insert a cell below** , paste the code into the cell, and then click play_arrow **Run the selected cells and advance** .To use the newly installed packages in this Jupyter runtime, you need to restart the runtime:```\n# Restart kernel after installs so that your environment can access the new packagesimport IPythonapp = IPython.Application.instance()app.kernel.do_shutdown(True)\n```\n- Set the following environment variables, replacing with your project ID.```\n# set project ID and locationPROJECT_ID = \"PROJECT_ID\"LOCATION = \"us-central1\"# generate a unique id for this sessionfrom datetime import datetimeUID = datetime.now().strftime(\"%m%d%H%M\")\n```\n### Enable APIsIn your Jupyterlab notebook, run the following command to enable APIs for Compute Engine, Vertex AI, and Cloud Storage in the notebook:\n```\n! gcloud services enable compute.googleapis.com aiplatform.googleapis.com storage.googleapis.com \\\u00a0 --project {PROJECT_ID}\n```\n### Prepare the sample data in a Cloud Storage bucketIn this tutorial, we use the same [TheLook dataset](https://console.cloud.google.com/marketplace/product/bigquery-public-data/thelook-ecommerce) that's used in the [Vector Search quickstart](/vertex-ai/docs/vector-search/quickstart) . See the quickstart documentation page for more information about this dataset.\nIn this section you create a Cloud Storage bucket and place the dataset's embedding file in it. In a later step, you use this file to build an index.- In your Jupyterlab notebook, create a Cloud Storage bucket:```\nBUCKET_URI = f\"gs://{PROJECT_ID}-vs-quickstart-{UID}\"! gsutil mb -l $LOCATION -p $PROJECT_ID $BUCKET_URI\n```\n- Copy the example file to your Cloud Storage bucket.```\n! gsutil cp \"gs://github-repo/data/vs-quickstart/product-embs.json\" $BUCKET_URI\n```\n- To use Vector Search to run queries, you also need to copy the embedding file to a local directory:```\n! gsutil cp \"gs://github-repo/data/vs-quickstart/product-embs.json\" . # for query tests\n```\n### Create the Vector Search index\n- In your Jupyterlab notebook, load the embeddings to Vector Search:```\n# init the aiplatform packagefrom google.cloud import aiplatformaiplatform.init(project=PROJECT_ID, location=LOCATION)\n```\n- Create a [MatchingEngineIndex](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.MatchingEngineIndex) with its `create_tree_ah_index` function (Matching Engine is the previous name of Vector Search):```\n# create Indexmy_index = aiplatform.MatchingEngineIndex.create_tree_ah_index(\u00a0 display_name = f\"vs-quickstart-index-{UID}\",\u00a0 contents_delta_uri = BUCKET_URI,\u00a0 dimensions = 768,\u00a0 approximate_neighbors_count = 10,)\n```The `MatchingEngineIndex.create_tree_ah_index()` method builds an index. In this tutorial, this task takes about 5 to 10 minutes.\n- In the Google Cloud console, go to the **Indexes** tab in the **Vector Search** page. [Go to Indexes](https://console.cloud.google.com/vertex-ai/matching-engine/indexes) \n- Verify that there is an index whose name begins with `\"vs-quickstart-index-\"` and contains the correct timestamp.\n- Make a note of the index ID. You'll need this ID when you deploy the index in a later step.\n### Create the index endpoint\n- In the Cloud Shell, run the following commands, replacing with your project ID:```\nprojectid=PROJECT_IDgcloud config set project ${projectid}SERVICE_PROJECT=${projectid}REGION=us-central1VERTEX_ENDPOINT=$REGION-aiplatform.googleapis.comDISPLAY_NAME=vector-search\n```\n- Create the index endpoint:```\ncurl -H \"Content-Type: application/json\" \\\u00a0 -H \"Authorization: Bearer `gcloud auth print-access-token`\" \\\u00a0 https://$VERTEX_ENDPOINT/v1/projects/$SERVICE_PROJECT/locations/$REGION/indexEndpoints \\\u00a0 -d '{displayName: \"'$DISPLAY_NAME'\", privateServiceConnectConfig: { enablePrivateServiceConnect: true, projectAllowlist: [\"'$SERVICE_PROJECT'\"] }}'\n```\n- Verify that the index endpoint was created:```\ngcloud ai index-endpoints list --region=us-central1\n```You should see output similar to the following example, in which the index endpoint ID is `8151506529447575552` :```\nUsing endpoint [https://us-central1-aiplatform.googleapis.com/]---createTime: '2023-10-10T23:55:20.526145Z'displayName: vector-searchencryptionSpec: {}etag: AMEw9yN2qytNiwT73uwYpz_7N_b2-O8D1AuNoDb5QjFmkU4ye5Gzk2oQlMZBR1XeoQ11name: projects/725264228516/locations/us-central1/indexEndpoints/8151506529447575552privateServiceConnectConfig:\u00a0 enablePrivateServiceConnect: true\u00a0 projectAllowlist:\u00a0 - vertex-genai-400103\u00a0 - vertex-genai-400103updateTime: '2023-10-10T23:55:21.951394Z'\n```\n- Make a note of your index endpoint ID. You'll need this ID when you deploy your index in a later step.\n## Deploy the index to the endpointIn the Cloud Shell, run the following command to deploy the index to the endpoint:\n```\ngcloud ai index-endpoints deploy-index INDEX_ENDPOINT_ID \\\u00a0 --deployed-index-id=vector_one \\\u00a0 --display-name=vector-search \\\u00a0 --index=INDEX \\\u00a0 --project=$projectid \\\u00a0 --region=us-central1\n```\nReplace the following values:- : the index endpoint ID for the Private Service Connect index endpoint that you created\n- : the ID for the index you're deploying\nYou should see output similar to the following example, in which the index endpoint ID is `8151506529447575552` :\n```\nUsing endpoint [https://us-central1-aiplatform.googleapis.com/]The deploy index operation [projects/725264228516/locations/us-central1/indexEndpoints/8151506529447575552/operations/6271807495283408896] was submitted successfully.\n```\nWhen you deploy the index, a Private Service Connect endpoint is generated. The deployment operation takes about 10 to 15 minutes.\n### Verify that the index is deployed to the index endpoint\n- In the Google Cloud console, go to the **Index Endpoints** tab in the **Vector Search** page. [Go to Index Endpoints](https://console.cloud.google.com/vertex-ai/matching-engine/index-endpoints) \n- Verify that the `vector-search` index endpoint has a Deployed index that's also called `vector-search` .If a spinning blue circle appears next to the index endpoint name, the index is still in the process of being deployed.\n### Get the service attachment URI for the index endpointAfter the index is fully deployed, you can obtain the service attachment URI.\nIn the Cloud Shell, run the following command to obtain the service attachment URI for the Private Service Connect endpoint:\n```\ngcloud ai index-endpoints list --region=us-central1 | grep -i \u00a0serviceAttachment:\n```\nIn the following example output, the service attachment URI is `projects/je84d1de50cd8bddb-tp/regions/us-central1/serviceAttachments/sa-gkedpm-527af280e65971fd786aaf6163e798` .\n```\nUsing endpoint [https://us-central1-aiplatform.googleapis.com/]\u00a0serviceAttachment: projects/je84d1de50cd8bddb-tp/regions/us-central1/serviceAttachments/sa-gkedpm-527af280e65971fd786aaf6163e798\n```\nMake a note of the `serviceAttachment` URI, beginning with `projects` , for example, `projects/je84d1de50cd8bddb-tp/regions/us-central1/serviceAttachments/sa-gkedpm-527af280e65971fd786aaf6163e798` . You'll need it in the next step, when you create a consumer endpoint.## Create the Private Service Connect consumer endpoint\n- In the Cloud Shell, reserve a consumer endpoint IP address that will be used to query the Vector Search index:```\ngcloud compute addresses create vector-search-endpoint1 \\\u00a0 --region=us-central1 \\\u00a0 --subnet=consumer-endpoint-subnet\n```\n- Find the reserved IP address:```\ngcloud compute addresses list --filter=\"name=vector-search-endpoint1\"\n```\n- Create a forwarding rule to connect the endpoint to the service attachment, replacing with your `serviceAttachment` URI.```\ngcloud compute forwarding-rules create vector-search-endpoint1 \\\u00a0 --region=us-central1 \\\u00a0 --network=vertex-networking-vpc \\\u00a0 --address=vector-search-endpoint1 \\\u00a0 --target-service-attachment=SERVICE_ATTACHMENT_URI\n```Following is a usage example for this command:```\ngcloud compute forwarding-rules create vector-search-endpoint1 \\\u00a0 --region=us-central1 \\\u00a0 --network=vertex-networking-vpc \\\u00a0 --address=vector-search-endpoint1 \\\u00a0 --target-service-attachment=projects/je84d1de50cd8bddb-tp/regions/us-central1/serviceAttachments/sa-gkedpm-527af280e65971fd786aaf6163e798\n```\n- In the Google Cloud console, go to the **Connected endpoints** tab in the **Private Service Connect** page. [Go to Connected endpoints](https://console.cloud.google.com/net-services/psc/list/consumers?pageTab=CURRENT_PROJECT_NETWORKS) \n- Validate that the consumer endpoint status is `Accepted` .\n- Make a note of the IP address of the Private Service Connect consumer endpoint. In a later step, you'll use this endpoint to establish communication with the deployed Vector Search index.\n## Query the deployed indexNow that you have established a Private Service Connect consumer endpoint that's connected to your Vector Search index endpoint, you can query your deployed index by sending the queries from the `on-prem-client` VM instance to the consumer endpoint.\nTo allow Identity-Aware Proxy (IAP) to connect to your VM instances, you create a firewall rule that:- Applies to all VM instances that you want to make accessible through IAP.\n- Allows TCP traffic through port 22 from the IP range`35.235.240.0/20`. This range contains all IP addresses that IAP uses for [TCP forwarding](/iap/docs/using-tcp-forwarding#gcloud) .\nAfter you create the firewall, you install the gRPC client. In a later step, you'll use the gRPC client to send queries from the `on-prem-client` VM instance.\n### Create the firewall rule and install gRPC\n- In the Cloud Shell, run the following commands, replacing with your project ID:```\nprojectid=PROJECT_IDgcloud config set project ${projectid}\n```\n- Create an IAP firewall rule named `ssh-iap-vpc` :```\ngcloud compute firewall-rules create ssh-iap-vpc \\\u00a0 --network onprem-vpc \\\u00a0 --allow tcp:22 \\\u00a0 --source-ranges=35.235.240.0/20\n```\n- Log into the `on-prem-client` VM instance:```\ngcloud compute ssh on-prem-client \\\u00a0 --project=$projectid \\\u00a0 --zone=us-central1-a \\\u00a0 --tunnel-through-iap\n```\n- In the `on-prem-client` VM instance, install the [gRPC](/endpoints/docs/grpc/about-grpc) client:```\nsudo apt-get install git -ygit clone https://github.com/grpc/grpc.gitsudo apt-get install build-essential autoconf libtool pkg-config -ysudo apt-get install cmake -ycd grpc/git submodule update --initmkdir -p cmake/buildcd cmake/buildcmake -DgRPC_BUILD_TESTS=ON ../..make grpc_cli\n```The installation takes about 30 minutes.\n### Get an ID for an existing index item\n- In the Google Cloud console, go to the **Instances** tab in the **Vertex AI Workbench** page. [Go to Vertex AI Workbench](https://console.cloud.google.com/vertex-ai/workbench/instances) \n- Next to your Vertex AI Workbench instance's name, click **Open JupyterLab** .Your Vertex AI Workbench instance opens JupyterLab.\n- Select **File\u00a0> New\u00a0> Terminal** .\n- In the JupyterLab terminal (not the Cloud Shell), view the last entry in the index:```\ntail -1 product-embs.json\n```\n- Look for the first key-value pair in the item, which contains the item's ID number, as in the following example:```\n\"id\":\"27452\"\n```Make a note of this ID number. You'll use it in the next section.\n### Perform a Vector Search queryIn the `on-prem-client` VM instance, query your deployed index:\n```\n./grpc_cli call \u00a0CONSUMER_ENDPOINT_IP:10000 \u00a0google.cloud.aiplatform.container.v1.MatchService.Match \"deployed_index_id:'\"vector_one\"',embedding_id: '\"ITEM_ID\"'\"\n```\nReplace the following values:- : IP address of the Private Service Connect consumer endpoint that you created in the previous section\n- : the item ID number that you saved in the previous section\nThe output should look like the following example:\n```\n\u00a0 \u00a0user@on-prem-client:~/grpc/cmake/build$ ./grpc_cli call \u00a0172.16.30.2:10000 \u00a0google.cloud.aiplatform.container.v1.MatchService.Match \"deployed_index_id:'\"vector_one\"',embedding_id: '\"20020916\"'\" \u00a0 \u00a0connecting to 172.16.30.2:10000\u00a0 \u00a0neighbor {\u00a0 \u00a0 \u00a0id: \"16136217\"\u00a0 \u00a0 \u00a0distance: 0.99999558925628662\u00a0 \u00a0}\u00a0 \u00a0neighbor {\u00a0 \u00a0 \u00a0id: \"2196405\"\u00a0 \u00a0 \u00a0distance: 0.82817935943603516\u00a0 \u00a0}\u00a0 \u00a0neighbor {\u00a0 \u00a0 \u00a0id: \"3796353\"\u00a0 \u00a0 \u00a0distance: 0.82687419652938843\u00a0 \u00a0}\u00a0 \u00a0neighbor {\u00a0 \u00a0 \u00a0id: \"815154\"\u00a0 \u00a0 \u00a0distance: 0.8179466724395752\u00a0 \u00a0}\u00a0 \u00a0neighbor {\u00a0 \u00a0 \u00a0id: \"16262338\"\u00a0 \u00a0 \u00a0distance: 0.816785454750061\u00a0 \u00a0}\u00a0 \u00a0neighbor {\u00a0 \u00a0 \u00a0id: \"31290454\"\u00a0 \u00a0 \u00a0distance: 0.81560027599334717\u00a0 \u00a0}\u00a0 \u00a0neighbor {\u00a0 \u00a0 \u00a0id: \"4012943\"\u00a0 \u00a0 \u00a0distance: 0.80958610773086548\u00a0 \u00a0}\u00a0 \u00a0neighbor {\u00a0 \u00a0 \u00a0id: \"39738359\"\u00a0 \u00a0 \u00a0distance: 0.8020891547203064\u00a0 \u00a0}\u00a0 \u00a0neighbor {\u00a0 \u00a0 \u00a0id: \"7691697\"\u00a0 \u00a0 \u00a0distance: 0.80035769939422607\u00a0 \u00a0}\u00a0 \u00a0neighbor {\u00a0 \u00a0 \u00a0id: \"6398888\"\u00a0 \u00a0 \u00a0distance: 0.79880392551422119\u00a0 \u00a0}\u00a0 \u00a0Rpc succeeded with OK status\n```## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\nTo avoid incurring charges to your Google Cloud account for the resources used in this tutorial, either [delete the project](/resource-manager/docs/creating-managing-projects#shutting_down_projects) that contains the resources, or keep the project and delete the individual resources.\nYou can delete the individual resources in the Google Cloud console as follows:- Undeploy and delete the Vector Search index as follows:- In the Google Cloud console, go to the **Indexes** tab in the **Vector Search** page. [Go to Indexes](https://console.cloud.google.com/vertex-ai/matching-engine/indexes) \n- Locate the index whose name begins with `\"vs-quickstart-index-\"` and contains the correct timestamp.\n- Click the index name.\n- In the **Index info** page, next to the index name in the **Deployed indexes** list, click more_vert **Actions** , and then click **Undeploy** .Undeploying the index takes a few minutes. If a spinning blue circle appears next to the index name, or if the index status is listed as `Undeploying` , the index is still in the process of being undeployed. You may need to refresh the Google Cloud console browser tab to see that the index is no longer deployed.\n- Click the arrow_back back arrow to return to the **Indexes** tab.\n- Next to your index's name in the index list, click more_vert **Actions** , and then click **Delete** to delete the index.\n- Delete the index endpoint as follows:- In the Google Cloud console, go to the **Index endpoints** tab in the **Vector Search** page. [Go to Index endpoints](https://console.cloud.google.com/vertex-ai/matching-engine/index-endpoints) \n- Next to your endpoint's name in the index endpoint list, click more_vert **Actions** , and then click **Delete** to delete the index endpoint.\n- Delete the Vertex AI Workbench instance as follows:- In the Google Cloud console, in the **Vertex AI** section, go to the **Instances** tab in the **Workbench** page. [Go to Vertex AI Workbench](https://console.cloud.google.com/vertex-ai/workbench/instances) \n- Select the `workbench-tutorial` Vertex AI Workbench instance and click delete **Delete** .\n- Delete the Compute Engine VM instance as follows:- In the Google Cloud console, go to the **Compute Engine** page. [Go to Compute Engine](https://console.cloud.google.com/compute/instances) \n- Select the `on-prem-client` VM instance, and click delete **Delete** .\n- Delete the VPN tunnels as follows:- In the Google Cloud console, go to the **VPN** page. [Go to VPN](https://console.cloud.google.com/hybrid/vpn/list) \n- On the **VPN** page, click the **Cloud VPN Tunnels** tab.\n- In the list of VPN tunnels, select the four VPN tunnels you created in this tutorial and click delete **Delete** .\n- Delete the HA VPN gateways as follows:- On the **VPN** page, click the **Cloud VPN Gateways** tab. [Go to Cloud VPN Gateways](https://console.cloud.google.com/hybrid/vpn?tab=gateways) \n- In the list of VPN gateways, click `onprem-vpn-gw1` .\n- In the **Cloud VPN gateway details** page, click delete **Delete VPN Gateway** .\n- Click the arrow_back back arrow if necessary to return to the list of VPN gateways, and then click `vertex-networking-vpn-gw1` .\n- In the **Cloud VPN gateway details** page, click delete **Delete VPN Gateway** .\n- Delete the Cloud Routers as follows:- Go to the **Cloud Routers** page. [Go to Cloud Routers](https://console.cloud.google.com/hybrid/routers/list) \n- In the list of Cloud Routers, select the four routers that you created in this tutorial.\n- To delete the routers, click delete **Delete** .This will also delete the two Cloud NAT gateways that are connected to the Cloud Routers.\n- Delete the `vector-search-endpoint1` forwarding rule for the `vertex-networking-vpc` VPC network as follows:- Go to the **Frontends** tab of the **Load balancing** page. [Go to Frontends](https://console.cloud.google.com/net-services/loadbalancing/list/frontends) \n- In the list of forwarding rules, click `vector-search-endpoint1` .\n- In the **Forwarding rule details** page, click delete **Delete** .\n- Delete the VPC networks as follows:- Go to the **VPC networks** page. [Go to VPC networks](https://console.cloud.google.com/networking/networks/list) \n- In the list of VPC networks, click `onprem-vpc` .\n- In the **VPC network details** page, click delete **Delete VPC Network** .Deleting each network also deletes its subnetworks, routes, and firewall rules.\n- Go back to the list of VPC networks, and click `vertex-networking-vpc` .\n- In the **VPC network details** page, click delete **Delete VPC Network** .\n- Delete the storage bucket as follows:- In the Google Cloud console, go to the **Cloud Storage** page. [Go to Cloud Storage](https://console.cloud.google.com/storage) \n- Select your storage bucket, and click delete **Delete** .\n- Delete the `workbench-sa` service account as follows:- Go to the **Service accounts** page. [Go to Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select the `workbench-sa` service account, and click delete **Delete** .## What's next\n- Learn about [enterprise networking options for accessing Vertex AI endpoints and services](/vertex-ai/docs/general/netsec-overview) \n- Learn [how Private Service Connect works](/vpc/docs/private-service-connect-architecture) and why it offers significant performance benefits.\n- Learn how to [use VPC Service Controls to create secure perimeters](/vertex-ai/docs/general/vpc-service-controls) to allow or deny access to Vertex AI and other Google APIs on the Vector Search index endpoint over the public internet.\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Vertex AI"}