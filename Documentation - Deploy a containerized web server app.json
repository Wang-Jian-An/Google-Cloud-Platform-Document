{"title": "Documentation - Deploy a containerized web server app", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Deploy a containerized web server app\nThis tutorial describes how to upload a container application in an air-gapped Google Distributed Cloud Hosted (GDCH) environment, and run that application on a Kubernetes cluster. A containerized workload runs on a Kubernetes cluster within a project namespace. Clusters are logically separate from projects and from each other to provide different failure domains and isolation guarantees. However, you must ensure your cluster is attached to a project to allow for containerized workloads to be managed within a project.\nOne of the largest obstacles for deploying a container app is getting the binary for the app to your air-gapped data center. Work with your infrastructure team and administrators to transport the application to your workstation or implement this tutorial directly on your continuous integration and continuous delivery (CI/CD) server.\nThis tutorial uses a sample web server app included by default in the system artifact registry.", "content": "## Objectives\n- Push a container image to the artifact registry.\n- Create a Kubernetes cluster.\n- Deploy the sample container app to the cluster.\n## CostsBecause GDCH is designed to run in an air-gapped data center, billing processes and information is confined only to the GDCH deployment and is not managed by other Google products.\nTo generate a cost estimate based on your projected usage, use the [pricing calculator](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/billing/calculate-resource-usage) .\nUse the [Projected Cost dashboard](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/billing/estimate-projected-costs) to anticipate future SKU costs for your invoices.\nTo track storage and compute consumption, use the [Billing Usage dashboards](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/billing/track-resource-consumption) .## Before you begin\n- Make sure you have a project to manage your containerized deployments. [Create a project](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/create-a-project) if you don't have one.\n- [Download and install the gdcloud CLI](/distributed-cloud/hosted/docs/latest/gdch/resources/gdcloud-overview) .\n- Ask your Organization IAM Admin to grant you the Namespace Admin role.\n- Retrieve the GDCH version:```\ngdcloud version\n```Set the environment variable to the output of `gdcloud version` :```\nexport GDCH_VERSION=GDCH_VERSION\n```\n- [Sign in](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/iam/sign-in) to the org admin cluster and generate its kubeconfig file with a user identity. Make sure you set the kubeconfig path as an environment variable:```\nexport ORG_ADMIN_CLUSTER_KUBECONFIG=ORG_ADMIN_CLUSTER_KUBECONFIG_PATH\n```\n## Push the container image to the artifact registryA preview managed container registry service is accessible to Platform Administrators (PA) or Application Operators (AO) of GDCH. If your deployment has not enabled preview features, you must deploy your production container images from an existing registry or deploy your own artifact registry solution.\nFor this tutorial, you will deploy the `nginx` web server app to a Kubernetes cluster, which is a sample app already deployed to the system artifact registry by default. The sample app is accessible from the system artifact registry without elevated permissions by using a registry mirror.\n **Warning:** Uploading your own container images to the system artifact registry is not supported.\nPrepare your environment to access the `nginx` sample container app from the system artifact registry:- Set the system artifact registry URL variable:```\nexport AR_ADDR=gcr.io\n```The `gcr.io` value is a registry mirror that lets you access the system artifact registry.\n- Confirm that the `AR_ADDR` environment variable has the correct value:```\necho $AR_ADDR\n```\n## Create a Kubernetes clusterNow that you have the `nginx` container image stored in the artifact registry and can access it, create a Kubernetes cluster to run the nginx web server.\n- In the navigation menu, select **Clusters** .\n- Click **Create Cluster** .\n- In the **Name** field, specify a name for the cluster.\n- Click **Attach Project** and select a project to attach to your cluster. Then click **Save** .\n- Click **Create** .\n- Wait for the cluster to be created. When the cluster is available to use, the status `READY` appears next to the cluster name.\n- Create a `Cluster` custom resource and save it as a YAML file, such as `cluster.yaml` :```\napiVersion: cluster.gdc.goog/v1kind: Clustermetadata:\u00a0 name: CLUSTER_NAME\u00a0 namespace: platform\n```Replace the `` value with the name of the cluster.\n- Apply the custom resource to your GDCH instance:```\nkubectl apply -f cluster.yaml --kubeconfig ${ORG_ADMIN_CLUSTER_KUBECONFIG}\n```\n- [Attach a project to your Kubernetes cluster](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/manage-projects#add-cluster-to-project) using the GDCH console. You cannot attach a project to the cluster using the API at this time.\nFor more information on creating a Kubernetes cluster, see [Create a user cluster](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/create-user-cluster) .## Deploy the sample container appYou are now ready to deploy the `nginx` container image to your Kubernetes cluster.\nKubernetes represents applications as `Pod` resources, which are scalable units holding one or more containers. The pod is the smallest deployable unit in Kubernetes. Usually, you deploy pods as a set of replicas that can be scaled and distributed together across your cluster. One way to deploy a set of replicas is through a Kubernetes `Deployment` .\nIn this section, you create a Kubernetes `Deployment` to run the `nginx` container app on your cluster. This Deployment has replicas, or pods. One `Deployment` pod contains only one container: the `nginx` container image. You also create a `Service` resource that provides a stable way for clients to send requests to the pods of your `Deployment` .\nDeploy the nginx web server to your Kubernetes cluster:- [Sign in](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/iam/sign-in) to the Kubernetes cluster and generate its kubeconfig file with a user identity. Make sure you set the kubeconfig path as an environment variable:```\nexport KUBECONFIG=CLUSTER_KUBECONFIG_PATH\n```\n- Create and deploy the Kubernetes `Deployment` and `Service` custom resources:```\nkubectl --kubeconfig ${KUBECONFIG} \\apply -f - <<EOFapiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: nginx-deployment\u00a0 labels:\u00a0 \u00a0 app: nginxspec:\u00a0 replicas: 2\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: nginx\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: nginx\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: nginx\u00a0 \u00a0 \u00a0 \u00a0 image: ${AR_ADDR}/library/private-cloud-staging/nginx:${GDCH_VERSION}\u00a0 \u00a0 \u00a0 \u00a0 args: []\u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 - containerPort: 80\u00a0 \u00a0 \u00a0 \u00a0 resources: {}---apiVersion: v1kind: Servicemetadata:\u00a0 name: nginx-servicespec:\u00a0 selector:\u00a0 \u00a0 app: nginx\u00a0 ports:\u00a0 \u00a0 - port: 80\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 type: LoadBalancerEOF\n```\n- Verify the pods were created by the deployment:```\nkubectl get pods -l app=nginx\n```The output is similar to the following:```\nNAME        READY  STATUS RESTARTS AGE\nnginx-deployment-1882529037-6p4mt 1/1  Running 0   1h\nnginx-deployment-1882529037-p29za 1/1  Running 0   1h\nnginx-deployment-1882529037-s0cmt 1/1  Running 0   1h\n```\n- Export the IP address for the `nginx` service:```\n\u00a0 export IP=`kubectl --kubeconfig=${KUBECONFIG} get service nginx-service -ojsonpath='{.status.loadBalancer.ingress[*].ip}'`\n```\n- Test the `nginx` server IP address using `curl` :```\n\u00a0 curl http://$IP\n```\n## Clean upTo avoid incurring charges to your GDCH account for the resources used in this tutorial, either [delete the project](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/delete-a-project) that contains the resources, or keep the project and delete the individual resources.\nTo delete the individual resources, complete the following steps:- Delete the `Service` object for your container app:```\nkubectl delete service nginx-service\n```\n- Delete the `Deployment` object for your container app:```\nkubectl delete deployment nginx-deployment\n```\n- If you created a test Kubernetes cluster solely for this tutorial, delete it:```\nkubectl delete clusters.cluster.gdc.goog/USER_CLUSTER_NAME \\\u00a0 \u00a0 -n platform --kubeconfig ${ORG_ADMIN_CLUSTER_KUBECONFIG}\n```This deletes the resources that make up the Kubernetes cluster, such as the compute instances, disks, and network resources:\n- Since the container app you deployed to your Kubernetes cluster is a sample included with the GDCH product bundle, there's no need to delete it from the system artifact registry. In cases where you deployed a custom container image to the system artifact registry, you must [submit a request](/distributed-cloud/hosted/docs/latest/gdch/resources/request-support) to remove it.\n## What's next\n- Explore the [resource hierarchy](/distributed-cloud/hosted/docs/latest/gdch/overview#resource_hierarchy) and details around resource isolation.\n- Learn about the [cluster architecture](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/clusters) .\n- Read the [Kubernetes containers for GDCH](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/containers/containers-intro) documentation for information on how to manage containers deployed to your Kubernetes clusters.\n- Learn how to [manage your Kubernetes clusters](/distributed-cloud/hosted/docs/latest/gdch/platform-application/pa-ao-operations/cluster) after your container workloads have been deployed.\n- Explore [best practices](/distributed-cloud/hosted/docs/latest/gdch/platform-application/resource-hierarchy-and-access-control) for setting up your container workloads and other service resources.", "guide": "Documentation"}