{"title": "Apigee - What is Apigee hybrid?", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - What is Apigee hybrid?\nYou are currently viewing version 1.1 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nApigee hybrid lets you manage APIs on-premises, on Google Cloud, or a mix of both:\n| 0         | 1                                                                                        |\n|:----------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Manage all your APIs in one place | Apigee hybrid helps you manage internal and external APIs with Google Cloud. With unified API management, you can provide your developers, partners, and customers a consistent API program experience.                                      |\n| Address security and compliance | If your compliance and security considerations make on-premises deployment a must for your applications, with an enterprise-grade hybrid gateway, you can host and manage the Apigee hybrid runtime plane on your premises. You manage and control the runtime, enabling you to leverage your existing compliance, governance, and security infrastructure. |\n| Support your multi\u2011cloud strategy | Balancing cost and performance may lead you to a hybrid strategy. Whether you are just exploring different cloud providers or have already chosen a hybrid strategy, your API management platform should give you the flexibility you need. Host and manage enterprise-grade hybrid gateways across your data center, Google Cloud, or both.    |\n| 0              | 1            |\n|:------------------------------------------------------|:------------------------------------------------|\n| If you want to learn more about hybrid: Keep Reading | If you're ready to install hybrid: Start Here! |\n", "content": "## API programs in a hybrid world\nApigee hybrid consists of a management plane maintained by Google and a runtime plane that you install into Kubernetes on-premises or on Google Cloud. Both planes use Google Cloud Platform services, as the following image shows:\nAs you can see, hybrid consists of the following primary components:\n- [Apigee-run management plane](#about-the-management-plane) : A set  of services hosted in the cloud and maintained by Google. These services include the UI,  management API, and analytics.\n- [Customer-managed runtime plane](#about-the-runtime-plane) : A  set of containerized runtime services that you set up and maintain in your own Kubernetes  cluster. All API traffic passes through and is processed within the runtime plane.You manage the containerized runtime on your Kubernetes cluster for greater agility with  staged rollouts, auto-scaling, and other operational benefits of containers.\n- **Google Cloud** : A suite of Cloud services hosted  by Google.\nOne key thing to know about hybrid is that all API traffic is processed within the boundaries of your network and under your control, while management services such as the UI and API analytics run in the cloud and are maintained by Google. For more information, see [Where isyour data stored?](/apigee/docs/hybrid/v1.1/where-data)\nThe following video provides a deep dive into the hybrid architecture:\n## About the runtime plane\nThe runtime plane is a set of containerized runtime services that you set up and maintain in your own Kubernetes cluster. All API traffic passes through and is processed within the runtime plane. The runtime plane includes the following major components:\n- [Message Processors](#message-processor) \n- [Synchronizer](#synchronizer) \n- [Cassandra](#cassandra-datastore) \n- [MART](#mart) \n- [UDCA](#udca) \nThe runtime plane runs in a Kubernetes cluster that you own and maintain.\nThe following image shows the primary services that execute on the runtime plane:\nFor general information about the runtime components, see the sections that follow. In addition, see [Runtime service configuration overview](/apigee/docs/hybrid/v1.1/service-config) .\nThe following sections describe each of these primary runtime plane services in more detail.\n### Message Processor\nHybrid Message Processors (MPs) provide API request processing and policy execution on the runtime plane. MPs load all of the deployed proxies, resources, target servers, certificates, and keystores from local storage. You configure an Istio Ingress controller to expose the MPs to requests that come from outside the cluster.\n### Synchronizer\nThe Synchronizer fetches configuration data about an API environment from the management plane and propagates it across the runtime plane. This downloaded data is also called the and is stored on the local file system.\nThe Synchronizer periodically polls the Management Server for changes and downloads a new configuration whenever changes are detected. The configuration data is retrieved and stored locally as a JSON file on the local file system, where the Message Processors can access it.\nThe downloaded configuration data allows the runtime plane to function independently from the management plane. With the contract, Message Processors on the runtime plane use the locally stored data as their configuration. If the connection between the management and runtime plane goes down, services on the runtime plane continue to function.\nThe configuration data downloaded by the Synchronizer includes:\n- Proxy bundles and shared flow deployments\n- Flow hooks\n- Environment information\n- Shared API resources\n- [Target server definitions](/apigee/docs/api-platform/deploy/load-balancing-across-backend-servers) \n- TLS settings\n- Key Value Map (KVM) names\n- [Data masks](/apigee/docs/api-platform/security/data-masking) \n### Cassandra datastore\n[Apache Cassandra](http://cassandra.apache.org/) is the runtime datastore that provides data persistence for the runtime plane.\nCassandra is a distributed data system that provides data persistence on the runtime plane. You deploy the Cassandra database as a [StatefulSet](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/) node pool on your Kubernetes cluster. Locating these entities close to the runtime processing services helps support requirements for security and high scalability.\nThe Cassandra database stores information about the following entities:\n- Key management system (KMS)\n- Key Value Map (KVM)\n- Response cache\n- OAuth\n- Quotas\n### Management API for Runtime data (MART)\nData that belongs to your organization and is accessed during runtime API calls are stored by Cassandra in the runtime plane.\nThis data includes:\n- Application configurations\n- Key Management System (KMS) data\n- Cache\n- Key Value Maps (KVMs)\n- API products\n- Developer apps\nTo access and update that data\u2014for example, to add a new KVM or to remove an environment\u2014you can use the Apigee hybrid UI or the [Apigee APIs](/apigee/docs/reference/apis/apigee/rest) . The MART server (Management API for Runtime data) processes the API calls against the runtime datastore.\nThis section describes the role that MART plays when you call the Apigee APIs to access the runtime datastore.\n| Unnamed: 0  | Unnamed: 1                                                                                                                                                                                                                          |\n|:-----------------||\n| What MART is  | To call an Apigee API, you send an authenticated request to the Management Server (MS) on the management plane. The MS authenticates and authorizes the request, and then forwards the request to MART on the runtime plane. Attached to that request is a token that the MS generated using a pre-configured service account. MART receives the request, authenticates and authorizes it, and then performs business validation on it. (For example, if the app is part of an API product, MART ensures it's a valid request.) After determining that a request is valid, MART then processes it. Cassandra stores the runtime data that MART processes (it is, after all, a runtime datastore). MART might read data from the Cassandra or it might update that data, depending on the type of request. Like most hybrid services, MART is stateless: it does not persist its own state at runtime. |\n| What\u00a0MART\u00a0is\u00a0not | Even though MART exposes a port to the public cloud, you do not call MART directly. (The port must be exposed so that MART can receive calls from the MS via a service account.) Furthermore, MART does not receive runtime calls from your customers to their API proxies; those calls are handled by the ingress controller and are routed to your cluster\u2019s Message Processors.                                                                                                                               |\n| nan    | nan                                                                                                                                                                                                                           |\nIt's worth pointing out that both MART and the Message Processors have access to the same runtime datastore (Cassandra), which is how data such as KMS, KVMs, and caches are shared.\nThe following image shows the flow of an Apigee API call:### UDCA\nThe Universal Data Collection Agent (UDCA) is a service running within the data collection pod in the runtime plane that extracts analytics, debug, and deployment status data and sends it to the UAP.\nFor more information, see [Debug, analytics, and deployment statusdata collection](/apigee/docs/hybrid/v1.1/other-data-collection) .\n## About the management plane\nThe management plane runs on Google Cloud. It includes administrative services such as:\n- **Apigee hybrid UI:** Provides a UI for developers to create and deploy API  proxies, configure policies, create API products, and create developer apps. Administrators  can use the Apigee hybrid UI to monitor deployment status.\n- **Apigee APIs:** Provide a programmatic interface for managing your  organization and environments.\n- **Unified Analytics Platform (UAP):** Receives and processes analytics and  deployment status data from the runtime plane.\nThe following image shows the primary services that execute on the management plane:\n## About the Google Cloud services\nThe following table describes the key Google Cloud services that hybrid leverages:\n| Google Cloud Service | Description                        |\n|:-----------------------|:-----------------------------------------------------------------------------------------------------------|\n| Identity    | User account authentication uses Google Cloud accounts. Authorization uses Google Cloud service accounts. |\n| Roles     | Access management for hybrid uses Google\u2019s roles engine, IAM, and supports default Apigee roles.   |\n| Resource Hierarchy  | Resources are organized in Google Cloud projects (linked to Apigee organizations).       |\n| Stackdriver   | Provides logging and metrics data analysis.                |\n| nan     | nan                          |\n## Types of users\nApigee has identified the following primary types of hybrid users:\n| Role       | Typical responsibilities/tasks                                                   | Areas of interest                                            |\n|:--------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| System administrators/operators | Install and configure services on hybrid's runtime plane Set up Google Cloud, Apigee, and service accounts Create Google Cloud services and projects Manage the Kubernetes cluster Maintain all of the above Troubleshoot the API proxies | Download and install apigeectl Configure Google Cloud services and Apigee hybrid UI Install hybrid overview Administer hybrid Data collection on hybrid Hybrid service configuration Kubernetes |\n| Developers      | Build API proxies using the Apigee hybrid UI or Apigee APIs Deploy API proxies to the runtime plane Troubleshoot the API proxies Test the API proxies                      | Create and deploy API proxies using hybrid Data collection on hybrid Apigee policies                           |\n| nan        | nan                                                          | nan                                                |\n## Advantages\nApigee hybrid has the following advantages:\n## Next step\nSee [the Big Picture](/apigee/docs/hybrid/v1.1/big-picture) \u2014an overview of the hybrid installation process.", "guide": "Apigee"}