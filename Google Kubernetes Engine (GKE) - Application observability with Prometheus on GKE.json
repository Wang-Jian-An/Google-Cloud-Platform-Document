{"title": "Google Kubernetes Engine (GKE) - Application observability with Prometheus on GKE", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview", "abstract": "# Google Kubernetes Engine (GKE) - Application observability with Prometheus on GKE\nThis tutorial shows you how to set up liveness probes to application microservices deployed to Google Kubernetes Engine (GKE) using open source [Prometheus](http://prometheus.io) .\nThis tutorial uses open source Prometheus. However, each GKE Autopilot cluster automatically deploys [Managed Service for Prometheus](/stackdriver/docs/managed-prometheus) , Google Cloud's fully managed, multi-cloud, cross-project solution for Prometheus metrics. Managed Service for Prometheus lets you globally monitor and alert on your workloads using Prometheus, without having to manually manage and operate Prometheus at scale.\nYou can also use open source tools like [Grafana](https://grafana.com/) to visualize metrics collected by Prometheus.", "content": "## Objectives\n- Create a cluster.\n- Deploy [Prometheus](https://prometheus.io/) .\n- Deploy the sample application, [Bank of Anthos](https://github.com/GoogleCloudPlatform/bank-of-anthos) .\n- Configure Prometheus liveness probes.\n- Configure Prometheus alerts.\n- Configure [Alertmanager](https://prometheus.io/docs/alerting/latest/alertmanager/) to get notification in a Slack channel.\n- Simulate an outage to test Prometheus.\n## CostsIn this document, you use the following billable components of Google Cloud:- [GKE](/kubernetes-engine/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin- Install the [  Helm API ](https://helm.sh/docs/intro/install/#from-script) \n## Prepare the environmentIn this tutorial, you use [Cloud Shell](/shell) to manage resources hosted on Google Cloud.- Set the default environment variables:```\ngcloud config set project PROJECT_IDgcloud config set compute/region COMPUTE_REGION\n```Replace the following:- ``: your Google Cloud [project ID](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- ``: the [Compute Engine region](/compute/docs/regions-zones#available) for the cluster. For this tutorial, the region is`us-central1`. Typically, you want a region that is close to you.\n- Clone the sample repository used in this tutorial:```\ngit clone https://github.com/GoogleCloudPlatform/bank-of-anthos.gitcd bank-of-anthos/\n```\n- Create a cluster:```\ngcloud container clusters create-auto CLUSTER_NAME \\\u00a0 \u00a0 --release-channel=CHANNEL_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION\n```Replace the following:- ``: a name for the new cluster.\n- ``: the name of a [release channel](/kubernetes-engine/docs/concepts/release-channels) .\n **Note:** If you're using a local environment, get access credentials by running the [gcloud auth application-default login](/sdk/gcloud/reference/auth/application-default/login) command.## Deploy PrometheusInstall Prometheus using the sample Helm chart:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnamihelm install tutorial bitnami/kube-prometheus \\\u00a0 \u00a0 --version 8.2.2 \\\u00a0 \u00a0 --values extras/prometheus/oss/values.yaml \\\u00a0 \u00a0 --wait\n```\nThis command installs Prometheus with the following components:- [Prometheus Operator](https://github.com/prometheus-operator/prometheus-operator) : a popular way to deploy and configure open source Prometheus.\n- [Alertmanager](https://prometheus.io/docs/alerting/latest/alertmanager/) : handles alerts sent by the Prometheus server and routes them to applications, such as Slack.\n- [Blackbox exporter](https://github.com/prometheus/blackbox_exporter) : lets Prometheus probe endpoints using HTTP, HTTPS, DNS, TCP, ICMP, and gRPC.\n## Deploy Bank of AnthosDeploy the Bank of Anthos sample application:\n```\nkubectl apply -f extras/jwt/jwt-secret.yamlkubectl apply -f kubernetes-manifests\n```## Slack notificationsTo set up Slack notifications, you must create a Slack application, activate Incoming Webhooks for the application, and install the application to a Slack workspace.\n### Create the Slack application\n- [Join a Slack workspace](https://slack.com/intl/en-ca/help/articles/212675257-Join-a-Slack-workspace) , either by registering with your email or by using an invitation sent by a Workspace Admin. **Note:** If you are not an Admin for your Slack workspace, you may need approval from a Workspace Admin before your app is deployed to your workspace.\n- [Sign in to Slack](https://slack.com/signin) using your workspace name and your Slack account credentials.\n- [Create a new Slack app](https://api.slack.com/apps?new_app=1) :- In the **Create an app** dialog, click **From scratch** .\n- Specify an **App Name** and choose your Slack workspace.\n- Click **Create App** .\n- Under **Add features and functionality** , click **Incoming Webhooks** .\n- Click the **Activate Incoming Webhooks** toggle.\n- In the **Webhook URLs for Your Workspace** section, click **Add New Webhook to Workspace** .\n- On the authorization page that opens, select a channel to receive notifications.\n- Click **Allow** .\n- A webhook for your Slack application is displayed in the **Webhook URLs for Your Workspace** section. Save the URL for later.## Configure AlertmanagerCreate a Kubernetes Secret to store the webhook URL:\n```\nkubectl create secret generic alertmanager-slack-webhook --from-literal webhookURL=SLACK_WEBHOOK_URLkubectl apply -f extras/prometheus/oss/alertmanagerconfig.yaml\n```\nReplace `` with the URL of the webhook from the previous section.## Configure Prometheus\n- Review the following manifest: [  extras/prometheus/oss/probes.yaml ](https://github.com/GoogleCloudPlatform/bank-of-anthos/blob/HEAD/extras/prometheus/oss/probes.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/bank-of-anthos/blob/HEAD/extras/prometheus/oss/probes.yaml) ```\n# Copyright 2023 Google LLC\n## Licensed under the Apache License, Version 2.0 (the \"License\");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 \u00a0http://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an \"AS IS\" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.---apiVersion: monitoring.coreos.com/v1kind: Probemetadata:\u00a0 name: frontend-probespec:\u00a0 jobName: frontend\u00a0 prober:\u00a0 \u00a0 url: tutorial-kube-prometheus-blackbox-exporter:19115\u00a0 \u00a0 path: /probe\u00a0 module: http_2xx\u00a0 interval: 60s\u00a0 scrapeTimeout: 30s\u00a0 targets:\u00a0 \u00a0 staticConfig:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: bank-of-anthos\u00a0 \u00a0 \u00a0 static:\u00a0 \u00a0 \u00a0 \u00a0 - frontend:80---apiVersion: monitoring.coreos.com/v1kind: Probemetadata:\u00a0 name: userservice-probespec:\u00a0 jobName: userservice\u00a0 prober:\u00a0 \u00a0 url: tutorial-kube-prometheus-blackbox-exporter:19115\u00a0 \u00a0 path: /probe\u00a0 module: http_2xx\u00a0 interval: 60s\u00a0 scrapeTimeout: 30s\u00a0 targets:\u00a0 \u00a0 staticConfig:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: bank-of-anthos\u00a0 \u00a0 \u00a0 static:\u00a0 \u00a0 \u00a0 \u00a0 - userservice:8080/ready---apiVersion: monitoring.coreos.com/v1kind: Probemetadata:\u00a0 name: balancereader-probespec:\u00a0 jobName: balancereader\u00a0 prober:\u00a0 \u00a0 url: tutorial-kube-prometheus-blackbox-exporter:19115\u00a0 \u00a0 path: /probe\u00a0 module: http_2xx\u00a0 interval: 60s\u00a0 scrapeTimeout: 30s\u00a0 targets:\u00a0 \u00a0 staticConfig:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: bank-of-anthos\u00a0 \u00a0 \u00a0 static:\u00a0 \u00a0 \u00a0 \u00a0 - balancereader:8080/ready---apiVersion: monitoring.coreos.com/v1kind: Probemetadata:\u00a0 name: contacts-probespec:\u00a0 jobName: contacts\u00a0 prober:\u00a0 \u00a0 url: tutorial-kube-prometheus-blackbox-exporter:19115\u00a0 \u00a0 path: /probe\u00a0 module: http_2xx\u00a0 interval: 60s\u00a0 scrapeTimeout: 30s\u00a0 targets:\u00a0 \u00a0 staticConfig:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: bank-of-anthos\u00a0 \u00a0 \u00a0 static:\u00a0 \u00a0 \u00a0 \u00a0 - contacts:8080/ready---apiVersion: monitoring.coreos.com/v1kind: Probemetadata:\u00a0 name: ledgerwriter-probespec:\u00a0 jobName: ledgerwriter\u00a0 prober:\u00a0 \u00a0 url: tutorial-kube-prometheus-blackbox-exporter:19115\u00a0 \u00a0 path: /probe\u00a0 module: http_2xx\u00a0 interval: 60s\u00a0 scrapeTimeout: 30s\u00a0 targets:\u00a0 \u00a0 staticConfig:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: bank-of-anthos\u00a0 \u00a0 \u00a0 static:\u00a0 \u00a0 \u00a0 \u00a0 - ledgerwriter:8080/ready---apiVersion: monitoring.coreos.com/v1kind: Probemetadata:\u00a0 name: transactionhistory-probespec:\u00a0 jobName: transactionhistory\u00a0 prober:\u00a0 \u00a0 url: tutorial-kube-prometheus-blackbox-exporter:19115\u00a0 \u00a0 path: /probe\u00a0 module: http_2xx\u00a0 interval: 60s\u00a0 scrapeTimeout: 30s\u00a0 targets:\u00a0 \u00a0 staticConfig:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: bank-of-anthos\u00a0 \u00a0 \u00a0 static:\u00a0 \u00a0 \u00a0 \u00a0 - transactionhistory:8080/ready\n```This manifest describes Prometheus liveness probes and includes the following fields:- `spec.jobName`: the Job name assigned to scraped metrics.\n- `spec.prober.url`: the Service URL of the blackbox exporter. This includes the default port for the blackbox exporter, which is defined in the Helm chart.\n- `spec.prober.path`: the metrics collection path.\n- `spec.targets.staticConfig.labels`: the labels assigned to all metrics scraped from the targets.\n- `spec.targets.staticConfig.static`: the list of hosts to probe.\n- Apply the manifest to your cluster:```\nkubectl apply -f extras/prometheus/oss/probes.yaml\n```\n- Review the following manifest: [  extras/prometheus/oss/rules.yaml ](https://github.com/GoogleCloudPlatform/bank-of-anthos/blob/HEAD/extras/prometheus/oss/rules.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/bank-of-anthos/blob/HEAD/extras/prometheus/oss/rules.yaml) ```\n# Copyright 2023 Google LLC\n## Licensed under the Apache License, Version 2.0 (the \"License\");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 \u00a0http://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an \"AS IS\" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.---apiVersion: monitoring.coreos.com/v1kind: PrometheusRulemetadata:\u00a0 name: uptime-rulespec:\u00a0 groups:\u00a0 - name: Micro services uptime\u00a0 \u00a0 interval: 60s\u00a0 \u00a0 rules:\u00a0 \u00a0 - alert: BalancereaderUnavaiable\u00a0 \u00a0 \u00a0 expr: probe_success{app=\"bank-of-anthos\",job=\"balancereader\"} == 0\u00a0 \u00a0 \u00a0 for: 1m\u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 \u00a0 summary: Balance Reader Service is unavailable\u00a0 \u00a0 \u00a0 \u00a0 description: Check Balance Reader pods and it's logs\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 severity: 'critical'\u00a0 \u00a0 - alert: ContactsUnavaiable\u00a0 \u00a0 \u00a0 expr: probe_success{app=\"bank-of-anthos\",job=\"contacts\"} == 0\u00a0 \u00a0 \u00a0 for: 1m\u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 \u00a0 summary: Contacs Service is unavailable\u00a0 \u00a0 \u00a0 \u00a0 description: Check Contacs pods and it's logs\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 severity: 'warning'\u00a0 \u00a0 - alert: FrontendUnavaiable\u00a0 \u00a0 \u00a0 expr: probe_success{app=\"bank-of-anthos\",job=\"frontend\"} == 0\u00a0 \u00a0 \u00a0 for: 1m\u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 \u00a0 summary: Frontend Service is unavailable\u00a0 \u00a0 \u00a0 \u00a0 description: Check Frontend pods and it's logs\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 severity: 'critical'\u00a0 \u00a0 - alert: LedgerwriterUnavaiable\u00a0 \u00a0 \u00a0 expr: probe_success{app=\"bank-of-anthos\",job=\"ledgerwriter\"} == 0\u00a0 \u00a0 \u00a0 for: 1m\u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 \u00a0 summary: Ledger Writer Service is unavailable\u00a0 \u00a0 \u00a0 \u00a0 description: Check Ledger Writer pods and it's logs\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 severity: 'critical'\u00a0 \u00a0 - alert: TransactionhistoryUnavaiable\u00a0 \u00a0 \u00a0 expr: probe_success{app=\"bank-of-anthos\",job=\"transactionhistory\"} == 0\u00a0 \u00a0 \u00a0 for: 1m\u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 \u00a0 summary: Transaction History Service is unavailable\u00a0 \u00a0 \u00a0 \u00a0 description: Check Transaction History pods and it's logs\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 severity: 'critical'\u00a0 \u00a0 - alert: UserserviceUnavaiable\u00a0 \u00a0 \u00a0 expr: probe_success{app=\"bank-of-anthos\",job=\"userservice\"} == 0\u00a0 \u00a0 \u00a0 for: 1m\u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 \u00a0 summary: User Service is unavailable\u00a0 \u00a0 \u00a0 \u00a0 description: Check User Service pods and it's logs\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 severity: 'critical'\n```This manifest describes a `PrometheusRule` and includes the following fields:- `spec.groups.[*].name`: the name of the rule group.\n- `spec.groups.[*].interval`: how often rules in the group are evaluated.\n- `spec.groups.[*].rules[*].alert`: the name of the alert.\n- `spec.groups.[*].rules[*].expr`: the PromQL expression to evaluate.\n- `spec.groups.[*].rules[*].for`: the amount of time alerts must return for before they are considered firing.\n- `spec.groups.[*].rules[*].annotations`: a list of annotations to add to each alert. This is only valid for alerting rules.\n- `spec.groups.[*].rules[*].labels`: the labels to add or overwrite.\n- Apply the manifest to your cluster:```\nkubectl apply -f extras/prometheus/oss/rules.yaml\n```\n## Simulate an outage\n- Simulate an outage by scaling the `contacts` Deployment to zero:```\nkubectl scale deployment contacts --replicas 0\n```You should see a notification message in your Slack workspace channel. GKE might take up to 5 minutes to scale the Deployment.\n- Restore the `contacts` Deployment:```\nkubectl scale deployment contacts --replicas 1\n```You should see an alert resolution notification message in your Slack workspace channel. GKE might take up to 5 minutes to scale the Deployment.\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- Delete a Google Cloud project:\n- ```\ngcloud projects delete PROJECT_ID\n```\n### Delete individual resources\n- Delete the Kubernetes resources:```\nkubectl delete -f kubernetes-manifests\n```\n- Uninstall Prometheus:```\nhelm uninstall tutorial\n```\n- Delete the GKE cluster:```\ngcloud container clusters delete CLUSTER_NAME --quiet\n```\n## What's next\n- Learn about [Google Cloud Managed Service for Prometheus](/stackdriver/docs/managed-prometheus) , a fully managed, global metrics solution, based on Prometheus, that is deployed by default in all Autopilot clusters.\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Google Kubernetes Engine (GKE)"}