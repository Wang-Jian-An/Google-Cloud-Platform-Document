{"title": "Apigee - Message processor troubleshooting guide", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Message processor troubleshooting guide\nYou are currently viewing version 1.1 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nThis topic discusses steps you can take to troubleshoot and fix problems with the [message processor](/apigee/docs/hybrid/v1.1/what-is-hybrid#message-processor) . The message processor is part of the [apigee-runtime](/apigee/docs/hybrid/v1.1/what-is-hybrid#about-the-runtime-plane) component. See also [Runtime service configuration overview](/apigee/docs/hybrid/v1.1/service-config) .\n", "content": "## Readiness probe fails with HTTP status\n code 500\n### Symptom\nOne or more `apigee-runtime` pods are not in the Ready state.\n### Error message\nWhen you use `kubectl` to describe a failed `apigee-runtime` pod, you see the error:\n`Readiness probe failed: HTTP probe failed with statuscode: 500`\nFor example:\n```\nkubectl describe pod -n hybrid \\\napigee-runtime-apigee-gcp-prod1-test-blue-67db4f457b-9c7c7\n...\napigee-runtime-apigee-gcp-prod1-test-blue-67db4f457b-9c7c7 Readiness probe failed: HTTP probe\nfailed with statuscode: 500\n...\n```\n### Possible causes\nThe error means that no active [contract](/apigee/docs/hybrid/v1.1/what-is-hybrid#synchronizer) is available for the message processor to serve the traffic. In this state, the message processor cannot call itself \"ready\".\n| Cause            | Description                                                                                  |\n|:-----------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Synchronizer to management plane connection problem | The synchronizer is unable to connect to the management plane. This problem is usually caused in cases where you override the contractProvider URL and associate the wrong service account with it. For example, if you configure a service account for a staging deployment with a contractProvider URL that points to the production server. |\n| Message processor to synchronizer connection problem | If the new MP comes up as part of an autoscale or pod restart, you might see this error. Generally, this problem occurs when the synchronizer is down and the MP was unable to load its contract.                                    |\n### Diagnosis: Synchronizer to management\n plane connection problem\nTo diagnose a **synchronizer to management plane connection problem** , do the following:\n- List the pods in the cluster:```\nkubectl get pods -n namespace\n```\n- Open a shell in an`apigee-synchronizer`pod:```\nkubectl exec -it -n namespace synchronizer-pod-name bash\n```For example:```\nkubectl exec -it -n apigee apigee-synchronizer-apigee-gcp-prod1-test-blue-cnj5x bash\n```\n- Go to the following directory:```\ncd /opt/apigee/var/log/apigee-synchronizer\nls\n dr-xr-sr-x 4 apigee apigee 4096 Sep 12 16:52 750\n drwxr-sr-x 2 apigee apigee 4096 Sep 12 16:52 cachedFiles\n -rw-r--r-- 1 apigee apigee 22295 Sep 12 16:52 config.log\n -rw-r--r-- 1 apigee apigee 76 Sep 12 16:52 versions.properties\n```\n- Check the active version in`version.properties`. For example:```\ncat versions.properties\n #active repository version\n #Sat Dec 14 19:45:00 GMT 2019\n active.version=749\n```\n- Be sure the value of`active.version`matches the name of the contract folder  number. In the above example (also shown below), the folder name is`750`;  therefore, they do not  match:```\ndr-xr-sr-x 4 apigee apigee 4096 Sep 12 16:52 750\n```\n- Exit the pod shell.\n### Resolution\nIf `version.properties` is missing, or if there is a version mis-match as explained above, check the [synchronizer logs](/apigee/docs/hybrid/v1.1/sync-logs) to try to determine why the most current contracts are not being downloaded. For example:\n```\nkubectl logs -f -n namespace synchronizer-pod-name\n```\nFor information on interpreting the synchronizer logs, see [Synchronizer logs](/apigee/docs/hybrid/v1.1/sync-logs) . If the synchronizer is down, try restarting it using `apigeectl` . For example:\n```\n$APIGEECTL_HOME/apigeectl apply -f overrides/overrides.yaml -c synchronizer\n```\n### Diagnosis: Message processor to synchronizer connection problem\nTo diagnose a **message processor to synchronizer connection problem** , do the following:\n- List the pods in the cluster:```\nkubectl get pods -n namespace\n```\n- Check the [runtime logs](/apigee/docs/hybrid/v1.1/runtime-logs) to try to figure out why the contracts are not being downloaded:```\nkubectl logs -f -n namespace pod-name\n```For example:```\nkubectl logs -f -n apigee apigee-runtime-apigee-gcp-prod1-test-blue-67db4f457b-9c7c7\n```It is possible if the new MP comes up as part of an autoscale or pod restart, that the MP might not load the contracts. Generally, the problem occurs when the synchronizer is down, preventing the MP from loading the contracts. For example:```\n2019-09-13 16:59:24,331 podName:N/A ipAddress:N/A dpColor:N/AHttpClient@331886186-301 DEBUG o.e.j.c.AbstractConnectionPool - AbstractConnectionPool$1.failed() :Connection 1/64 creation failedjava.net.UnknownHostException: apigee-synchronizer-apigee-gcp-prod1-test.hybrid.svc.cluster.localat java.net.InetAddress.getAllByName0(InetAddress.java:1281)at java.net.InetAddress.getAllByName(InetAddress.java:1193)at java.net.InetAddress.getAllByName(InetAddress.java:1127)at org.eclipse.jetty.util.SocketAddressResolver$Async.lambda$resolve$1(SocketAddressResolver.java:167)at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:672)at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:590)at java.lang.Thread.run(Thread.java:748)\u00a0 \u00a0 \u00a0 \u00a0 at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:590)\u00a0 \u00a0 \u00a0 \u00a0 at java.lang.Thread.run(Thread.java:748)\n```\n### Resolution\nTry restarting the synchronizer. For example:\n```\n$APIGEECTL_HOME/apigeectl apply -f overrides/overrides.yaml -c synchronizer\n```\n## Readiness probe fails for an invalid encryption key\n### Symptom\nThe `apigee-runtime` pods are not in the Ready state.\n### Diagnosis\nWhen you use `kubectl` to describe a failed `apigee-runtime` pod, you see this error: `Readiness probe failed: Probe hybrid-encryption-key-validation-probe failed` . For example:\n```\n$ kubectl describe pod -n namespace apigee-runtime-pod-name\n...\nReadiness probe failed: Probe hybrid-encryption-key-validation-probe failed due to\ncom.apigee.probe.model.ProbeFailedException{ code = hybrid.encryption.key.InvalidEncryptionKey,\nmessage = Invalid encryption key. Please check the length of the encryption key, associated\ncontexts = []}\n...\n```\n### Resolution\nSupported encryption key lengths are 16 or 24 or 32 bytes and the key's value has to be base64 encoded. For more information on creating a properly formatted key, see [Data encryption](/apigee/docs/hybrid/v1.1/key-encryption) .\n## Viewing message processor logs\nFor details about viewing and interpreting message processor logs, see [Runtime logs](/apigee/docs/hybrid/v1.1/runtime-logs) .\n## Call an API proxy from the runtime pod\nIn some situations to help isolate a problem, you might want to check if you can make an API proxy call directly from inside the `apigee-runtime` pod, and thereby bypassing the ingress gateway.\n- Execute the following command to forward to port 8843. This allows you to call the API in the pod:```\nkubectl port-forward -n namespace apigee-runtime-pod-name 8843:8843\n```\n- Call a deployed API proxy. For example, where the proxy basepath is`ilove-apis`:```\ncurl -k -v https://0:8443//ilove-apis\n < HTTP/1.1 200 OK\n < X-Powered-By: Apigee\n < Access-Control-Allow-Origin: *\n < X-Frame-Options: ALLOW-FROM RESOURCE-URL\n < X-XSS-Protection: 1\n < X-Content-Type-Options: nosniff\n < Content-Type: text/html; charset=utf-8\n < Content-Length: 18\n < ETag: W/\"12-Jb9QP1bUxNSmZkxQGt5KLQ\"\n < Date: Fri, 13 Sep 2019 18:33:46 GMT\n < Via: 1.1 google\n < X-Apigee.Message-ID: 016f5f7f-c59e-404c-86e8-7b0737833f982\n < X-Apigee.dp.color: blue\n < X-Apigee.proxy: /organizations/my-org/environments/test/apiproxies/i-loveapis/revisions/1\n < X-Apigee.proxy.basepath: /ilove-apis\n < X-Apigee.target-latency: 9\n <\n * Connection #0 to host 0 left intact\n <H2>I <3 APIs\n```## \n Check the management API\nYou can use the API described below to check if the management API is working properly.\n- Get the names of the pods in your cluster:```\nkubectl get pods -n namespace\n```\n- Use [port-forwarding](https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/) to gain access the`apigee-runtime`pod. The syntax for port forwarding is as follows:```\nkubectl port-forward -n namespace podname 8843:8843\n```For example:```\nkubectl port-forward -n apigee \\\n apigee-runtime-my-organization-test-blue-57965b7789-6j4bp 8843:8843\n```\n- Then, in another terminal window, use a utility such as`curl`to send a request  to the`classification/tree`API, as the following example shows:```\ncurl -k https://0:8843/v1/classification/tree\n```Here is an example response, which lists information about the deployed proxies in the  \"test\" environment:```\n[ {\n \"condition\" : \"(always matches)\",\n \"virtualHost\" : {\n \"env\" : \"test\",\n \"name\" : \"default\",\n \"org\" : \"my-organization\",\n \"tree\" : {\n  \"elements\" : [ {\n  \"application\" : \"myproxy\",\n  \"basePath\" : \"/myproxy\",\n  \"name\" : \"default\",\n  \"revision\" : \"1\"\n  } ],\n  \"name\" : \"IdentificationTree\"\n }\n }\n} ]\n```## Using DEBUG mode\nTo help with troubleshooting, you can enable DEBUG mode to include more detailed information in the `apigee-runtime` pod logs.\n- List the pods in your namespace:```\nkubectl get pods -n namespace\n```\n- Pick any one of the listed`apigee-runtime`pods to debug.\n- Execute the port forwarding command for that pod. For example:```\nkubectl port-forward -n hybrid apigee-runtime-hybrid-prod-blue-fcpdd 8843\n```\n- Open another terminal and call the following API to enable debugging:```\ncurl \"https://0:8843/v1/logsessions?sessions=debug\" -X POST -v -k\n```\n- Run the`kubectl logs`command to check the log that is in DEBUG Mode. For example:```\nkubectl logs -f -n hybrid apigee-runtime-hybrid-prod-blue-fcpdd\n```\n- When you are finished examining the DEBUG log, reset the log level to INFO (the default). For example:```\ncurl \"https://0:8843/v1/logsessions?sessions=info\" -X POST -v -k\n```\n- Run the`kubectl logs`command to make sure the log is back in INFO mode.", "guide": "Apigee"}