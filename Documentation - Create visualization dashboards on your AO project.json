{"title": "Documentation - Create visualization dashboards on your AO project", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Create visualization dashboards on your AO project\nThis section describes the process to create and manage dashboards in your system monitoring instance. Use dashboards to perform monitoring operations in your project, such as network monitoring and server monitoring.\nAfter the Observability platform collects the metrics produced by workloads deployed in your GDCH project, the configuration saves the associated metric labels and aggregates files from all data sources. Then, you can create customized dashboards to query and visualize metrics from the user interface (UI) of the project's system monitoring instance.\nA dashboard is a dynamic visual arrangement of one or more customizable panels that interact with metrics configured in data sources for data observability. By making queries, you can use each of these panels to visualize and expose specific metrics from your GDCH components for system monitoring.\nThe Observability platform exposes an API that lets you configure customizations for the visual arrangement of your metrics. For example, establish acceptance thresholds, display proper signals, label graphs, and choose a consistent time resolution.\nWork through the following steps to create a dashboard:\n- [Complete the prerequisites from the Before you begin section](#before-you-begin-creating-dashboards) .\n- [Open the endpoint of the system monitoring instance of your project](#monitoring-instance-endpoint) .\n- [Create a ConfigMap object for your dashboard](#create-configmap) .\n- [Create a Dashboard custom resource](#create-dashboard-cr) .", "content": "## Before you begin\nBefore creating dashboards, you must obtain access to the system monitoring instance. For more information, see [Get access to dashboards](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/get-access-dashboards) .\nAfter obtaining the corresponding role, work through the following steps:\n- [Collect metrics](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/collect-metrics) from your GDCH project.\n- Set the path of the kubeconfig file as an environment variable:```\nexport KUBECONFIG=KUBECONFIG_FILE\n```Replace with the path of the kubeconfig file on the admin cluster where you want to create the dashboard.## System monitoring instance endpoint\nThe following URL is the endpoint of the monitoring instance of your project:\n```\nhttps://GDCH_URL/PROJECT_NAMESPACE/grafana\n```\nReplace the following:\n- : the URL of your organization in GDCH\n- : the namespace of your project## Create a ConfigMap object for your dashboard\nFollow these steps to create a `ConfigMap` object containing the JSON model of the dashboard:\n- Go to [the endpoint of the system monitoring instance of your project](#monitoring-instance-endpoint) .\n- From the navigation menu, click theadd **Add** button.\n- From the drop-down menu that is displayed, click **Dashboard** . The instance creates an empty dashboard.\n- On the empty dashboard, add all the panels that you want. You can customize your details and edit your panels to supply your queries or make other updates. **Note:** When customizing your dashboard, ensure to implement the best practices for your use case to facilitate the visualization and interpretation of observability data from your components. For example, establish acceptance thresholds, display useful signals, properly label graphs, and choose a consistent time resolution.\n- From the menu bar, click the settings **Dashboard settings** button to open the **Settings** page.\n- From the navigation menu, click the **JSON Model** option.\n- Copy the JSON model of the dashboard and paste it in a plain-text file to keep it available to you.\n- Replace the top-level `id` and `uid` fields with the `null` value in the JSON model.\n- Create a `ConfigMap` object from the command line interface (CLI). In the `data` section of your `ConfigMap` object, paste the JSON model that you previously copied inside a `.json` file:```\ncat <<EOF | kubectl --kubeconfig ${KUBECONFIG} apply -f -apiVersion: v1kind: ConfigMapmetadata:\u00a0 namespace: PROJECT_NAMESPACE\u00a0 name: DASHBOARD_CONFIGMAP_NAMEdata:\u00a0 JSON_FILE_NAME.json: |\u00a0 \u00a0 {\u00a0 \u00a0 <JSON model of the dashboard>\u00a0 \u00a0 }EOF\n```Replace the following:- : the namespace of your project\n- : the name you want to give to your`ConfigMap`object\n- : the name you want to give to the file where you paste the JSON model of the dashboard\nFor an example of what this object must look like, see [the ConfigMap example for a dashboard](#configmap-example-for-a-dashboard) .\n- Deploy the `ConfigMap` object of your dashboard into the admin cluster.\n### ConfigMap example for a dashboard\nThe following YAML file shows an example of the `ConfigMap` object of a dashboard in the `platform-obs` namespace:\n```\n\u00a0 apiVersion: v1\u00a0 kind: ConfigMap\u00a0 metadata:\u00a0 \u00a0 namespace: platform-obs\u00a0 \u00a0 name: my-project-dashboard-configmap\u00a0 data:\u00a0 \u00a0 my-project-dashboard.json: |\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"annotations\": {\u00a0 \u00a0 \u00a0 \u00a0 \"list\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"builtIn\": 1,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"datasource\": \"--\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"enable\": true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"hide\": true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"iconColor\": \"rgba(0, 211, 255, 1)\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"Annotations & Alerts\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"dashboard\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"editable\": true,\u00a0 \u00a0 \u00a0 \"graphTooltip\": 0,\u00a0 \u00a0 \u00a0 \"id\": null,\u00a0 \u00a0 \u00a0 \"links\": [],\u00a0 \u00a0 \u00a0 \"panels\": [],\u00a0 \u00a0 \u00a0 \"schemaVersion\": 27,\u00a0 \u00a0 \u00a0 \"style\": \"dark\",\u00a0 \u00a0 \u00a0 \"tags\": [],\u00a0 \u00a0 \u00a0 \"templating\": {\u00a0 \u00a0 \u00a0 \u00a0 \"list\": []\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"time\": {\u00a0 \u00a0 \u00a0 \u00a0 \"from\": \"now-6h\",\u00a0 \u00a0 \u00a0 \u00a0 \"to\": \"now\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"timepicker\": {},\u00a0 \u00a0 \u00a0 \"timezone\": \"\",\u00a0 \u00a0 \u00a0 \"title\": \"Sample dashboard\",\u00a0 \u00a0 \u00a0 \"uid\": null,\u00a0 \u00a0 \u00a0 \"version\": 0\u00a0 \u00a0 \u00a0 }\n```\n## Create a Dashboard custom resource\nFollow these steps to create a `Dashboard` custom resource and enable the Observability dashboard on your project:\n- Create a `Dashboard` custom resource from the CLI and configure the file with the name you gave to the `ConfigMap` object of your dashboard:```\ncat <<EOF | kubectl --kubeconfig ${KUBECONFIG} apply -f -apiVersion: observability.gdc.goog/v1kind: Dashboardmetadata:\u00a0 namespace: PROJECT_NAMESPACE\u00a0 name: CUSTOM_RESOURCE_NAMEspec:\u00a0 configMapRef:\u00a0 \u00a0 name: DASHBOARD_CONFIGMAP_NAME\u00a0 \u00a0 namespace: PROJECT_NAMESPACE\u00a0 \u00a0 key: JSON_FILE_NAME.json\u00a0 foldername: DefaultEOF\n```Replace the following:- : the namespace of your project\n- : the name you want to give to your`Dashboard`custom resource\n- : the name you gave to the`ConfigMap`object for your dashboard\n- : the name you gave to the file that contains the JSON model of the dashboard in the`ConfigMap`object\n- Deploy the `Dashboard` custom resource into the project namespace. This action configures the Observability service to import the predefined dashboard to the system monitoring instance of your project.\nDashboards are isolated from other projects, as are metrics and logs. Consequently, if you want to use the same dashboard in multiple projects, deploy a `Dashboard` custom resource in each one. Also, the system logging and monitoring data that the dashboard accesses must be available in all those projects.\nThe process that handles the dashboards detects changes to both the `Dashboard` custom resource and the `ConfigMap` object. If you modify one or the other, the program reflects the change in the system monitoring instance. To update or delete a dashboard, you must apply the changes in the custom resource and deploy it again. You can't save any updates performed directly in the UI of the system monitoring instance.\nTo create a dashboard in a folder or change the folders, modify the `foldername` value in the `spec` section of the `Dashboard` custom resource. Otherwise, leave it as `Default` . The process automatically creates folders if they don't exist.", "guide": "Documentation"}