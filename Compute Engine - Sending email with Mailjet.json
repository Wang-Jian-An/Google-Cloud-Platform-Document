{"title": "Compute Engine - Sending email with Mailjet", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Sending email with Mailjet\n[Mailjet](https://www.mailjet.com/integration/google/?p=google) is a third-party global email service that offers Compute Engine users a free tier with 6,000 emails each month. In addition, Mailjet also offers:\n- An API, user interface, and SMTP relay to send transactional and marketing email.\n- European data privacy compliance.\n- Email and deliverability features, such as customizable priority settings and automated throttle management.\n- API resource library in Go, PHP, Nodejs, Java, Python, and Ruby to manage sub-accounts, authentication, contacts, campaigns, custom payloads, statistics, real time events, and parsing through the [Event API](https://dev.mailjet.com/email/guides/#event-api-real-time-notifications) .\n- Integrated [MJML](http://www.mjml.io/) framework to create responsive HTML email templates.\n- 24/7 follow-the-sun support in 4+ languages.\n- Ability to send email messages from domains other than`gmail.com`.\nThis document describes how to configure your VM instance to send mail through Mailjet using the following methods:\n- Through an [SMTP](https://wikipedia.org/wiki/Simple_Mail_Transfer_Protocol) relay with:- [Postfix](http://www.postfix.org/) \n- [Nodemailer](https://nodemailer.com/about/) on Node.js\n- Directly through the Mailjet API using Java\nFor extensive documentation of other email solutions, including examples of integration with most common SMTP servers, libraries, and frameworks, see [Mailjet's documentation](https://dev.mailjet.com/) .\n", "content": "## Before you begin\n- Create a new Mailjet account on Mailjet's [Google partnerpage](https://www.mailjet.com/google/?p=google) *. When signing up, provide the domain and email address from which you want to send email messages.\n- [Get your Mailjet SMTP account credentials](https://app.mailjet.com/account/apikeys) .\n- Make sure the email address you want to send emails from has been [validated](https://documentation.mailjet.com/hc/en-us/articles/360042759253-How-to-add-a-sender-address) .\n- [Set up a firewall rule](/vpc/docs/using-firewalls#creating_firewall_rules) to allow TCP traffic on port 2525.\n## Configuring Mailjet as an SMTP relay\nConfiguring Mailjet as a mail relay lets you forward email messages to Mailjet for remote delivery.\n### Using Postfix\n- Connect to your VM using SSH, replacing `` with the name of the instance you want to send email messages from:```\ngcloud compute ssh instance-name\n```\n- On the VM, install the Postfix Mail Transport Agent. When prompted, accept the default choices for domain names but select the `Local Only` configuration.\n```\nsudo apt update && sudo apt -y install postfix libsasl2-modules\n```\n```\nsudo yum install postfix cyrus-sasl-plain cyrus-sasl-md5 -y\n```\n- Modify the Postfix configuration options. Postfix configuration options are set in the `main.cf` file. Open the file with the text editor of your choice:```\nsudo vi /etc/postfix/main.cf\n```\n- Update the file:- Comment out the following lines:```\n# default_transport = error# relay_transport = error\n```\n- Add the following lines to the end of the file:```\nrelayhost = in-v3.mailjet.com:2525smtp_tls_security_level = encryptsmtp_sasl_auth_enable = yessmtp_sasl_password_maps = hash:/etc/postfix/sasl_passwdsmtp_sasl_security_options = noanonymous\n```These lines enforce SSL/TLS support and configure SMTP authentication for these requests. A simple access and security layer (SASL) module handles authentication in the Postfix configuration. **Note:** You must use port 2525 because port 25 is not allowed on Compute Engine.\n- Save your changes and close the file.\n- Create the SASL password map with the text editor of your choice:```\nsudo vi /etc/postfix/sasl_passwd\n```\n- To the `sasl_passwd` file, add the following lines to provide the credentials for Mailjet:```\nin-v3.mailjet.com:2525 YOUR_API_KEY:YOUR_SECRET_KEY\n```\n- Use the `postmap` utility to generate a `.db` file:```\nsudo postmap /etc/postfix/sasl_passwdsudo ls -l /etc/postfix/sasl_passwd*\n```You should receive the following response:```\n-rw------- 1 root root \u00a0 \u00a068 Jun \u00a01 10:50 /etc/postfix/sasl_passwd-rw------- 1 root root 12288 Jun \u00a01 10:51 /etc/postfix/sasl_passwd.db\n```\n- Next, remove the file that contains your credentials because it is no longer needed:```\nsudo rm /etc/postfix/sasl_passwd\n```\n- Set the permissions on your `.db` file:```\nsudo chmod 600 /etc/postfix/sasl_passwd.dbsudo ls -la /etc/postfix/sasl_passwd.db\n```\n- Finally, reload your configuration to load the modified parameters:\n```\nsudo /etc/init.d/postfix restart\n```\n```\nsudo postfix reload\n```\n- Test your configuration. Install the `mailx` or `mailutils` package and test your configuration.\n```\nsudo apt -y install mailutils\n```\n```\nsudo yum install mailx -y\n```\nSend a test message:```\necho 'Test passed.' | mail -s 'Test-Email' -aFrom:from-email destination-email\n```Replace the following:- ``: An email address that has been [validated](https://documentation.mailjet.com/hc/en-us/articles/360042759253-How-to-add-a-sender-address) .\n- ``: The address to send the email message to.\nLook in your system's logs for a status line containing `status` and the successful server response code `(250)` :\n```\nsudo tail -n 5 /var/log/syslog\n```\n```\nsudo tail -n 5 /var/log/maillog\n```\nIf you run into issues setting up Postfix with Mailjet, see the [Mailjet Postfix setup instructions](https://dev.mailjet.com/smtp-relay/configuration/#postfix-installation) .\n### Using Nodemailer\nThe following instructions describe how to use Mailjet with Node.js on Debian Wheezy.\n- Connect to your instance using SSH:```\ngcloud compute ssh instance-name\n```\n- Update your package repositories:```\nuser@test-wheezy:~# sudo apt update\n```\n- Install Node.js dependencies:```\nuser@test-wheezy:~# sudo apt -y install git-core curl build-essential openssl libssl-dev\n```\n- Clone the Node.js repo from github:```\nuser@test-wheezy:~# git clone https://github.com/nodejs/node\n```\n- Change the directory to the Node.js source tree:```\nuser@test-wheezy:~# cd node\n```\n- Configure node software for this OS and virtual machine:```\nuser@test-wheezy:~# ./configure\n```\n- Build Node.js, npm, and related objects:```\nuser@test-wheezy:~# sudo make\n```This can take a few minutes to complete.\n- Install Node.js, npm, and other software in the default location:```\nuser@test-wheezy:~# sudo make install\n```\n- Install the mailer package:```\nuser@test-wheezy:~# npm install nodemailer nodemailer-smtp-transport\n```\n- In the`node`directory, create a new file named`sendmail.js`that contains the following JavaScript: [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/compute/mailjet.js) ```\nconst mailer = require('nodemailer');const smtp = require('nodemailer-smtp-transport');async function mailjet() {\u00a0 const transport = mailer.createTransport(\u00a0 \u00a0 smtp({\u00a0 \u00a0 \u00a0 host: 'in.mailjet.com',\u00a0 \u00a0 \u00a0 port: 2525,\u00a0 \u00a0 \u00a0 auth: {\u00a0 \u00a0 \u00a0 \u00a0 user: process.env.MAILJET_API_KEY || '<your-mailjet-api-key',\u00a0 \u00a0 \u00a0 \u00a0 pass: process.env.MAILJET_API_SECRET || '<your-mailjet-api-secret>',\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 })\u00a0 );\u00a0 const json = await transport.sendMail({\u00a0 \u00a0 from: 'ANOTHER_EMAIL@ANOTHER_EXAMPLE.COM', // From address\u00a0 \u00a0 to: 'EMAIL@EXAMPLE.COM', // To address\u00a0 \u00a0 subject: 'test email from Node.js on Google Cloud Platform', // Subject\u00a0 \u00a0 text: 'Hello!\\n\\nThis a test email from Node.js.', // Content\u00a0 });\u00a0 console.log(json);}mailjet();\n```\n- Run the program to send an email message through Mailjet:```\nuser@test-wheezy:~# node sendmail.js\n```- Connect to your instance using SSH:```\ngcloud compute ssh instance-name\n```\n- Update package repositories:```\nuser@test-centos:~# sudo yum update -y\n```\n- Install Node.js dependencies:```\nuser@test-centos:~# sudo yum install git-core curl openssl openssl-dev -y\n...\nuser@test-centos:~# sudo yum groupinstall \"Development Tools\" -y\n...\n```\n- Clone Node.js repository from github:```\nuser@test-centos:~# git clone https://github.com/nodejs/node\n```\n- Change directory to the Node.js source tree:```\nuser@test-centos:~# cd node\n```\n- Configure node software for this OS and virtual machine:```\nuser@test-centos:~# ./configure\n```\n- Build Node.js, npm, and related objects:```\nuser@test-centos:~# sudo make\n```This can take a few minutes to complete.\n- Install Node.js, npm, and other software in the default location:```\nuser@test-centos:~# sudo make install\n```\n- Install the mailer package:```\nuser@test-centos:~# npm install npm install nodemailer nodemailer-smtp-transport\n```\n- In the`node`directory, create a new file named`sendmail.js`that contains the following JavaScript: [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/compute/mailjet.js) ```\nconst mailer = require('nodemailer');const smtp = require('nodemailer-smtp-transport');async function mailjet() {\u00a0 const transport = mailer.createTransport(\u00a0 \u00a0 smtp({\u00a0 \u00a0 \u00a0 host: 'in.mailjet.com',\u00a0 \u00a0 \u00a0 port: 2525,\u00a0 \u00a0 \u00a0 auth: {\u00a0 \u00a0 \u00a0 \u00a0 user: process.env.MAILJET_API_KEY || '<your-mailjet-api-key',\u00a0 \u00a0 \u00a0 \u00a0 pass: process.env.MAILJET_API_SECRET || '<your-mailjet-api-secret>',\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 })\u00a0 );\u00a0 const json = await transport.sendMail({\u00a0 \u00a0 from: 'ANOTHER_EMAIL@ANOTHER_EXAMPLE.COM', // From address\u00a0 \u00a0 to: 'EMAIL@EXAMPLE.COM', // To address\u00a0 \u00a0 subject: 'test email from Node.js on Google Cloud Platform', // Subject\u00a0 \u00a0 text: 'Hello!\\n\\nThis a test email from Node.js.', // Content\u00a0 });\u00a0 console.log(json);}mailjet();\n```\n- Run the program to send an email message through Mailjet:```\nuser@test-centos:~# node sendmail.js\n```## Sending mail through the Mailjet API with Java\nFor more examples of using the Mailjet API, see the [official Mailjet documentation](https://app.mailjet.com/docs/code) .\n- Connect to your instance using SSH:```\ngcloud compute ssh instance-name\n```\n- Update your package repositories and install the required packages:```\nuser@test-instance:~# sudo apt update && sudo apt install git-core openjdk-8-jdk maven\n```\n- Clone the Java repo from GitHub:```\nuser@test-instance:~# git clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\n```\n- Go to the main source code for the example, located at:```\n/root/java-docs-samples/compute/mailjet/src/main/java/com/example/compute/mailjet\n```\n- Configure your Mailjet settings. Refer to the Mailjet [Authentication](https://dev.mailjet.com/email/guides/#authentication) documentation on how to replace the   following variables:- ``:    An API key for your Mailjet account.\n- ``: The    corresponding secret key for your Mailjet account.\n [  compute/mailjet/src/main/java/com/example/compute/mailjet/MailjetSender.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/compute/mailjet/src/main/java/com/example/compute/mailjet/MailjetSender.java) [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/compute/mailjet/src/main/java/com/example/compute/mailjet/MailjetSender.java) ```\npublic class MailjetSender {\u00a0 public static void main(String[] args) throws MailjetException {\u00a0 \u00a0 final String mailjetApiKey = \"YOUR-MAILJET-API-KEY\";\u00a0 \u00a0 final String mailjetSecretKey = \"YOUR-MAILJET-SECRET-KEY\";\u00a0 \u00a0 ClientOptions options =\u00a0 \u00a0 \u00a0 \u00a0 ClientOptions.builder().apiKey(mailjetApiKey).apiSecretKey(mailjetSecretKey).build();\u00a0 \u00a0 MailjetClient client = new MailjetClient(options);\u00a0 \u00a0 MailjetSender sender = new MailjetSender();\u00a0 \u00a0 sender.sendMailjet(args[0], args[1], client);\u00a0 }\u00a0 public MailjetResponse sendMailjet(String recipient, String sender, MailjetClient client)\u00a0 \u00a0 \u00a0 throws MailjetException {\u00a0 \u00a0 MailjetRequest email =\u00a0 \u00a0 \u00a0 \u00a0 new MailjetRequest(Emailv31.resource)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .property(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Emailv31.MESSAGES,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new JSONArray()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .put(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new JSONObject()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .put(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Emailv31.Message.FROM,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new JSONObject().put(\"Email\", sender).put(\"Name\", \"pandora\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .put(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Emailv31.Message.TO,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new JSONArray().put(new JSONObject().put(\"Email\", recipient)))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .put(Emailv31.Message.SUBJECT, \"Your email flight plan!\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .put(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Emailv31.Message.TEXTPART,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Dear passenger, welcome to Mailjet!\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"May the delivery force be with you!\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .put(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Emailv31.Message.HTMLPART,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"<h3>Dear passenger, welcome to Mailjet!</h3>\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"<br />May the delivery force be with you!\")));\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 // trigger the API call\u00a0 \u00a0 \u00a0 MailjetResponse response = client.post(email);\u00a0 \u00a0 \u00a0 // Read the response data and status\u00a0 \u00a0 \u00a0 System.out.println(response.getStatus());\u00a0 \u00a0 \u00a0 System.out.println(response.getData());\u00a0 \u00a0 \u00a0 return response;\u00a0 \u00a0 } catch (MailjetException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Mailjet Exception: \" + e);\u00a0 \u00a0 \u00a0 return null;\u00a0 \u00a0 }\u00a0 }}\n```\n- From the`mailjet`directory, use Maven to package the   class as a JAR file:```\nuser@test-instance:~# mvn clean package\n```\n- Ensure that you are using OpenJDK 8:```\nuser@test-instance:~# sudo update-alternatives --config java\n```\n- To send an email: from the target directory, run the JAR file with   your recipient and sender email addresses as arguments:```\nuser@test-instance:~# java -jar\n  compute-mailjet-1.0-SNAPSHOT-jar-with-dependencies.jar\n  recipient-email sender-email\n```- Connect to your instance using SSH:```\ngcloud compute ssh instance-name\n```\n- Update your package repositories and install the required packages:```\nuser@test-centos:~# sudo yum update && sudo yum install git-core openjdk-8-jdk maven\n```\n- Clone the Java repo from GitHub:```\nuser@test-centos:~# git clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\n```\n- Go to the main source code for the example, located at:```\n/root/java-docs-samples/compute/mailjet/src/main/java/com/example/compute/mailjet\n```\n- Configure your Mailjet settings. For information about how to   replace the following variables, refer to the Mailjet [Authentication](https://dev.mailjet.com/email/guides/#authentication) documentation:- ``:    An API key for your Mailjet account.\n- ``: The    corresponding secret key for your Mailjet account.\n [  compute/mailjet/src/main/java/com/example/compute/mailjet/MailjetSender.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/compute/mailjet/src/main/java/com/example/compute/mailjet/MailjetSender.java) [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/compute/mailjet/src/main/java/com/example/compute/mailjet/MailjetSender.java) ```\npublic class MailjetSender {\u00a0 public static void main(String[] args) throws MailjetException {\u00a0 \u00a0 final String mailjetApiKey = \"YOUR-MAILJET-API-KEY\";\u00a0 \u00a0 final String mailjetSecretKey = \"YOUR-MAILJET-SECRET-KEY\";\u00a0 \u00a0 ClientOptions options =\u00a0 \u00a0 \u00a0 \u00a0 ClientOptions.builder().apiKey(mailjetApiKey).apiSecretKey(mailjetSecretKey).build();\u00a0 \u00a0 MailjetClient client = new MailjetClient(options);\u00a0 \u00a0 MailjetSender sender = new MailjetSender();\u00a0 \u00a0 sender.sendMailjet(args[0], args[1], client);\u00a0 }\u00a0 public MailjetResponse sendMailjet(String recipient, String sender, MailjetClient client)\u00a0 \u00a0 \u00a0 throws MailjetException {\u00a0 \u00a0 MailjetRequest email =\u00a0 \u00a0 \u00a0 \u00a0 new MailjetRequest(Emailv31.resource)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .property(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Emailv31.MESSAGES,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new JSONArray()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .put(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new JSONObject()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .put(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Emailv31.Message.FROM,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new JSONObject().put(\"Email\", sender).put(\"Name\", \"pandora\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .put(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Emailv31.Message.TO,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new JSONArray().put(new JSONObject().put(\"Email\", recipient)))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .put(Emailv31.Message.SUBJECT, \"Your email flight plan!\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .put(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Emailv31.Message.TEXTPART,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Dear passenger, welcome to Mailjet!\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"May the delivery force be with you!\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .put(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Emailv31.Message.HTMLPART,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"<h3>Dear passenger, welcome to Mailjet!</h3>\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"<br />May the delivery force be with you!\")));\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 // trigger the API call\u00a0 \u00a0 \u00a0 MailjetResponse response = client.post(email);\u00a0 \u00a0 \u00a0 // Read the response data and status\u00a0 \u00a0 \u00a0 System.out.println(response.getStatus());\u00a0 \u00a0 \u00a0 System.out.println(response.getData());\u00a0 \u00a0 \u00a0 return response;\u00a0 \u00a0 } catch (MailjetException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Mailjet Exception: \" + e);\u00a0 \u00a0 \u00a0 return null;\u00a0 \u00a0 }\u00a0 }}\n```\n- From the`mailjet`directory, use Maven to package the class   as a JAR file:```\nuser@test-centos:~# mvn clean package\n```\n- Ensure that you are using OpenJDK 8:```\nuser@test-centos:~# sudo alternatives --config java\n```\n- To send an email, from the target directory, run the JAR file with   your recipient and sender email addresses as arguments:```\nuser@test-centos:~# java -jar\n  compute-mailjet-1.0-SNAPSHOT-jar-with-dependencies.jar\n  recipient-email sender-email\n```## Mailjet SMTP settings\nHere is a quick reference to Mailjet-specific SMTP settings that are used to configure clients:\n- **Host: in-v3.mailjet.com** \n- **Port: 2525** ## What's next\nExplore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Compute Engine"}