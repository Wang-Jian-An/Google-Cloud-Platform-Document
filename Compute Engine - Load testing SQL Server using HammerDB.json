{"title": "Compute Engine - Load testing SQL Server using HammerDB", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Load testing SQL Server using HammerDB\nThis tutorial shows how to use HammerDB to perform load testing on a Compute Engine SQL Server instance. You can learn how to install a SQL Server instance by using the following tutorials:- [Creating SQL Server instances](/compute/docs/instances/sql-server/creating-sql-server-instances) \n- [Creating a high-performance SQL Server instance](/compute/docs/tutorials/creating-high-performance-sql-server-instance) \nThere are a number of load-testing tools available. Some are free and open source, while others require licenses. [HammerDB](http://www.hammerdb.com) is an open source tool that generally works well to demonstrate the performance of your SQL Server database. This tutorial covers the basic steps to use HammerDB, but there are other tools available, and you should select the tools that align best to your specific workloads.", "content": "## Objectives\n- Configuring SQL Server for load testing.\n- Installing and running HammerDB.\n- Collecting runtime statistics.\n- Running the TPC-C load test.\n## CostsIn addition to any existing SQL Server instances running on Compute Engine, this tutorial uses billable components of Google Cloud, including:- Compute Engine\n- Windows Server\nThe [Pricing Calculator](/products/calculator#id=7411bcbb-3399-46bf-9dd0-9642361cd988) can generate a cost estimate based on your projected usage. The provided link shows the cost estimate for the products used in this tutorial, which can average 16 dollars (US) per day. ## Before you begin- If you aren't using Windows on your local machine, install a third-party Remote Desktop Protocol (RDP) client. For more information, see [Microsoft Remote Desktop clients](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/remote-desktop-clients) .\n## Configuring the SQL Server instance for load testingBefore you start, you should double check that your Windows [firewallrules](https://msdn.microsoft.com/en-us/library/cc646023.aspx) are set up to allow traffic from the IP address of the new Windows instance you created. Then, create a new database for TPCC load testing and configure a user account using the following steps:- Right-click the **Databases** folder in SQL Server Management Studio, and then choose **New Database** .\n- Name the new database \"TPCC\".\n- Set the initial size of the data file to 190,000 MB and the log file to 65,000 MB.\n- Set the **Autogrowth** limits to higher values by clicking the ellipsis buttons, as shown in the following screenshot: \n- Set the data file to grow by 64 MB to unlimited size.\n- Set the log file to disable auto-growth.\n- Click **OK** .\n- In the **New Database** dialog, in the left pane, choose the **Options** page.\n- Set **Compatibility level** to **SQL Server 2012 (110)** .\n- Set the **Recovery model** to **Simple** , so that the loading doesn't fill up the transaction logs. \n- Click **OK** to create the TPCC database, which can take a few minutes to complete.\n- The preconfigured SQL Server image comes with only Windows Authentication enabled, so you will need to enable mixed mode authentication within SSMS, by following [this guide](https://msdn.microsoft.com/en-us/library/ms188670(v=sql.120).aspx) .\n- [Follow these steps](https://msdn.microsoft.com/en-us/library/aa337562.aspx) to create a new SQL Server user account on your database server that has the DBOwner permission. Name the account \"loaduser\" and give it a secure password.\n- Take note of your SQL Server internal IP address by using the `Get-NetIPAddress` commandlet, because it's important for performance and security to use the internal IP.\n## Installing HammerDBYou can run HammerDB directly on your SQL Server instance. However, for a more accurate test, create a new Windows instance and test the SQL Server instance remotely.\n **Note:** You might need to disable [Internet Explorer Enhanced SecurityConfiguration](https://learn.microsoft.com/en-us/troubleshoot/developer/browsers/security-privacy/enhanced-security-configuration-faq) before downloading files to your Windows Server instance.\n### Creating an instanceFollow these steps to create a new Compute Engine instance:- In the Google Cloud console, go to the **Create an instance** page. [Go to Create an instance](https://console.cloud.google.com/compute/instancesAdd) \n- For **Name** , enter `hammerdb-instance` .\n- In the **Machine configuration** section, select the machine type with at least half the number of CPUs as your database instance.\n- In the **Boot disk** section, click **Change** , and then do the following:- On the **Public images** tab, choose a Windows Server operating system.\n- In the **Version** list, click **Windows Server 2012 R2** or **Windows\nServer 2012 R2 Core** .\n- In the **Boot disk type** list, select **Standard persistent disk** .\n- To confirm your boot disk options, click **Select** .\n- To create and start the VM, click **Create** .\n### Installing the softwareWhen it's ready, use an RDP client to connect to your new Windows Server instance and install the following software:- [SQL Server native client](http://go.microsoft.com/fwlink/?LinkID=239648&clcid=0x409) \n- [HammerDB for Windows 64-bit](http://www.hammerdb.com/download.html) \n## Running HammerDBAfter you install HammerDB, run the `hammerdb.bat` file. HammberDB does not show up in the Start menu's applications list. Use the following command to run HammerDB:\n```\nC:\\Program Files\\HammerDB-2.20\\hammerdb.bat\n```\n### Creating the connection and schemaWhen the application is running, the first step is to configure the connection to build the schema.- Double-click **SQL Server** in the **Benchmark** panel.\n- Choose **TPC-C** , an acronym that stands for: Transaction Processing Performance Council - Benchmark C. From the [TPC.org site](http://www.tpc.org/) :\n- Click **OK** \n- In the **Benchmark** panel, next to **SQL Server** , click the plus sign ( **+** ) to expand the options.\n- Below **TPC-C** , click **Schema Build** and then double click **Options** .\n- Fill out the form to look like the figure below, using your IP address, username, and password. \n- For the **Schema** option, choose **Updated** , which creates a better TPC-C schema with more appropriate structure and better indexes.\n- In this case, the **Number of Warehouses** (the scale) is set to 2000, but you don't have to set it that high, because creating 2000 warehouses will take several hours to complete. Some guidelines suggest 10 to 100 warehouses per CPU. For this tutorial, set this value to 10 times the number of cores: 160 for a 16-core instance.\n- For **Virtual Users to Build Schema** , choose a number that is between 1- and 2-times the number of client vCPUs. You can click the grey bar next to the slider to increment the number.\n- Click **OK** \n- Double click the **Build** option below the **Schema Build** section to create the schema and load the tables. When that completes, click the red flash light icon in the top center of the screen to destroy the virtual user and move to the next step.\nIf you created your database with the `Simple` recovery model, you might want to change it back to `Full` at this point to get a more accurate test of a production scenario. This will not take effect until after you take a full or differential backup to trigger the start of the new log chain.\n **Important:** If you plan to run multiple tests, [make a full backup of your newTPC-C database](https://msdn.microsoft.com/en-us/library/ms187510(v=sql.120).aspx#SSMSProcedure) , so that you can restore it later. Backing up can save you time compared to creating the database again by using the tool. If you revert the database to a Full recovery model, you should backup the transaction logs to clear them out after each test.\n### Creating the driver scriptHammerDB uses the driver script to orchestrate the flow of SQL statements to the database to generate the required load.- In the **Benchmark** panel, expand the **Driver Script** section and double-click **Options** .\n- Verify the settings match what you used in the **Schema Build** dialog.\n- Choose **Timed Test Driver Script** .\n- The **Checkpoint when complete** option forces the database to write everything to disk at the end of the test, so check this only if you plan on running multiple tests in a row.\n- To ensure a thorough test, set **Minutes of Rampup Time** to 5 and **Minutes for Test Duration** to 20.\n- Click **OK** to exit the dialog.\n- Double-click **Load** in the **Driver Script** section of the **Benchmark** panel to activate the driver script.\n \n### Creating virtual usersCreating a realistic load typically requires running scripts as multiple different users. Create some virtual users for the test.- Expand the **Virtual Users** section and double click **Options** .\n- If you set your warehouse count (scale) to 160, then set the **Virtual Users** to 16, because the TPC-C guidelines recommend a 10x ratio to prevent row locking. Select the **Show Output** checkbox to enable error messages in the console.\n- Click **OK** \n## Collecting runtime statisticsHammerDB and SQL Server don't easily collect detailed runtime statistics for you. Although the statistics are available deep within SQL Server, they need to be captured and calculated on a regular basis. If you do not already have a procedure or tool to help capture this data, you can use the procedure below to capture some useful metrics during your testing. The results will be written to a CSV file in the Windows `temp` directory. You can copy the data to a Google Sheet using the **Paste Special** > **Paste CSV** option.\nTo use this procedure, you first must temporarily enable **OLE Automation Procedures** to write the file to disk,. Remember to disable it after testing:\n```\nsp_configure 'show advanced options', 1;\nGO\nRECONFIGURE;\nGO\nsp_configure 'Ole Automation Procedures', 1;\nGO\nRECONFIGURE;\nGO\n```\n **Note:** Although this procedure is very small, it can affect the total throughput reported by a fraction of a percent.\nHere's the code to create the `sp_write_performance_counters` procedure in SQL Server Management Studio. Before starting the load test, you will execute this procedure in Management Studio.:\n```\nUSE [master]\nGO\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n/***\nLogFile path has to be in a directory that SQL Server can Write To.\n*/\nCREATE PROCEDURE [dbo].[sp_write_performance_counters] @LogFile varchar (2000) = 'C:\\\\WINDOWS\\\\TEMP\\\\sqlPerf.log', @SecondsToRun int =1600, @RunIntervalSeconds int = 2\nAS\nBEGIN\n--File writing variables\nDECLARE @OACreate INT, @OAFile INT, @FileName VARCHAR(2000), @RowText VARCHAR(500), @Loops int, @LoopCounter int, @WaitForSeconds varchar (10)\n--Variables to save last counter values\nDECLARE @LastTPS BIGINT, @LastLRS BIGINT, @LastLTS BIGINT, @LastLWS BIGINT, @LastNDS BIGINT, @LastAWT BIGINT, @LastAWT_Base BIGINT, @LastALWT BIGINT, @LastALWT_Base BIGINT\n--Variables to save current counter values\nDECLARE @TPS BIGINT, @Active BIGINT, @SCM BIGINT, @LRS BIGINT, @LTS BIGINT, @LWS BIGINT, @NDS BIGINT, @AWT BIGINT, @AWT_Base BIGINT, @ALWT BIGINT, @ALWT_Base BIGINT, @ALWT_DIV BIGINT, @AWT_DIV BIGINT\nSELECT @Loops = case when (@SecondsToRun % @RunIntervalSeconds) > 5 then @SecondsToRun / @RunIntervalSeconds + 1 else @SecondsToRun / @RunIntervalSeconds end\nSET @LoopCounter = 0\nSELECT @WaitForSeconds = CONVERT(varchar, DATEADD(s, @RunIntervalSeconds , 0), 114)\nSELECT @FileName = @LogFile + FORMAT ( GETDATE(), '-MM-dd-yyyy_m', 'en-US' ) + '.txt'\n--Create the File Handler and Open the File\nEXECUTE sp_OACreate 'Scripting.FileSystemObject', @OACreate OUT\nEXECUTE sp_OAMethod @OACreate, 'OpenTextFile', @OAFile OUT, @FileName, 2, True, -2\n--Write the Header\nEXECUTE sp_OAMethod @OAFile, 'WriteLine', NULL,'Transactions/sec, Active Transactions, SQL Cache Memory (KB), Lock Requests/sec, Lock Timeouts/sec, Lock Waits/sec, Number of Deadlocks/sec, Average Wait Time (ms), Average Latch Wait Time (ms)'\n--Collect Initial Sample Values\nSET ANSI_WARNINGS OFF\nSELECT\n @LastTPS= max(case when counter_name = 'Transactions/sec' then cntr_value end),\n @LastLRS = max(case when counter_name = 'Lock Requests/sec' then cntr_value end),\n @LastLTS = max(case when counter_name = 'Lock Timeouts/sec' then cntr_value end),\n @LastLWS = max(case when counter_name = 'Lock Waits/sec' then cntr_value end),\n @LastNDS = max(case when counter_name = 'Number of Deadlocks/sec' then cntr_value end),\n @LastAWT = max(case when counter_name = 'Average Wait Time (ms)' then cntr_value end),\n @LastAWT_Base = max(case when counter_name = 'Average Wait Time base' then cntr_value end),\n @LastALWT = max(case when counter_name = 'Average Latch Wait Time (ms)' then cntr_value end),\n @LastALWT_Base = max(case when counter_name = 'Average Latch Wait Time base' then cntr_value end)\nFROM sys.dm_os_performance_counters\nWHERE counter_name IN (\n'Transactions/sec',\n'Lock Requests/sec',\n'Lock Timeouts/sec',\n'Lock Waits/sec',\n'Number of Deadlocks/sec',\n'Average Wait Time (ms)',\n'Average Wait Time base',\n'Average Latch Wait Time (ms)',\n'Average Latch Wait Time base') AND instance_name IN( '_Total' ,'')\nSET ANSI_WARNINGS ON\nWHILE @LoopCounter <= @Loops\nBEGIN\nWAITFOR DELAY @WaitForSeconds\nSET ANSI_WARNINGS OFF\nSELECT\n @TPS= max(case when counter_name = 'Transactions/sec' then cntr_value end) ,\n @Active = max(case when counter_name = 'Active Transactions' then cntr_value end) ,\n @SCM = max(case when counter_name = 'SQL Cache Memory (KB)' then cntr_value end) ,\n @LRS = max(case when counter_name = 'Lock Requests/sec' then cntr_value end) ,\n @LTS = max(case when counter_name = 'Lock Timeouts/sec' then cntr_value end) ,\n @LWS = max(case when counter_name = 'Lock Waits/sec' then cntr_value end) ,\n @NDS = max(case when counter_name = 'Number of Deadlocks/sec' then cntr_value end) ,\n @AWT = max(case when counter_name = 'Average Wait Time (ms)' then cntr_value end) ,\n @AWT_Base = max(case when counter_name = 'Average Wait Time base' then cntr_value end) ,\n @ALWT = max(case when counter_name = 'Average Latch Wait Time (ms)' then cntr_value end) ,\n @ALWT_Base = max(case when counter_name = 'Average Latch Wait Time base' then cntr_value end)\nFROM sys.dm_os_performance_counters\nWHERE counter_name IN (\n'Transactions/sec',\n'Active Transactions',\n'SQL Cache Memory (KB)',\n'Lock Requests/sec',\n'Lock Timeouts/sec',\n'Lock Waits/sec',\n'Number of Deadlocks/sec',\n'Average Wait Time (ms)',\n'Average Wait Time base',\n'Average Latch Wait Time (ms)',\n'Average Latch Wait Time base') AND instance_name IN( '_Total' ,'')\nSET ANSI_WARNINGS ON\nSELECT @AWT_DIV = case when (@AWT_Base - @LastAWT_Base) > 0 then (@AWT_Base - @LastAWT_Base) else 1 end ,\n @ALWT_DIV = case when (@ALWT_Base - @LastALWT_Base) > 0 then (@ALWT_Base - @LastALWT_Base) else 1 end\nSELECT @RowText = '' + convert(varchar, (@TPS - @LastTPS)/@RunIntervalSeconds) + ', ' +\n   convert(varchar, @Active) + ', ' +\n   convert(varchar, @SCM) + ', ' +\n   convert(varchar, (@LRS - @LastLRS)/@RunIntervalSeconds) + ', ' +\n   convert(varchar, (@LTS - @LastLTS)/@RunIntervalSeconds) + ', ' +\n   convert(varchar, (@LWS - @LastLWS)/@RunIntervalSeconds) + ', ' +\n   convert(varchar, (@NDS - @LastNDS)/@RunIntervalSeconds) + ', ' +\n   convert(varchar, (@AWT - @LastAWT)/@AWT_DIV) + ', ' +\n   convert(varchar, (@ALWT - @LastALWT)/@ALWT_DIV)\nSELECT @LastTPS = @TPS,\n @LastLRS = @LRS,\n @LastLTS = @LTS,\n @LastLWS = @LWS,\n @LastNDS = @NDS,\n @LastAWT = @AWT,\n @LastAWT_Base = @AWT_Base,\n @LastALWT = @ALWT,\n @LastALWT_Base = @ALWT_Base\nEXECUTE sp_OAMethod @OAFile, 'WriteLine', Null, @RowText\nSET @LoopCounter = @LoopCounter + 1\nEND\n--CLEAN UP\nEXECUTE sp_OADestroy @OAFile\nEXECUTE sp_OADestroy @OACreate\nprint 'Completed Logging Performance Metrics to file: ' + @FileName\nEND\nGO\n```## Running the TPC-C load testIn SQL Server Management Studio, execute the collection procedure using the following script:\n```\nUse master\nGo\nexec dbo.sp_write_performance_counters\n```\nOn the Compute Engine instance where you installed HammerDB, start the test in the HammerDB application:- In the **Benchmark** panel, under **Virtual Users** double-click **Create** to create the virtual users, which will activate the **Virtual User Output** tab.\n- Double-click **Run** just below the **Create** option to kick off the test.\n- When the test completes you will see the Transactions Per Minute (TPM) calculation in the **Virtual User Output** tab.\n- You can find the results from your collection procedure in the`c:\\Windows\\temp`directory.\n- Save all of these values to a Google Sheet and use them to compare multiple test runs.\n## Clean up\nAfter you finish the tutorial, you can clean up the resources that you created so that they stop using quota and incurring charges. The following sections describe how to delete or turn off these resources.\n### Deleting the project\nThe easiest way to eliminate billing is to delete the project that you created for the tutorial.\nTo delete the project:\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.### Deleting instances\nTo delete a Compute Engine instance:\n- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Select the checkbox for   the instance that you want to delete.\n- To delete the instance, clickmore_vert **More actions** , click **Delete** ,  and then follow the instructions.\n## What's next\n- Review the [SQL Serverbest practices guide](/compute/docs/instances/sql-server/best-practices) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Compute Engine"}