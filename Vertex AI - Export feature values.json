{"title": "Vertex AI - Export feature values", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Export feature values\nTo learn more,  run the \"Example Feature Store workflow with sample data\" Jupyter notebook in one of the following  environments: [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/feature_store/sdk-feature-store.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Ffeature_store%2Fsdk-feature-store.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/feature_store/sdk-feature-store.ipynb)\nExport feature values for all entities of a single entity type to a BigQuery table or a Cloud Storage bucket. You can choose to get a snapshot or to fully export feature values. A snapshot returns a single value per feature compared to a full export, which can return multiple values per feature. You can't select particular entity IDs or include multiple entity types when exporting feature values.\nExporting feature values is useful for archiving or for performing ad hoc analysis on your data. For example, you can store regular snapshots of your featurestore to save its state at different points in time. If you need to get feature values for building a training dataset, use [batchserving](/vertex-ai/docs/featurestore/serving-batch) instead.\n", "content": "## Snapshot and full export comparison\nBoth the snapshot and full export options let you query data by specifying a single timestamp (either the start time or end time) or both timestamps. For snapshots, Vertex AI Feature Store (Legacy) returns the latest feature value within a given time range. In the output, the associated timestamp with each feature value is the snapshot timestamp (not the feature value timestamp).\nFor full exports, Vertex AI Feature Store (Legacy) returns all feature values within a given time range. In the output, the associated timestamp with each feature value is the feature timestamp (the specified timestamp when the feature value was ingested).\nThe following table summarizes what Vertex AI Feature Store (Legacy) returns based on the option that you choose and the timestamps that you provide.\n| Option  | Start time only (inclusive)                                      | End time only (inclusive)                                    | Start and end time (inclusive)                      |\n|:------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------|\n| Snapshot | Starting with the current time (when the request was received), returns the latest value, looking back until the start time. The snapshot timestamp is set to the current time. | Starting with the end time, returns the latest value, looking back to the very first value for each feature. The snapshot timestamp is set to the specified end time. | Returns the latest value within the specified time range. The snapshot timestamp is set to the specified end time. |\n| Full export | Returns all values on and after the start time and up to the current time (when the request was sent).                   | Returns all values up to the end time, going all the way back to the very first value for each feature.                | Returns all values within the specified time range.                 |\n## Null values\nFor snapshots, if the latest feature value is null at a given timestamp, Vertex AI Feature Store (Legacy) returns the previous non-null feature value. If there are no previous non-null values, Vertex AI Feature Store (Legacy) returns null.\nFor full exports, if a feature value is null at a given timestamp, Vertex AI Feature Store (Legacy) returns null for that timestamp.\n## Examples\nAs an example, assume you had the following values in a featurestore, where the values for `Feature_A` and `Feature_B` share the same timestamp:\n| Entity ID | Feature value timestamp | Feature_A | Feature_B |\n|------------:|:--------------------------|:------------|:------------|\n|   123 | T1      | A_T1  | B_T1  |\n|   123 | T2      | A_T2  | nan   |\n|   123 | T3      | A_T3  | nan   |\n|   123 | T4      | A_T4  | B_T4  |\n|   123 | T5      | nan   | B_T5  |\n### Snapshot\nFor snapshots, Vertex AI Feature Store (Legacy) returns the following values based on the given timestamp values:\n- If only the **start** time is set to`T3`, the snapshot returns the following values:\n| Entity ID | Snapshot timestamp | Feature_A | Feature_B |\n|------------:|:---------------------|:------------|:------------|\n|   123 | CURRENT_TIME   | A_T4  | B_T5  |\n- If only the **end** time is set to`T3`, the snapshot returns the following values:\n| Entity ID | Snapshot timestamp | Feature_A | Feature_B |\n|------------:|:---------------------|:------------|:------------|\n|   123 | T3     | A_T3  | B_T1  |\n- If the **start** and **end** times are set to`T2`and`T3`, the snapshot returns the following values:\n| Entity ID | Snapshot timestamp | Feature_A | Feature_B |\n|------------:|:---------------------|:------------|------------:|\n|   123 | T3     | A_T3  |   nan |\n### Full export\nFor full exports, Vertex AI Feature Store (Legacy) returns the following values based on the given timestamp values:\n- If only the **start** time is set to`T3`, the full export returns the following values:\n| Entity ID | Feature value timestamp | Feature_A | Feature_B |\n|------------:|:--------------------------|:------------|:------------|\n|   123 | T3      | A_T3  | nan   |\n|   123 | T4      | A_T4  | B_T4  |\n|   123 | T5      | nan   | B_T5  |\n- If only the **end** time is set to`T3`, the full export returns the following values:\n| Entity ID | Feature value timestamp | Feature_A | Feature_B |\n|------------:|:--------------------------|:------------|:------------|\n|   123 | T1      | A_T1  | B_T1  |\n|   123 | T2      | A_T2  | nan   |\n|   123 | T3      | A_T3  | nan   |\n- If the **start** and **end** times are set to`T2`and`T4`, the full export returns the following values:\n| Entity ID | Feature value timestamp | Feature_A | Feature_B |\n|------------:|:--------------------------|:------------|:------------|\n|   123 | T2      | A_T2  | nan   |\n|   123 | T3      | A_T3  | nan   |\n|   123 | T4      | A_T4  | B_T4  |\n## Export feature values\nWhen you export feature values, you choose which features to query and whether it is a snapshot or a full export. The following sections show a sample for each option.\nFor both options, the output destination must be in the same region as the source featurestore. For example, if your featurestore is in `us-central1` , then the destination Cloud Storage bucket or BigQuery table must also be in `us-central1` .\n### Snapshot\nExport the latest feature values for a given time range.\nUse another method. You cannot export feature values from the Google Cloud console.To export feature values, send a POST request by using the [entityTypes.exportFeatureValues](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes/exportFeatureValues) method.\nThe following sample outputs a BigQuery table, but you can also output to a Cloud Storage bucket. Each output destination might have some prerequisites before you can submit a request. For example, if you specify a table name for the `bigqueryDestination` field, you must have an existing dataset. These requirements are documented in the API reference.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located. For example,`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- and: (Optional) If you specify  the start time only, returns the latest value starting from the current time  (when the request is sent) and looking back until the start time. If you  specify the end time only, returns the latest value starting from the end  time (inclusive) and looking back to the very first value. If you specify a  start time and end time, returns the latest value within the specified time  range (inclusive). If you specify neither, returns the latest values for  each feature, starting from the current time and looking back to the very  first value.\n- : Name of the destination BigQuery dataset.\n- : Name of the destination BigQuery table.\n- : ID of one or more features. Specify a single`*`(asterisk) to select all features.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:exportFeatureValues\n```\nRequest JSON body:\n```\n{\n \"snapshotExport\": {\n \"start_time\": \"START_TIME\",\n \"snapshot_time\": \"END_TIME\"\n },\n \"destination\" : {\n \"bigqueryDestination\": {\n  \"outputUri\": \"bq://PROJECT_ID.DATASET_NAME.TABLE_NAME\"\n }\n },\n \"featureSelector\": {\n \"idMatcher\": {\n  \"ids\": [\"FEATURE_ID\", ...]\n }\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:exportFeatureValues\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:exportFeatureValues\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.v1.ExportFeatureValuesOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2021-12-03T22:55:25.974976Z\",\n  \"updateTime\": \"2021-12-03T22:55:25.974976Z\"\n }\n }\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/ExportFeatureValuesSnapshotSample.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.aiplatform.v1.BigQueryDestination;import com.google.cloud.aiplatform.v1.EntityTypeName;import com.google.cloud.aiplatform.v1.ExportFeatureValuesOperationMetadata;import com.google.cloud.aiplatform.v1.ExportFeatureValuesRequest;import com.google.cloud.aiplatform.v1.ExportFeatureValuesRequest.SnapshotExport;import com.google.cloud.aiplatform.v1.ExportFeatureValuesResponse;import com.google.cloud.aiplatform.v1.FeatureSelector;import com.google.cloud.aiplatform.v1.FeatureValueDestination;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import com.google.cloud.aiplatform.v1.IdMatcher;import java.io.IOException;import java.util.Arrays;import java.util.List;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class ExportFeatureValuesSnapshotSample {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 String entityTypeId = \"YOUR_ENTITY_TYPE_ID\";\u00a0 \u00a0 String destinationTableUri = \"YOUR_DESTINATION_TABLE_URI\";\u00a0 \u00a0 List<String> featureSelectorIds = Arrays.asList(\"title\", \"genres\", \"average_rating\");\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 int timeout = 300;\u00a0 \u00a0 exportFeatureValuesSnapshotSample(\u00a0 \u00a0 \u00a0 \u00a0 project,\u00a0 \u00a0 \u00a0 \u00a0 featurestoreId,\u00a0 \u00a0 \u00a0 \u00a0 entityTypeId,\u00a0 \u00a0 \u00a0 \u00a0 destinationTableUri,\u00a0 \u00a0 \u00a0 \u00a0 featureSelectorIds,\u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 endpoint,\u00a0 \u00a0 \u00a0 \u00a0 timeout);\u00a0 }\u00a0 static void exportFeatureValuesSnapshotSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 String entityTypeId,\u00a0 \u00a0 \u00a0 String destinationTableUri,\u00a0 \u00a0 \u00a0 List<String> featureSelectorIds,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint,\u00a0 \u00a0 \u00a0 int timeout)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 FeatureSelector featureSelector =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FeatureSelector.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setIdMatcher(IdMatcher.newBuilder().addAllIds(featureSelectorIds).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 ExportFeatureValuesRequest exportFeatureValuesRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ExportFeatureValuesRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEntityType(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EntityTypeName.of(project, location, featurestoreId, entityTypeId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDestination(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FeatureValueDestination.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setBigqueryDestination(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BigQueryDestination.newBuilder().setOutputUri(destinationTableUri)))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFeatureSelector(featureSelector)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSnapshotExport(SnapshotExport.newBuilder())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<ExportFeatureValuesResponse, ExportFeatureValuesOperationMetadata>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 exportFeatureValuesFuture =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.exportFeatureValuesAsync(exportFeatureValuesRequest);\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Operation name: %s%n\", exportFeatureValuesFuture.getInitialFuture().get().getName());\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to finish...\");\u00a0 \u00a0 \u00a0 ExportFeatureValuesResponse exportFeatureValuesResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 exportFeatureValuesFuture.get(timeout, TimeUnit.SECONDS);\u00a0 \u00a0 \u00a0 System.out.println(\"Snapshot Export Feature Values Response\");\u00a0 \u00a0 \u00a0 System.out.println(exportFeatureValuesResponse);\u00a0 \u00a0 \u00a0 featurestoreServiceClient.close();\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/export-feature-values-snapshot-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const entityTypeId = 'YOUR_ENTITY_TYPE_ID';// const destinationTableUri = 'YOUR_BQ_DESTINATION_TABLE_URI';// const timestamp = <STARTING_TIMESTAMP_OF_SNAPSHOT_IN_SECONDS>;// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function exportFeatureValuesSnapshot() {\u00a0 // Configure the entityType resource\u00a0 const entityType = `projects/${project}/locations/${location}/featurestores/${featurestoreId}/entityTypes/${entityTypeId}`;\u00a0 const destination = {\u00a0 \u00a0 bigqueryDestination: {\u00a0 \u00a0 \u00a0 // # Output to BigQuery table created earlier\u00a0 \u00a0 \u00a0 outputUri: destinationTableUri,\u00a0 \u00a0 },\u00a0 };\u00a0 const featureSelector = {\u00a0 \u00a0 idMatcher: {\u00a0 \u00a0 \u00a0 ids: ['age', 'gender', 'liked_genres'],\u00a0 \u00a0 },\u00a0 };\u00a0 const snapshotExport = {\u00a0 \u00a0 startTime: {\u00a0 \u00a0 \u00a0 seconds: Number(timestamp),\u00a0 \u00a0 },\u00a0 };\u00a0 const request = {\u00a0 \u00a0 entityType: entityType,\u00a0 \u00a0 destination: destination,\u00a0 \u00a0 featureSelector: featureSelector,\u00a0 \u00a0 snapshotExport: snapshotExport,\u00a0 };\u00a0 // Export Feature Values Request\u00a0 const [operation] = await featurestoreServiceClient.exportFeatureValues(\u00a0 \u00a0 request,\u00a0 \u00a0 {timeout: Number(timeout)}\u00a0 );\u00a0 const [response] = await operation.promise();\u00a0 console.log('Export feature values snapshot response');\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}exportFeatureValuesSnapshot();\n```To learn how to install and use the Vertex AI SDK for Python, see [Use the Vertex AI SDK for Python](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) . For more information, see the [Vertex AI SDK for Python API reference documentation.](/python/docs/reference/aiplatform/latest)### Full export\nExport all feature values within a given time range.\nUse another method. You cannot export feature values from the Google Cloud console.To export feature values, send a POST request by using the [entityTypes.exportFeatureValues](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes/exportFeatureValues) method.\nThe following sample outputs a BigQuery table, but you can also output to a Cloud Storage bucket. Each output destination might have some prerequisites before you can submit a request. For example, if you specify a table name for the `bigqueryDestination` field, you must have an existing dataset. These requirements are documented in the API reference.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located. For example,`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- and: (Optional) If you specify  the start time only, returns all values between the current time (when the  request is sent) and the start time (inclusive). If you specify the end time  only, returns all values between the end time (inclusive) and the very first  value timestamp (for each feature). If you specify a start time and end  time, returns all values within the specified time range (inclusive). If you  specify neither, returns all values between the current time and the very  first value timestamp (for each feature).\n- : Name of the destination BigQuery dataset.\n- : Name of the destination BigQuery table.\n- : ID of one or more features. Specify a single`*`(asterisk) to select all features.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:exportFeatureValues\n```\nRequest JSON body:\n```\n{\n \"fullExport\": {\n \"start_time\": \"START_TIME\",\n \"end_time\": \"END_TIME\"\n },\n \"destination\" : {\n \"bigqueryDestination\": {\n  \"outputUri\": \"bq://PROJECT.DATASET_NAME.TABLE_NAME\"\n }\n },\n \"featureSelector\": {\n \"idMatcher\": {\n  \"ids\": [\"FEATURE_ID\", ...]\n }\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:exportFeatureValues\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:exportFeatureValues\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.v1.ExportFeatureValuesOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2021-12-03T22:55:25.974976Z\",\n  \"updateTime\": \"2021-12-03T22:55:25.974976Z\"\n }\n }\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/ExportFeatureValuesSample.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.aiplatform.v1.BigQueryDestination;import com.google.cloud.aiplatform.v1.EntityTypeName;import com.google.cloud.aiplatform.v1.ExportFeatureValuesOperationMetadata;import com.google.cloud.aiplatform.v1.ExportFeatureValuesRequest;import com.google.cloud.aiplatform.v1.ExportFeatureValuesRequest.FullExport;import com.google.cloud.aiplatform.v1.ExportFeatureValuesResponse;import com.google.cloud.aiplatform.v1.FeatureSelector;import com.google.cloud.aiplatform.v1.FeatureValueDestination;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import com.google.cloud.aiplatform.v1.IdMatcher;import java.io.IOException;import java.util.Arrays;import java.util.List;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class ExportFeatureValuesSample {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 String entityTypeId = \"YOUR_ENTITY_TYPE_ID\";\u00a0 \u00a0 String destinationTableUri = \"YOUR_DESTINATION_TABLE_URI\";\u00a0 \u00a0 List<String> featureSelectorIds = Arrays.asList(\"title\", \"genres\", \"average_rating\");\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 int timeout = 300;\u00a0 \u00a0 exportFeatureValuesSample(\u00a0 \u00a0 \u00a0 \u00a0 project,\u00a0 \u00a0 \u00a0 \u00a0 featurestoreId,\u00a0 \u00a0 \u00a0 \u00a0 entityTypeId,\u00a0 \u00a0 \u00a0 \u00a0 destinationTableUri,\u00a0 \u00a0 \u00a0 \u00a0 featureSelectorIds,\u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 endpoint,\u00a0 \u00a0 \u00a0 \u00a0 timeout);\u00a0 }\u00a0 static void exportFeatureValuesSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 String entityTypeId,\u00a0 \u00a0 \u00a0 String destinationTableUri,\u00a0 \u00a0 \u00a0 List<String> featureSelectorIds,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint,\u00a0 \u00a0 \u00a0 int timeout)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 FeatureSelector featureSelector =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FeatureSelector.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setIdMatcher(IdMatcher.newBuilder().addAllIds(featureSelectorIds).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 ExportFeatureValuesRequest exportFeatureValuesRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ExportFeatureValuesRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEntityType(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EntityTypeName.of(project, location, featurestoreId, entityTypeId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDestination(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FeatureValueDestination.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setBigqueryDestination(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BigQueryDestination.newBuilder().setOutputUri(destinationTableUri)))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFeatureSelector(featureSelector)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFullExport(FullExport.newBuilder())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<ExportFeatureValuesResponse, ExportFeatureValuesOperationMetadata>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 exportFeatureValuesFuture =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.exportFeatureValuesAsync(exportFeatureValuesRequest);\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Operation name: %s%n\", exportFeatureValuesFuture.getInitialFuture().get().getName());\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to finish...\");\u00a0 \u00a0 \u00a0 ExportFeatureValuesResponse exportFeatureValuesResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 exportFeatureValuesFuture.get(timeout, TimeUnit.SECONDS);\u00a0 \u00a0 \u00a0 System.out.println(\"Export Feature Values Response\");\u00a0 \u00a0 \u00a0 System.out.println(exportFeatureValuesResponse);\u00a0 \u00a0 \u00a0 featurestoreServiceClient.close();\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/export-feature-values-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const entityTypeId = 'YOUR_ENTITY_TYPE_ID';// const destinationTableUri = 'YOUR_BQ_DESTINATION_TABLE_URI';// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function exportFeatureValues() {\u00a0 // Configure the entityType resource\u00a0 const entityType = `projects/${project}/locations/${location}/featurestores/${featurestoreId}/entityTypes/${entityTypeId}`;\u00a0 const destination = {\u00a0 \u00a0 bigqueryDestination: {\u00a0 \u00a0 \u00a0 // # Output to BigQuery table created earlier\u00a0 \u00a0 \u00a0 outputUri: destinationTableUri,\u00a0 \u00a0 },\u00a0 };\u00a0 const featureSelector = {\u00a0 \u00a0 idMatcher: {\u00a0 \u00a0 \u00a0 ids: ['age', 'gender', 'liked_genres'],\u00a0 \u00a0 },\u00a0 };\u00a0 const request = {\u00a0 \u00a0 entityType: entityType,\u00a0 \u00a0 destination: destination,\u00a0 \u00a0 featureSelector: featureSelector,\u00a0 \u00a0 fullExport: {},\u00a0 };\u00a0 // Export Feature Values Request\u00a0 const [operation] = await featurestoreServiceClient.exportFeatureValues(\u00a0 \u00a0 request,\u00a0 \u00a0 {timeout: Number(timeout)}\u00a0 );\u00a0 const [response] = await operation.promise();\u00a0 console.log('Export feature values response');\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}exportFeatureValues();\n```To learn how to install and use the Vertex AI SDK for Python, see [Use the Vertex AI SDK for Python](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) . For more information, see the [Vertex AI SDK for Python API reference documentation.](/python/docs/reference/aiplatform/latest)\n## What's next\n- Learn how to [batch ingest feature values](/vertex-ai/docs/featurestore/ingesting-batch) .\n- Learn how to serve features through [onlineserving](/vertex-ai/docs/featurestore/serving-online) .\n- View the Vertex AI Feature Store (Legacy) [concurrent batch jobquota](/vertex-ai/quotas#featurestore) .\n- [Troubleshoot](/vertex-ai/docs/general/troubleshooting#feature-store) common Vertex AI Feature Store (Legacy) issues.", "guide": "Vertex AI"}