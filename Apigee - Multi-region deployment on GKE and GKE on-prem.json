{"title": "Apigee - Multi-region deployment on GKE and GKE on-prem", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Multi-region deployment on GKE and GKE on-prem\nYou are currently viewing version 1.1 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nThis topic describes a multi-region deployment for Apigee hybrid on GKE and Anthos GKE deployed on-prem.\nTopologies for multi-region deployment include the following:\n- **Active-Active** : When you have applications deployed in multiple geographic  locations and you require low latency API response  for your deployments. You have the option to deploy hybrid in multiple geographic  locations nearest to your clients. For example: US West Coast, US East Coast, Europe, APAC.\n- **Active-Passive** : When you have a primary region and a failover or disaster  recovery region.\nThe regions in a multi-region hybrid deployment communicate via Cassandra, as the following image shows:\n", "content": "## Prerequisites\nBefore configuring hybrid for multiple regions, you must complete the following prerequisites:\n- Set up Kubernetes clusters in multiple regions with differentblocks\n- Set up cross-region communication\n- Open Cassandra ports 7000 and 7001 between Kubernetes clusters across all regions (7000  may be used as a backup option during troubleshooting). See also [Configure ports](/apigee/docs/hybrid/v1.1/ports) .\nFor detailed information, see [Kubernetes](https://kubernetes.io) documentation.\n**NOTE:** Apigee recommends that you ensure that your servers' times are synchronized.Several features such as expiration and token revocation rely on accurate system times. If you host the runtime components in different datacenters, then be sure that the system times synchronized.You can use a tool such as `ntpdate` to verify that server times are synchronized.\n## Configure the multi-region seed host\nThis section describes how to expand the existing Cassandra cluster to a new region. This setup allows the new region to bootstrap the cluster and join the existing data center. Without this configuration, the multi-region Kubernetes clusters would not know about each other.\n- Run the following [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) command to identify a seed host address for Cassandra in  the current region.A allows a new regional instance to find the  original cluster on the very first startup to learn the topology of the cluster.  The seed host address is designated as the contact point in the cluster.```\nkubectl get pods -o wide -n apigee\nNAME      READY STATUS  RESTARTS AGE IP   NODE           NOMINATED NODE\napigee-cassandra-0  1/1  Running  0   5d 10.0.0.11 gke-k8s-dc-2-default-pool-a2206492-p55d\napigee-cassandra-1  1/1  Running  0   5d 10.0.2.4 gke-k8s-dc-2-default-pool-e9daaab3-tjmz\napigee-cassandra-2  1/1  Running  0   5d 10.0.3.5 gke-k8s-dc-2-default-pool-e589awq3-kjch\n```\n- Decide which of the IPs returned from the previous command will be the multi-region seed  host.\n- The configuration in this step depends on whether you are on GKE or GKE on-prem: **GKE Only: ** In data center 2, configure `cassandra.multiRegionSeedHost` and `cassandra.datacenter` in [Manage runtime plane components](/apigee/docs/hybrid/v1.1/customize-services) , where `multiRegionSeedHost` is one of the IPs returned by the previous command:```\ncassandra:\n multiRegionSeedHost: seed_host_IP\n datacenter: data_center_name\n rack: rack_name\n```For example:```\ncassandra:\n multiRegionSeedHost: 10.0.0.11\n datacenter: \"dc-2\"\n rack: \"ra-1\"\n``` **GKE on-prem Only: ** In data center 2, configure `cassandra.multiRegionSeedHost` in your overrides file, where `multiRegionSeedHost` is one of the IPs returned by the previous command:```\ncassandra:\n hostNetwork: true\n dnsPolicy: ClusterFirstWithHostNet\n multiRegionSeedHost: seed_host_IP\n```For example:```\ncassandra:\n hostNetwork: true\n dnsPolicy: ClusterFirstWithHostNet\n multiRegionSeedHost: 10.0.0.11\n```\n- In the new data center/region, before you install hybrid, set the same TLS certificates and  credentials in`overrides.yaml`as you set in the first region.NOTE: Be sure to use the same Cassandra TLS certificates and credentials in the second  data center as you provided in the original data center. The credentials you set in`overrides.yaml`in the first data center must match the ones you specify in`overrides.yaml`in the second data center. For details see [Configuring TLS for Cassandra](/apigee/docs/hybrid/v1.1/cassandra-tls) .## Set up the new region\nAfter you configure the seed host, you can set up the new region.\n**To set up the new region:**\n- Copy your certificate from the existing cluster to the new cluster. The new CA root is   used by Cassandra and other hybrid components for mTLS. Therefore, it is essential to have   consistent certificates across the cluster.- Set the context to the original namespace:```\nkubectl config use-context original-cluster-name\n```\n- Export the current namespace configuration to a file:```\n$ kubectl get namespace -o yaml > apigee-namespace.yaml\n```\n- Export the`apigee-ca`secret to a file:```\nkubectl -n cert-manager get secret apigee-ca -o yaml > apigee-ca.yaml\n```\n- Set the context to the new region's cluster name:```\nkubectl config use-context new-cluster-name\n```\n- Import the namespace configuration to the new cluster. Be sure to update the    \"namespace\" in the file if you're using a different namespace    in the new region:```\nkubectl apply -f apigee-namespace.yaml\n```\n- Import the secret to the new cluster:```\nkubectl -n cert-manager apply -f apigee-ca.yaml\n```\n- Install hybrid in the new region. Be sure that the`overrides-` `` `.yaml`file includes the same TLS certificates that are configured in the first region, as   explained in the previous section.Execute the following two commands to install hybrid in the new region:```\napigeectl init -f overrides-DC_name.yaml\n``````\napigeectl apply -f overrides-DC_name.yaml\n```\n- Expand all apigee keyspaces.The following steps expand the Cassandra data to the new data center:- Open a shell in the Cassandra pod:```\nkubectl run -i --tty --restart=Never --rm --image google/apigee-hybrid-cassandra-client:1.0.0 cqlsh\n``` **NOTE:** If you don't see a command prompt, try    pressing the ENTER key.\n- Connect to the Cassandra server:```\ncqlsh apigee-cassandra-0.apigee-cassandra.apigee.svc.cluster.local -u ddl_user --ssl\nPassword:\nConnected to apigeecluster at apigee-cassandra-0.apigee-cassandra.apigee.svc.cluster.local:9042.\n[cqlsh 5.0.1 | Cassandra 3.11.3 | CQL spec 3.4.4 | Native protocol v4]\nUse HELP for help.\n```\n- Get the available keyspaces:```\nSELECT * from system_schema.keyspaces ;\n keyspace_name    | durable_writes | replication\n----------------------------+----------------+-------------------------------------------------------------------------------------------------------    system_auth |   True | {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '1', 'dc-2': '1'}\n    system_schema |   True |            {'class': 'org.apache.cassandra.locator.LocalStrategy'}\n cache_hybrid_test_7_hybrid |   True |     {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '3'}\n kms_hybrid_test_7_hybrid |   True |     {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '3'}\n kvm_hybrid_test_7_hybrid |   True |     {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '3'}\n   system_distributed |   True | {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '1', 'dc-2': '1'}\n      system |   True |            {'class': 'org.apache.cassandra.locator.LocalStrategy'}\n      perses |   True |     {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '3'}\n quota_hybrid_test_7_hybrid |   True |     {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '3'}\n    system_traces |   True | {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '1', 'dc-2': '1'}\n(10 rows)\n```\n- Update/expand the apigee keyspaces:```\nALTER KEYSPACE cache_hybrid_test_7_hybrid WITH replication = {'class': 'NetworkTopologyStrategy', 'dc-1':3, 'dc-2':3};\nALTER KEYSPACE kms_hybrid_test_7_hybrid WITH replication = {'class': 'NetworkTopologyStrategy', 'dc-1':3, 'dc-2':3};\nALTER KEYSPACE kvm_hybrid_test_7_hybrid WITH replication = {'class': 'NetworkTopologyStrategy', 'dc-1':3, 'dc-2':3};\nALTER KEYSPACE perses WITH replication = {'class': 'NetworkTopologyStrategy', 'dc-1':3, 'dc-2':3};\nALTER KEYSPACE quota_hybrid_test_7_hybrid WITH replication = {'class': 'NetworkTopologyStrategy', 'dc-1':3, 'dc-2':3};\n```\n- Validate the keyspace expansion:```\nSELECT * from system_schema.keyspaces ;\n keyspace_name    | durable_writes | replication\n----------------------------+----------------+-------------------------------------------------------------------------------------------------------    system_auth |   True | {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '1', 'dc-2': '1'}\n    system_schema |   True |            {'class': 'org.apache.cassandra.locator.LocalStrategy'}\n cache_hybrid_test_7_hybrid |   True | {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '3', 'dc-2': '3'}\n kms_hybrid_test_7_hybrid |   True | {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '3', 'dc-2': '3'}\n kvm_hybrid_test_7_hybrid |   True | {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '3', 'dc-2': '3'}\n   system_distributed |   True | {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '1', 'dc-2': '1'}\n      system |   True |            {'class': 'org.apache.cassandra.locator.LocalStrategy'}\n      perses |   True | {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '3', 'dc-2': '3'}\n quota_hybrid_test_7_hybrid |   True | {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '3', 'dc-2': '3'}\n    system_traces |   True | {'class': 'org.apache.cassandra.locator.NetworkTopologyStrategy', 'dc-1': '1', 'dc-2': '1'}\n(10 rows)\nddl@cqlsh>\n```- Run`nodetool rebuild`sequentially on all the nodes in new data center. This may  take a few minutes to a few hours depending on the data size.```\nkubectl exec apigee-cassandra-0 -n apigee -- nodetool rebuild -- dc-1\n```\n- Verify the rebuild processes from the logs. Also, verify the data size  using the`nodetool status`command:```\nkubectl logs apigee-cassandra-0 -f -n apigee\n```The following example shows example log entries:```\nINFO \u00a001:42:24 rebuild from dc: dc-1, (All keyspaces), (All tokens)INFO \u00a001:42:24 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Executing streaming plan for RebuildINFO \u00a001:42:24 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.1.45INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.1.45INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.4.36INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 1 files(0.432KiB), sending 0 files(0.000KiB)INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.1.45 is completeINFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.4.36INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.5.22INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 1 files(0.693KiB), sending 0 files(0.000KiB)INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.4.36 is completeINFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.5.22INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 3 files(0.720KiB), sending 0 files(0.000KiB)INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.5.22 is completeINFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] All sessions completed\n```\n- Update the seed hosts. Remove`multiRegionSeedHost: 10.0.0.11`from`overrides-` `` `.yaml`and reapply.Seed hosts are local cluster members. To boot up a   new region an external seed host is required. Once a region boots up you need   to change the seed hosts back to their local clusters in`overrides.yaml`and then   reapply the configuration.```\napigeectl apply -f overrides-DC_name.yaml\n```## Check the Cassandra cluster status\nThe following command is useful to see if the cluster setup is successful in two data centers. The command checks the nodetool status for the two regions.\n```\nkubectl exec apigee-cassandra-0 -- nodetool status\nDatacenter: us-central1\n=======================\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n-- Address  Load  Tokens  Owns (effective) Host ID        Rack\nUN 10.12.1.45 112.09 KiB 256   100.0%   3c98c816-3f4d-48f0-9717-03d0c998637f ra-1\nUN 10.12.4.36 95.27 KiB 256   100.0%   0a36383d-1d9e-41e2-924c-7b62be12d6cc ra-1\nUN 10.12.5.22 88.7 KiB 256   100.0%   3561f4fa-af3d-4ea4-93b2-79ac7e938201 ra-1\nDatacenter: us-west1\n====================\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n-- Address  Load  Tokens  Owns (effective) Host ID        Rack\nUN 10.0.4.33 78.69 KiB 256   0.0%    a200217d-260b-45cd-b83c-182b27ff4c99 ra-1\nUN 10.0.0.21 78.68 KiB 256   0.0%    9f3364b9-a7a1-409c-9356-b7d1d312e52b ra-1\nUN 10.0.1.26 15.46 KiB 256   0.0%    1666df0f-702e-4c5b-8b6e-086d0f2e47fa ra-1\n```", "guide": "Apigee"}