{"title": "Apigee - Step 3: Install apigeectl", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Step 3: Install apigeectl\nYou are currently viewing version 1.3 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nThis step explains how to download and install [apigeectl](/apigee/docs/hybrid/v1.3/cli-reference) on your Anthos GKE on AWS admin machine. Steps include setting up the installation directories, creating Google Cloud service accounts that are required for hybrid components to communicate, and creating TLS credentials that are required for Apigee hybrid to operate.\n", "content": "## \n Download and install apigeectl\n`apigeectl` is the command-line interface (CLI) for installing and managing Apigee hybrid in a Kubernetes cluster.\nThe following steps describe how to get `apigeectl` :\n- Store the latest version number in a variable using the following command:```\nexport VERSION=$(curl -s \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/current-version.txt?ignoreCache=1)\n```\n- Check that the variable was populated with a version number using the following command. If  you want to use a different version, you can save that in an environment variable instead.```\necho $VERSION\n```\n- Download the release package for your operating system using the following command: **Mac 64 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_mac_64.tar.gz\n``` **Linux 64 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_linux_64.tar.gz\n``` **Mac 32 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_mac_32.tar.gz\n``` **Linux 32 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_linux_32.tar.gz\n```\n- Create a directory on your system to serve as the **base directory** for the  Apigee hybrid installation.\n- Extract the downloaded gzip file contents into the base directory you just created using the  following command:```\ntar xvzf filename.tar.gz -C path-to-base-directory\n```\n- Change directory to the base directory using the`cd`command.\n- The tar contents are, by default, expanded into a directory with the version and platform in  its name. For example: `./apigeectl_1.0.0-f7b96a8_linux_64` . Rename that directory  to `apigeectl` using the following command:```\nmv apigeectl_1.0.0-f7b96a8_linux_64 apigeectl\n```\n- Change to the directory using the following command:```\ncd ./apigeectl\n```This directory is the `apigeectl` home directory. It is where the `apigeectl` executable command is located.\n- Create an environment variable to hold this home directory path using the following command:```\nexport APIGEECTL_HOME=$PWD\n```\n- Verify that the variable holds the correct path using the following command:```\necho $APIGEECTL_HOME\n```## \n Set up the project directory structure\nThe following directory structure is a suggested approach. It separates Apigee hybrid release software from configuration files that you must create. Through the use of the `$APIGEECTL_HOME` variable and symbolic links that you create, you can easily switch to a new software version if you choose to. See also [Upgrading Apigee hybrid](/apigee/docs/hybrid/v1.3/upgrade) .\n**Note:** For the purpose of this quickstart, subsequent installation steps assume that you created the project structure as described in this section. If you follow this suggested structure, you can copy and paste most installation commands directly into your terminal.\n- Be sure you are in the base directory (the directory where the`apigeectl`directory  is located) by using the following command:```\ncd $APIGEECTL_HOME/..\n```\n- Create a new folder called`hybrid-files`using the following command. You can give  the directory any name you wish, but in the docs, the name`hybrid-files`is used  consistently. Later, you will store configuration files, service account keys, and TLS  certificates in this folder. This folder lets you keep your config files separate from the`apigeectl`software installation.```\nmkdir hybrid-files\n```\n- The current directory structure now looks like the following:```\npwd && ls\n/hybrid-base-directory\n apigeectl\n hybrid-files\n```\n- Change directory into the`hybrid-files`folder using the following command:```\ncd hybrid-files\n```\n- Inside the`hybrid-files`directory, create the following  subdirectories to organize files that you will create later:```\nmkdir overrides\nmkdir service-accounts\nmkdir certs\n```\n- Inside the`hybrid-files`directory, create the following symbolic links to`$APIGEECTL_HOME`. These links allow you to run the`apigeectl`command from inside the`hybrid-files`directory as the following example shows: **Note:** If this is not the first time you have used this process, the following symbolic links  may already exist. Check to see if the links already exist using the  following command. If the directories exist, skip this step.```\nls -l | grep ^l\n``````\nln -s $APIGEECTL_HOME/tools tools\nln -s $APIGEECTL_HOME/config config\nln -s $APIGEECTL_HOME/templates templates\nln -s $APIGEECTL_HOME/plugins plugins\n```\n- To check that the symlinks were created correctly, execute the following command and make  sure the link paths point to the correct locations:```\nls -l | grep ^l\n```## Create service accounts\nApigee hybrid uses Google Cloud [ service accounts](https://cloud.google.com/iam/docs/service-accounts) to allow hybrid components to communicate by making authorized API calls. In this step, you use an Apigee hybrid command-line tool to create a set of services accounts. The tool also downloads the service account private keys for you. You must then add these keys to your Apigee hybrid cluster configuration file.\n**Note:** To learn more about service accounts, see the following:- [About service accounts](/apigee/docs/hybrid/v1.3/sa-about) \n- [Service accounts and roles used by hybrid components](/apigee/docs/hybrid/v1.3/sa-about#recommended-sas) \nApigee provides a tool, `create-service-account` , that creates the service account, assigns the roles to the service account, and creates and downloads the key files for the service account in a single command. To learn about the related Google Cloud concepts, see [Creating and managing service accounts](https://cloud.google.com/iam/docs/creating-managing-service-accounts) and [Creating and managing service account keys](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) .\n- Be sure that you are in the`` `/hybrid-files`directory you  configured in [Set up the project directory structure](#setup-directory) .\n- Execute the following command from inside the`hybrid-files`directory. This command  creates a service account for the`apigee-metrics`component and places  the downloaded key in the`./service-accounts`directory.```\n./tools/create-service-account apigee-metrics ./service-accounts\n```When you see the following prompt, enter :```\n[INFO]: gcloud configured project ID is project_id.\n Press: y to proceed with creating service account in project: project_id\n Press: n to abort.\n```If this is the first time an SA with the exact name assigned by the tool was created, then  the tool just creates it, and you do not have to do anything further.If, however, you see the following message and prompt, enter to generate  new keys:```\n[INFO]: Service account apigee-metrics@project_id.iam.gserviceaccount.com already exists.\n...\n [INFO]: The service account might have keys associated with it. It is recommended to use existing keys.\n Press: y to generate new keys.(this does not de-activate existing keys)\n Press: n to skip generating new keys.\n```\n- Now, create the rest of the service accounts using the following commands. The`create-service-account`command  is interactive and requires a response for each account.```\n./tools/create-service-account apigee-synchronizer ./service-accounts\n``````\n./tools/create-service-account apigee-udca ./service-accounts\n``````\n./tools/create-service-account apigee-mart ./service-accounts\n``````\n./tools/create-service-account apigee-cassandra ./service-accounts\n``````\n./tools/create-service-account apigee-logger ./service-accounts\n``````\n./tools/create-service-account apigee-watcher ./service-accounts\n``` **Note:** The Cloud Pub/Sub API must be enabled in the Google Cloud project that  owns the service account for Synchronizer. See [Enable APIs](/apigee/docs/hybrid/v1.3/precog-enableapi) .\n- Verify that the service account keys were created using the following command. You are responsible for storing these  private keys securely. The key filenames are prefixed with the name of your Google Cloud project.```\nls ./service-accounts\n```The result should look something like the following:```\ngcp-project-id-apigee-cassandra.json\ngcp-project-id-apigee-logger.json\ngcp-project-id-apigee-mart.json\ngcp-project-id-apigee-metrics.json\ngcp-project-id-apigee-synchronizer.json\ngcp-project-id-apigee-udca.json\ngcp-project-id-apigee-watcher.json\n```\n- **Tip:** Apigee hybrid includes a validator that checks  your service accounts' key files and permissions when [apigeectl](/apigee/docs/hybrid/v1.3/cli-reference) applies the Apigee hybrid runtime components to your cluster. This validation is  enabled by default. For more information, see [Service account validation](/apigee/docs/hybrid/v1.3/sa-validation) .\n- Assign the Apigee Organization Admin role to the`apigee-org-admin`service accounts:\n- Verify that the email address for the`apigee-org-admin`service account follows  the pattern`` `@` `` `.iam.gserviceaccount.com`as the following example shows:```\ngcloud iam service-accounts list --filter \"apigee-org-admin\"\n```\n- Assign the role with the following command:```\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n--member serviceAccount:apigee-org-admin@$PROJECT_ID.iam.gserviceaccount.com --role roles/apigee.admin\n```Where **PROJECT_ID** is your Google Cloud project. If your service account email addresses  differ from this pattern, replace them accordingly.The output should include a list of all the service accounts and their roles, including the  following:```\n- members:\n - serviceAccount:apigee-org-admin@hybrid-example-2.iam.gserviceaccount.com\n role: roles/apigee.admin\n```## \n Create TLS certificates\nYou are required to provide TLS certificates for the runtime ingress gateway in your Apigee hybrid configuration. For the purpose of this quickstart (a non-production trial installation), the runtime gateway can accept self-signed credentials. In the following steps, [openssl](https://www.openssl.org/) is used to generate the self-signed credentials.\n**Note:** In a production environment, you will need to use signed certificates. You can either use either a certificate and key pair or a Kubernetes secret. For an example on how to obtain a TLS certificate from thecertificate authority (CA), see [Obtain TLS credentials: An example](/apigee/docs/hybrid/v1.3/lets-encrypt) .\nIn this step, you will create the TLS credential files and add them to the `` `/hybrid-files/certs` directory. In [Step 4: Configure the cluster](/apigee/docs/hybrid/v1.3/install-copy-overrides-aws-gke) ,  you will add the file paths to the cluster configuration file.\n- Be sure that you are in the`` `/hybrid-files`directory  you configured in [Set up the project directory structure](#setup-directory) .\n- Make sure your domain name is saved to the **DOMAIN** environment variable using the following command:```\necho $DOMAIN\n```\n- Execute the following command from inside the`hybrid-files`directory:```\nopenssl req -nodes -new -x509 -keyout ./certs/keystore.key -out \\\n ./certs/keystore.pem -subj '/CN='$DOMAIN'' -days 3650\n```Where **DOMAIN** is the domain you reserved for your hybrid installation in [Quickstart (hybrid) Step 5: Configure your DNS](/apigee/docs/hybrid/v1.3/precog-add-dns) .This command creates a self-signed certificate/key pair that you can use for the quickstart  installation.\n- Check to make sure the files are in the`./certs`directory using the following command:```\nls ./certs\n keystore.pem\n keystore.key\n```Where `keystore.pem` is the self-signed TLS certificate file and `keystore.key` is the key file.\nYou now have a home base from which you can configure, deploy, and manage Apigee hybrid in your Kubernetes cluster. Next, you will create a file that is used by Kubernetes to deploy the hybrid runtime components to the cluster.\n## Next step\nstepper_buttons is defined in localvars Iterate over all the buttons in the data dictionary If the button's step matches the current step in the process, make the button disabled [1](/apigee/docs/hybrid/v1.3/install-create-cluster-aws-gke) If the button's step matches the current step in the process, make the button disabled [2](/apigee/docs/hybrid/v1.3/install-download-cert-manager-istio-aws-gke) If the button's step matches the current step in the process, make the button disabled If the button's step matches the next step [3](/apigee/docs/hybrid/v1.3/install-download-install-aws-gke) If the button's step matches the current step in the process, make the button disabled In all other cases (previous buttons or future buttons (after the next one), make them links [(NEXT) Step 4: Configure the cluster](/apigee/docs/hybrid/v1.3/install-copy-overrides-aws-gke) If the button's step matches the current step in the process, make the button disabled [5](/apigee/docs/hybrid/v1.3/install-apply-hybrid-aws-gke)", "guide": "Apigee"}