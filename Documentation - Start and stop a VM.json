{"title": "Documentation - Start and stop a VM", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Start and stop a VM\nYou can stop, start, and restart VMs to support the lifecycle of your applications. For example, you might want to change the number of assigned virtual centralized processing units (vCPUs) or the amount of memory allocated to a VM. You must stop the VM before you edit the configuration. After you finish, you must cycle the power state to apply the changes. This page provides instructions to stop, start, and restart your VMs in such processes.\n", "content": "## Before you begin\nTo use `gdcloud` command-line interface (CLI) commands, ensure that you have downloaded, installed, and configured the [gdcloud CLI](/distributed-cloud/hosted/docs/latest/gdch/resources/gdcloud-overview) . All commands for Distributed Cloud Hosted use the `gdcloud` or `kubectl` CLI, and require an operating system (OS) environment.\n### Get the kubeconfig file path\nTo run commands against the org admin cluster, ensure you have the following resources:\n- Locate the org admin cluster name, or ask your Platform Administrator (PA) what the cluster name is.\n- [Sign in and generate](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/iam/sign-in#cli) the kubeconfig file for the org admin cluster if you don't have one.\n- Use the path to the kubeconfig file of the org admin cluster to replace `` in these instructions.\nIf you want to minimize your VM start up time, follow the directions in [Minimize the VM start time ](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vms/manage-vms/operations-and-lifecycle/minimize-vm-start) before you start your VM.\n## Stop a VM\nWhen you stop a virtual machine (VM), the hypervisor deallocates all resources associated with the instance. The VM is shut down.\nStop a VM that's in a running state by using the GDCH console or `kubectl` .\n- In the navigation menu, click **Virtual Machines > Instances** .\n- In the list of VMs, select the checkbox for the running VM that you want to stop.\n- Click **Stop** .\n- In the confirmation dialog, click **Stop** .\nTo stop a VM:\n```\ngdcloud compute instances stop VM_NAME --project PROJECT\n```- Replace``with the name of the VM.\n- Replace``with the name of the GDCH project in which the VM lives.\n- Run the following command:```\nkubectl --kubeconfig ORG_ADMIN_KUBECONFIG \\\u00a0 \u00a0edit virtualmachines.virtualmachine.gdc.goog VM_NAME \\\u00a0 \u00a0-n PROJECT\n```\n- Look for the field `runningState` in the `spec` of the VM and change the value of the field to `Stopped` . If `runningState` is not in the `spec` add `runningState` to the `spec` and set the value to `Stopped` .```\nspec:\u00a0 \u00a0runningState: Stopped\n```\n- Verify the status of the VM:```\nkubectl --kubeconfig ORG_ADMIN_KUBECONFIG \\\u00a0 \u00a0get virtualmachines.virtualmachine.gdc.goog VM_NAME \\\u00a0 \u00a0-n PROJECT\n```Use [these definitions for the preceding variables](None) .| Variable    | Definition    |\n|:---------------------|:-----------------------|\n| ORG_ADMIN_KUBECONFIG | The kubeconfig path. |\n| VM_NAME    | The VM's name.   |\n| PROJECT    | The VM's project name. |## Start a VM\nStart a VM from a stopped state by using the console or `kubectl` .\n- In the navigation menu, click **Virtual Machines > Instances** .\n- In the list of VMs, select the checkbox for the stopped VM that you want to start.\n- Click **Start** .\n- In the confirmation dialog, click **Start** .\nTo start a VM:\n```\ngdcloud compute instances start VM_NAME --project PROJECT\n```- Replace``with the name of the VM.\n- Replace``with the name of the GDCH project in which the VM lives.\n- Run the following command:```\nkubectl --kubeconfig ORG_ADMIN_KUBECONFIG \\ \u00a0 \u00a0edit virtualmachines.virtualmachine.gdc.goog VM_NAME \\ \u00a0 \u00a0-n PROJECT\n```\n- Look for the field `runningState` in the `spec` of the VM and change the value of the field to `Running` .```\nspec:\u00a0 \u00a0runningState: Running\n```\n- Verify the VM status:```\nkubectl --kubeconfig ORG_ADMIN_KUBECONFIG \\\u00a0 \u00a0get virtualmachines.virtualmachine.gdc.goog VM_NAME \\\u00a0 \u00a0-n PROJECT\n```Use [these definitions for the variables](None) in the example code.| Variable    | Definition       |\n|:---------------------|:-----------------------------------|\n| ORG_ADMIN_KUBECONFIG | The kubeconfig path.    |\n| CLUSTER_NAME   | The name of the org admin cluster. |\n| NAMESPACE   | The VM namespace.     |\n| VM_NAME    | The VM's name.      |\n| PROJECT    | The VM's project name.    |## Restart a VM\nWhen you restart a VM, the machine resets to its initial state and the memory contents of the machine are wiped.\nRestart a VM that is in a running state by using the console or `kubectl` .\n- In the navigation menu, click **Virtual Machines > Instances** .\n- In the list of VMs, select the checkbox for the running VM that you want to restart.\n- Click **Reset** .\n- In the confirmation dialog, click **Reset** .\nTo reset a VM:\n```\ngdcloud compute instances reset VM_NAME --project PROJECT\n```- Replace``with the name of the VM.\n- Replace``with the name of the GDCH project in which the VM lives.\n- Get the client certificate and key data, and the org admin cluster's API server. Use these values in the following steps:```\nkubectl --kubeconfig ORG_ADMIN_KUBECONFIG config view --raw -o \\\u00a0 \u00a0jsonpath='{.users[?(@.name ==\"CLUSTER_NAME-admin\")].user.client-certificate-data}' | \\\u00a0 \u00a0base64 -d > certkubectl --kubeconfig ORG_ADMIN_KUBECONFIG config view --raw -o \\\u00a0 \u00a0jsonpath='{.users[?(@.name == \"CLUSTER_NAME-admin\")].user.client-key-data}' | \\\u00a0 \u00a0base64 -d > keyexport APISERVER=`kubectl --kubeconfig ORG_ADMIN_KUBECONFIG \\\u00a0 \u00a0config view --raw -o \\\u00a0 \u00a0jsonpath='{.clusters[?(@.name == \"CLUSTER_NAME\")].cluster.server}'`\n```\n- Make an API request to restart the VM using the `wget` command and specify the certificate and key from the previous step:* pragma: { seclinter_this_is_fine: true } *```\nwget --method=PUT -O- --no-check-certificate --certificate cert --private-key key --content-on-error=on $APISERVER/apis/virtualmachineoperations.gdc.goog/v1/namespaces/PROJECT/virtualmachines/VM_NAME/restart\n```* pragma: { seclinter_this_is_fine: false } *\n- Verify the VM status:```\nkubectl --kubeconfig ORG_ADMIN_KUBECONFIG \\\u00a0 \u00a0get virtualmachines.virtualmachine.gdc.goog VM_NAME -n PROJECT\n```Use [these definitions for the variables](None) in the example code.| Variable    | Definition       |\n|:---------------------|:-----------------------------------|\n| ORG_ADMIN_KUBECONFIG | The kubeconfig path.    |\n| CLUSTER_NAME   | The name of the org admin cluster. |\n| NAMESPACE   | The VM namespace.     |\n| VM_NAME    | The VM's name.      |\n| PROJECT    | The VM's project name.    |", "guide": "Documentation"}