{"title": "Documentation - Import and export keys", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Import and export keys\nThis page covers instructions for the Application Operator (AO) to perform key import operations from exported key management systems (KMS) keys. The AO performs the import and export operations using the `kubectl` command line interface (CLI) from the following resources:\n- [KeyImport](/distributed-cloud/hosted/docs/latest/gdch/apis/kms-krm-api#keyimport) \n- [KeyExport](/distributed-cloud/hosted/docs/latest/gdch/apis/kms-krm-api#keyexport) \nTo view more details on these resources, see the [KMS API overview](/distributed-cloud/hosted/docs/latest/gdch/apis/kms-api-overview) .\nRefer to the [Supported keys](https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/kms/kms#supported-keys) section in the page to view the full list and details of KMS supported keys.\n", "content": "## Before you begin\nBefore continuing, ensure you have the following:\n- The `kubectl` command configured to access the org admin cluster. To do this, follow the sections [Get a kubeconfig file](/distributed-cloud/hosted/docs/latest/gdch/resources/gdcloud-auth#get-kubeconfig) and [gdcloud command-line interface (CLI)](/distributed-cloud/hosted/docs/latest/gdch/resources/gdcloud-overview) .\n- The KMS Key Import Admin and KMS Key Export Admin roles. To get the permissions that you need to import an exported key, ask your Platform Administrator (PA) to grant you the KMS Key Import Admin ( `kms-keyimport-admin` ) and the KMS Key Export Admin ( `kms-keyexport-admin` ) roles.## Import an exported key\nTo import an exported key, complete the following steps:\n- Create a YAML file, and add in the `KeyImport` resource as the value of the `kind` object:```\napiVersion: \"kms.gdc.goog/v1\"kind: KeyImportmetadata:\u00a0 name: KEY_IMPORT_NAME\u00a0 namespace: PROJECTspec:\u00a0 context:\u00a0 \u00a0 mechanism: MECHANISM\n```Replace the following variables:- : the name of the`KeyImport`resource \u2014 for example:`key-import-test`.\n- : the name of the project namespace \u2014 for example:`kms-test1`.\n- : the key sharing mechanism of the key \u2014 for example: `EDCH_P521_AES256` .\n- Apply the contents of the YAML file to the KMS and create the `KeyImport` resource:```\nkubectl apply -f FILENAME.yaml\n```Replace with the name of the YAML file.With the public key of an internally generated key pair, the KMS updates the status of the `KeyImport` resource to `AwaitingKeyToImport` . To continue, you need to view the status of the resource and obtain the KMS generated public key.\n- To view the status of `KeyImport` resource and obtain the KMS generated public key, run the following:```\nkubectl describe keyimport KEY_IMPORT_NAME --namespace PROJECT\n```Replace the following variables:- : the`KeyImport`resource name \u2014 for example,`key-import-test`.\n- : the name of the project namespace \u2014 for example:`kms-test1`.\nAfter running the command, you see output similar to the following:```\n...\nStatus:\n Conditions:\n Last Transition Time: 2022-12-14T20:43:50Z\n Message:    waiting for user to provide KeyToImport\n Observed Generation: 1\n Reason:    AwaitingKeyToImport\n Status:    False\n Type:     Ready\n Imported Key Ref:\n Kind: KeyImport\n Name: key-import-test\n Peer Context:\n Private Key:\n Public Key: PUBLIC_KEY\nEvents:   <none>\n```The value represents the KMS generated public key. Copy the public key, and add it to the `KeyExport` resource in the following step.\n- Create another YAML file, add in the `KeyExport` resource as the value of the `kind` object, and the following contents:```\napiVersion: \"kms.gdc.goog/v1\"kind: KeyExportmetadata:\u00a0 name: KEY_EXPORT_NAME\u00a0 namespace: PROJECTspec:\u00a0 context:\u00a0 \u00a0 mechanism: MECHANISM\u00a0 \u00a0 publicKey: PUBLIC_KEY\u00a0 keyToExport:\u00a0 \u00a0 kind: KEY_PRIMITIVE\u00a0 \u00a0 name: KEY_NAME\n```Replace the following variables:- : the name of the`KeyExport`resource \u2014 for example:`key-export-test`.\n- : the name of the project namespace \u2014 for example: `kms-test1` . **Important:** The `KeyExport` custom resource definition (CRD) must reside in the same project namespace of the imported key. If the imported key resides in the project namespace `kms-test1` , the `KeyExport` CRD must also reside in the same project namespace.\n- : the key sharing mechanism of the key \u2014 for example: `EDCH_P521_AES256` .\n- : the public key from `keyImport.Status.PeerContext.PublicKey` .\n- : the CRD of the key\u2014for example, aeadkey and signingkey.\n- : the name of the key\u2014for example, `key-1` .\n- Apply the contents of the YAML file to the KMS and create the `KeyExport` resource:```\nkubectl apply -f FILENAME.yaml\n```Replace with the name of the YAML file.After running the command, the KMS updates the status of the `KeyExport` resource and generates an exported key. To obtain the exported key, view the resource's status.\n- To view the resource's status, run the following:```\nkubectl describe keyexport KEY_EXPORT_NAME --namespace PROJECT\n```Replace the following variables:- : the name of the`KeyExport`resource \u2014 for example,`key-export-test`.\n- : the name of the project namespace\u2014for example:`kms-test1`.\nAfter running the command, you see an output similar to the following:```\n...\nStatus:\nConditions:\nLast Transition Time: 2022-12-14T20:45:57Z\nMessage:    key successfully exported\nObserved Generation: 1\nReason:    KeyExportCompleted\nStatus:    True\nType:     Ready\nExported Key: EXPORTED_KEY\n``` represents the metadata of the exported key. Copy the contents in to continue to the following step.\n- Edit the YAML file that contains the `KeyImport` resource, and add in the contents you copied from the output in `keyexport.status.exportedkey` .```\napiVersion: \"kms.gdc.goog/v1\"kind: KeyImportmetadata:\u00a0 name: key-import-test\u00a0 namespace: kms-test1spec:\u00a0 context:\u00a0 \u00a0 mechanism: EDCH_P521_AES256\u00a0 keyToImport: EXPORTED_KEY\n```\n- After editing the YAML file, apply the contents to the KMS:```\nkubectl apply -f FILENAME.yaml\n```After running the command, the KMS imports the exported key you provided.\n- To view details on the imported key, run the following:```\nkubectl get keyimport KEY_IMPORT_NAME\n```You see output similar to the following:```\nNAMESPACE NAME    AGE READY REASON    KEY KIND\nkms-test1 KEY_IMPORT_NAME 60s True KeyImportCompleted KEY_PRIMITIVE\n``` represents the kind of key you imported, between the AEAD and Signing keys.", "guide": "Documentation"}