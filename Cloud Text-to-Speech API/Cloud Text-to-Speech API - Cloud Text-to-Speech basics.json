{"title": "Cloud Text-to-Speech API - Cloud Text-to-Speech basics", "url": "https://cloud.google.com/text-to-speech/docs/basics", "abstract": "# Cloud Text-to-Speech API - Cloud Text-to-Speech basics\nText-to-Speech allows developers to create natural-sounding, synthetic human speech as playable audio. You can use the audio data files you create using Text-to-Speech to power your applications or augment media like videos or audio recordings (in compliance with the [Google Cloud Platform Terms of Service](/terms) including compliance with all applicable law).\nText-to-Speech converts text or Speech Synthesis Markup Language (SSML) input into audio data like MP3 or LINEAR16 (the encoding used in WAV files).\nThis document is a guide to the fundamental concepts of using Text-to-Speech. Before diving into the API itself, review the [quickstarts](/text-to-speech/docs/quickstarts) .\n", "content": "## Basic example\nText-to-Speech is ideal for any application that plays audio of human speech to users. It allows you to convert arbitrary strings, words, and sentences into the sound of a person speaking the same things.\nImagine that you have a voice assistant app that provides natural language feedback to your users as playable audio files. Your app might take an action and then provide human speech as feedback to the user.\nFor example, your app may want to report that it successfully added an event to the user's calendar. Your app constructs a response string to report the success to the user, something like \"I've added the event to your calendar.\"\nWith Text-to-Speech, you can convert that response string to actual human speech to play back to the user, similar to the example provided below.\nTo create an audio file like example 1, you send a request to Text-to-Speech like the following code snippet.\n**Note:** The following sample uses the `gcloud auth print-access-token` command to retrieve an access token for the request. Before you run the sample, you must [install and initialize the Google Cloud CLI](/sdk/docs/install) . Replace `` with your project ID.\n```\ncurl -H \"Authorization: Bearer \"$(gcloud auth print-access-token) -H \"x-goog-user-project: <var>PROJECT_ID</var>\" -H \"Content-Type: application/json; charset=utf-8\" --data \"{\u00a0 'input':{\u00a0 \u00a0 'text':'I\\'ve added the event to your calendar.'\u00a0 },\u00a0 'voice':{\u00a0 \u00a0 'languageCode':'en-gb',\u00a0 \u00a0 'name':'en-GB-Standard-A',\u00a0 \u00a0 'ssmlGender':'FEMALE'\u00a0 },\u00a0 'audioConfig':{\u00a0 \u00a0 'audioEncoding':'MP3'\u00a0 }}\" \"https://texttospeech.googleapis.com/v1/text:synthesize\"\n```\n## Speech synthesis\nThe process of translating text input into audio data is called and the output of synthesis is called . Text-to-Speech takes two types of input: raw text or SSML-formatted data (discussed below). To create a new audio file, you call the [synthesize](/text-to-speech/docs/reference/rest/v1/text/synthesize) endpoint of the API.\nThe speech synthesis process generates raw audio data as a base64-encoded string. You must decode the base64-encoded string into an audio file before an application can play it. Most platforms and operating systems have tools for decoding base64 text into playable media files.\n**Note:** You must decode the base64 string returned from Text-to-Speech before you can play it. For more information about how to decode base64 data, see [Decoding Base64-Encoded Audio Content](/text-to-speech/docs/base64-decoding)\nTo learn more about synthesis, review the [quickstarts](/text-to-speech/docs/quickstarts) or the [Creating Voice Audio Files](/text-to-speech/docs/create-audio) page.\n## Voices\nText-to-Speech creates raw audio data of natural, human speech. That is, it creates audio that sounds like a person talking. When you send a synthesis request to Text-to-Speech, you must specify a that 'speaks' the words.\nText-to-Speech has a wide selection of custom voices available for you to use. The voices differ by language, gender, and accent (for some languages). For example, you can create audio that mimics the sound of a female English speaker with a British accent like example 1, above. You can also convert the same text into a different voice, say a male English speaker with an Australian accent.\nTo see the complete list of the available voices, see [Supported Voices](/text-to-speech/docs/voices) .\n### WaveNet voices\nAlong with other, traditional synthetic voices, Text-to-Speech also provides premium, WaveNet-generated voices. Users find the Wavenet-generated voices to be more warm and human-like than other synthetic voices.\nThe key difference to a WaveNet voice is the used to generate the voice. WaveNet models have been trained using raw audio samples of actual humans speaking. As a result, these models generate synthetic speech with more human-like emphasis and inflection on syllables, phonemes, and words.\nCompare the following two samples of synthetic speech.\nTo learn more about the benefits of WaveNet-generated voices, see [Types of voices](/text-to-speech/docs/voice-types) .\n## Other audio output settings\nBesides the voice, you can also configure other aspects of the audio data output created by speech synthesis. Text-to-Speech supports configuring the speaking rate, pitch, volume, and sample rate hertz.\nReview the [AudioConfig reference](/text-to-speech/docs/reference/rest/v1/text/synthesize#audioconfig) for more information.\n## Speech Synthesis Markup Language (SSML) support\nYou can enhance the synthetic speech produced by Text-to-Speech by marking up the text using . SSML enables you to insert pauses, acronym pronunciations, or other additional details into the audio data created by Text-to-Speech. Text-to-Speech supports a [subset of the available SSML elements](/text-to-speech/docs/ssml) .\n**Note:** Text-to-Speech does not support all SSML elements for all available languages.\nFor example, you can ensure that the synthetic speech correctly pronounces ordinal numbers by providing Text-to-Speech with SSML input that marks ordinal numbers as such.\nTo learn more about how to synthesize speech from SSML, see [Creating Voice Audio Files](/text-to-speech/docs/create-audio#ssml)", "guide": "Cloud Text-to-Speech API"}