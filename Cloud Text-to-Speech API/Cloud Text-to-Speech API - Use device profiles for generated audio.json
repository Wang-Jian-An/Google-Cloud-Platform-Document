{"title": "Cloud Text-to-Speech API - Use device profiles for generated audio", "url": "https://cloud.google.com/text-to-speech/docs/audio-profiles", "abstract": "# Cloud Text-to-Speech API - Use device profiles for generated audio\nThis page describes how to select a device profile for audio created by Text-to-Speech.\nYou can optimize the [synthetic speech](/text-to-speech/docs/basics#speech_synthesis) produced by Text-to-Speech for playback on different types of hardware. For example, if your app runs primarily on smaller, 'wearable' types of devices, you can create synthetic speech from Text-to-Speech API that is optimized specifically for smaller speakers.\nYou can also apply multiple device profiles to the same synthetic speech. The Text-to-Speech API applies device profiles to the audio in the order provided in the request to the [text:synthesize](/text-to-speech/docs/reference/rest/v1/text/synthesize) endpoint. Avoid specifying the same profile more than once, as you can have undesirable results by applying the same profile multiple times.\nUse of audio profiles is optional. If you choose to use one (or more), Text-to-Speech applies the profile(s) to your post-synthesized speech results. If you choose not to use an audio profile, you will receive your speech results without any post-synthesis modifications.\nTo hear the difference between audio generated from different profiles, compare the two clips below.\nNote: Each audio profile has been optimized for a specific device by adjusting a range of audio effects. However, the make and model of the device used to tune the profile may not match users' playback devices exactly. You may need to experiment with different profiles to find the best sound output for your application.\n", "content": "## Available audio profiles\nThe following table gives the IDs and examples of the device profiles available for use by the Text-to-Speech API.\n| Audio profile ID      | Optimized for              |\n|:--------------------------------------|:---------------------------------------------------------------------|\n| wearable-class-device     | Smart watches and other wearables, like Apple Watch, Wear OS watch |\n| handset-class-device     | Smartphones, like Google Pixel, Samsung Galaxy, Apple iPhone   |\n| headphone-class-device    | Earbuds or headphones for audio playback, like Sennheiser headphones |\n| small-bluetooth-speaker-class-device | Small home speakers, like Google Home Mini       |\n| medium-bluetooth-speaker-class-device | Smart home speakers, like Google Home        |\n| large-home-entertainment-class-device | Home entertainment systems or smart TVs, like Google Home Max, LG TV |\n| large-automotive-class-device   | Car speakers               |\n| telephony-class-application   | Interactive Voice Response (IVR) systems        |\n## Specify an audio profile to use\nTo specify an audio profile to use, set the [effectsProfileId](/text-to-speech/docs/reference/rest/v1/text/synthesize#audioconfig) field for the speech synthesis request.\nTo generate an audio file, make a `POST` request and provide the appropriate request body. The following shows an example of a `POST` request using `curl` . The example uses the Google Cloud CLI to retrieve an access token for the request. For instructions on installing the gcloud CLI, see [Authenticate to Text-to-Speech](/text-to-speech/docs/authentication) .\nThe following example shows how to send a request to the [text:synthesize](/text-to-speech/docs/reference/rest/v1/text/synthesize) endpoint.\n```\ncurl \\\u00a0 -H \"Authorization: Bearer \"$(gcloud auth print-access-token) \\\u00a0 -H \"Content-Type: application/json; charset=utf-8\" \\\u00a0 --data \"{\u00a0 \u00a0 'input':{\u00a0 \u00a0 \u00a0 'text':'This is a sentence that helps test how audio profiles can change the way Cloud Text-to-Speech sounds.'\u00a0 \u00a0 },\u00a0 \u00a0 'voice':{\u00a0 \u00a0 \u00a0 'languageCode':'en-us',\u00a0 \u00a0 },\u00a0 \u00a0 'audioConfig':{\u00a0 \u00a0 \u00a0 'audioEncoding':'LINEAR16',\u00a0 \u00a0 \u00a0 'effectsProfileId': ['telephony-class-application']\u00a0 \u00a0 }\u00a0 }\" \"https://texttospeech.googleapis.com/v1beta1/text:synthesize\" > audio-profile.txt\n```\nIf the request is successful, the Text-to-Speech API returns the synthesized audio as base64-encoded data contained in the JSON output. The JSON output in the `audio-profiles.txt` file looks like the following:\n```\n{\u00a0 \"audioContent\": \"//NExAASCCIIAAhEAGAAEMW4kAYPnwwIKw/BBTpwTvB+IAxIfghUfW..\"}\n```\nTo decode the results from the Cloud Text-to-Speech API as an MP3 audio file, run the following command from the same directory as the `audio-profiles.txt` file.\n```\nsed 's|audioContent| |' < audio-profile.txt > tmp-output.txt && \\\ntr -d '\\n \":{}' < tmp-output.txt > tmp-output-2.txt && \\\nbase64 tmp-output-2.txt --decode > audio-profile.wav && \\\nrm tmp-output*.txt\n```To learn how to install and use the client library for Text-to-Speech, see [Text-to-Speech client libraries](/text-to-speech/docs/libraries) .       For more information, see the [Text-to-Speech Go API reference documentation](/go/docs/reference/cloud.google.com/go/texttospeech/latest/apiv1) .\nTo authenticate to Text-to-Speech, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/texttospeech/synthesize_speech/audio_profile.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"io/ioutil\"\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 texttospeech \"cloud.google.com/go/texttospeech/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/texttospeech/apiv1/texttospeechpb\")// audioProfile generates audio from text using a custom synthesizer like a telephone call.func audioProfile(w io.Writer, text string, outputFile string) error {\u00a0 \u00a0 \u00a0 \u00a0 // text := \"hello\"\u00a0 \u00a0 \u00a0 \u00a0 // outputFile := \"out.mp3\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := texttospeech.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &texttospeechpb.SynthesizeSpeechRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input: &texttospeechpb.SynthesisInput{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputSource: &texttospeechpb.SynthesisInput_Text{Text: text},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Voice: &texttospeechpb.VoiceSelectionParams{LanguageCode: \"en-US\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioConfig: &texttospeechpb.AudioConfig{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioEncoding: \u00a0 \u00a0texttospeechpb.AudioEncoding_MP3,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EffectsProfileId: []string{\"telephony-class-application\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := client.SynthesizeSpeech(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"SynthesizeSpeech: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 if err = ioutil.WriteFile(outputFile, resp.AudioContent, 0644); err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Audio content written to file: %v\\n\", outputFile)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Text-to-Speech, see [Text-to-Speech client libraries](/text-to-speech/docs/libraries) .       For more information, see the [Text-to-Speech Java API reference documentation](/java/docs/reference/google-cloud-texttospeech/latest/overview) .\nTo authenticate to Text-to-Speech, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/texttospeech/snippets/src/main/java/com/example/texttospeech/SynthesizeTextBeta.java) \n```\n/**\u00a0* Demonstrates using the Text to Speech client with audio profiles to synthesize text or ssml\u00a0*\u00a0* @param text the raw text to be synthesized. (e.g., \"Hello there!\")\u00a0* @param effectsProfile audio profile to be used for synthesis. (e.g.,\u00a0* \u00a0 \u00a0 \"telephony-class-application\")\u00a0* @throws Exception on TextToSpeechClient Errors.\u00a0*/public static void synthesizeTextWithAudioProfile(String text, String effectsProfile)\u00a0 \u00a0 throws Exception {\u00a0 // Instantiates a client\u00a0 try (TextToSpeechClient textToSpeechClient = TextToSpeechClient.create()) {\u00a0 \u00a0 // Set the text input to be synthesized\u00a0 \u00a0 SynthesisInput input = SynthesisInput.newBuilder().setText(text).build();\u00a0 \u00a0 // Build the voice request\u00a0 \u00a0 VoiceSelectionParams voice =\u00a0 \u00a0 \u00a0 \u00a0 VoiceSelectionParams.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setLanguageCode(\"en-US\") // languageCode = \"en_us\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSsmlGender(SsmlVoiceGender.FEMALE) // ssmlVoiceGender = SsmlVoiceGender.FEMALE\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // Select the type of audio file you want returned and the audio profile\u00a0 \u00a0 AudioConfig audioConfig =\u00a0 \u00a0 \u00a0 \u00a0 AudioConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioEncoding(AudioEncoding.MP3) // MP3 audio.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addEffectsProfileId(effectsProfile) // audio profile\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // Perform the text-to-speech request\u00a0 \u00a0 SynthesizeSpeechResponse response =\u00a0 \u00a0 \u00a0 \u00a0 textToSpeechClient.synthesizeSpeech(input, voice, audioConfig);\u00a0 \u00a0 // Get the audio contents from the response\u00a0 \u00a0 ByteString audioContents = response.getAudioContent();\u00a0 \u00a0 // Write the response to the output file.\u00a0 \u00a0 try (OutputStream out = new FileOutputStream(\"output.mp3\")) {\u00a0 \u00a0 \u00a0 out.write(audioContents.toByteArray());\u00a0 \u00a0 \u00a0 System.out.println(\"Audio content written to file \\\"output.mp3\\\"\");\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for Text-to-Speech, see [Text-to-Speech client libraries](/text-to-speech/docs/libraries) .       For more information, see the [Text-to-Speech Node.js API reference documentation](/nodejs/docs/reference/text-to-speech/latest) .\nTo authenticate to Text-to-Speech, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/texttospeech/audioProfile.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const text = 'Text you want to vocalize';// const outputFile = 'YOUR_OUTPUT_FILE_LOCAtION;// const languageCode = 'LANGUAGE_CODE_FOR_OUTPUT';// const ssmlGender = 'SSML_GENDER_OF_SPEAKER';// Imports the Google Cloud client libraryconst speech = require('@google-cloud/text-to-speech');const fs = require('fs');const util = require('util');// Creates a clientconst client = new speech.TextToSpeechClient();async function synthesizeWithEffectsProfile() {\u00a0 // Add one or more effects profiles to array.\u00a0 // Refer to documentation for more details:\u00a0 // https://cloud.google.com/text-to-speech/docs/audio-profiles\u00a0 const effectsProfileId = ['telephony-class-application'];\u00a0 const request = {\u00a0 \u00a0 input: {text: text},\u00a0 \u00a0 voice: {languageCode: languageCode, ssmlGender: ssmlGender},\u00a0 \u00a0 audioConfig: {audioEncoding: 'MP3', effectsProfileId: effectsProfileId},\u00a0 };\u00a0 const [response] = await client.synthesizeSpeech(request);\u00a0 const writeFile = util.promisify(fs.writeFile);\u00a0 await writeFile(outputFile, response.audioContent, 'binary');\u00a0 console.log(`Audio content written to file: ${outputFile}`);}\n```To learn how to install and use the client library for Text-to-Speech, see [Text-to-Speech client libraries](/text-to-speech/docs/libraries) .       For more information, see the [Text-to-Speech Python API reference documentation](/python/docs/reference/texttospeech/latest) .\nTo authenticate to Text-to-Speech, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/texttospeech/snippets/audio_profile.py) \n```\ndef synthesize_text_with_audio_profile(text, output, effects_profile_id):\u00a0 \u00a0 \"\"\"Synthesizes speech from the input string of text.\"\"\"\u00a0 \u00a0 from google.cloud import texttospeech\u00a0 \u00a0 client = texttospeech.TextToSpeechClient()\u00a0 \u00a0 input_text = texttospeech.SynthesisInput(text=text)\u00a0 \u00a0 # Note: the voice can also be specified by name.\u00a0 \u00a0 # Names of voices can be retrieved with client.list_voices().\u00a0 \u00a0 voice = texttospeech.VoiceSelectionParams(language_code=\"en-US\")\u00a0 \u00a0 # Note: you can pass in multiple effects_profile_id. They will be applied\u00a0 \u00a0 # in the same order they are provided.\u00a0 \u00a0 audio_config = texttospeech.AudioConfig(\u00a0 \u00a0 \u00a0 \u00a0 audio_encoding=texttospeech.AudioEncoding.MP3,\u00a0 \u00a0 \u00a0 \u00a0 effects_profile_id=[effects_profile_id],\u00a0 \u00a0 )\u00a0 \u00a0 response = client.synthesize_speech(\u00a0 \u00a0 \u00a0 \u00a0 input=input_text, voice=voice, audio_config=audio_config\u00a0 \u00a0 )\u00a0 \u00a0 # The response's audio_content is binary.\u00a0 \u00a0 with open(output, \"wb\") as out:\u00a0 \u00a0 \u00a0 \u00a0 out.write(response.audio_content)\u00a0 \u00a0 \u00a0 \u00a0 print('Audio content written to file \"%s\"' % output)\n```No preface\n **C#** : Please follow the [C# setup instructions](/text-to-speech/docs/libraries) on the client libraries page  and then visit the [Text-to-Speech reference documentation for .NET.](https://googleapis.github.io/google-cloud-dotnet/docs/Google.Cloud.TextToSpeech.V1/index.html) \n **PHP** : Please follow the [PHP setup instructions](/text-to-speech/docs/libraries) on the client libraries page  and then visit the [Text-to-Speech reference documentation for PHP.](/php/docs/reference/cloud-text-to-speech/latest) \n **Ruby** : Please follow the [Ruby setup instructions](/text-to-speech/docs/libraries) on the client libraries page  and then visit the [Text-to-Speech reference documentation for Ruby.](https://googleapis.dev/ruby/google-cloud-text_to_speech/latest/Google/Cloud/TextToSpeech/V1.html)", "guide": "Cloud Text-to-Speech API"}