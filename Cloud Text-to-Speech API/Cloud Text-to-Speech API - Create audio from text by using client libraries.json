{"title": "Cloud Text-to-Speech API - Create audio from text by using client libraries", "url": "https://cloud.google.com/text-to-speech/docs/create-audio-text-client-libraries", "abstract": "# Cloud Text-to-Speech API - Create audio from text by using client libraries\n# Create audio from text by using client libraries\nThis quickstart walks you through the process of using client libraries to make a request to Text-to-Speech, creating audio from text.\nTo learn more about the fundamental concepts in Text-to-Speech, read [Text-to-Speech Basics](/text-to-speech/docs/basics) . To see which synthetic voices are available for your language, see the [supported voices and languages page](/text-to-speech/docs/voices) .", "content": "## Before you beginBefore you can send a request to the Text-to-Speech API, you must have completed the following actions. See the [before you begin](/text-to-speech/docs/before-you-begin) page for details.- Enable Text-to-Speech on a Google Cloud project.\n- Make sure billing is enabled for Text-to-Speech.\n- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\n## Install the client library```\ngo get cloud.google.com/go/texttospeech/apiv1\n```If you are using [Maven](https://maven.apache.org/) , add the following to your `pom.xml` file. For more information about BOMs, see [The Google Cloud Platform Libraries BOM](https://cloud.google.com/java/docs/bom) .\n```\n<dependencyManagement>\u00a0 <dependencies>\u00a0 \u00a0 <dependency>\u00a0 \u00a0 \u00a0 <groupId>com.google.cloud</groupId>\u00a0 \u00a0 \u00a0 <artifactId>libraries-bom</artifactId>\u00a0 \u00a0 \u00a0 <version>26.34.0</version>\u00a0 \u00a0 \u00a0 <type>pom</type>\u00a0 \u00a0 \u00a0 <scope>import</scope>\u00a0 \u00a0 </dependency>\u00a0 </dependencies></dependencyManagement><dependencies>\u00a0 <dependency>\u00a0 \u00a0 <groupId>com.google.cloud</groupId>\u00a0 \u00a0 <artifactId>google-cloud-texttospeech</artifactId>\u00a0 </dependency>\n```\nIf you are using [Gradle](https://gradle.org/) , add the following to your dependencies:\n```\nimplementation 'com.google.cloud:google-cloud-texttospeech:2.38.0'\n```\nIf you are using [sbt](https://www.scala-sbt.org/) , add the following to your dependencies:\n```\nlibraryDependencies += \"com.google.cloud\" % \"google-cloud-texttospeech\" % \"2.38.0\"\n```\nIf you're using Visual Studio Code, IntelliJ, or Eclipse, you can add client libraries to your project using the following IDE plugins:- [Cloud Code for VS Code](/code/docs/vscode/client-libraries) \n- [Cloud Code for IntelliJ](/code/docs/intellij/client-libraries) \n- [Cloud Tools for Eclipse](/eclipse/docs/libraries) \nThe plugins provide additional functionality, such as key management for service accounts. Refer to each plugin's documentation for details.\n **Note:** Cloud Java client libraries do not currently support Android.Before installing the library, make sure you've [prepared your environment for Node.js development](/nodejs/docs/setup) .\n```\nnpm install --save @google-cloud/text-to-speech\n```Before installing the library, make sure you've [prepared your environment for Python development](/python/docs/setup) .\n```\npip install --upgrade google-cloud-texttospeech\n```No preface\n **C#** : Please follow the [C# setup instructions](/text-to-speech/docs/libraries) on the client libraries page  and then visit the [Text-to-Speech reference documentation for .NET.](https://googleapis.github.io/google-cloud-dotnet/docs/Google.Cloud.TextToSpeech.V1/index.html) \n **PHP** : Please follow the [PHP setup instructions](/text-to-speech/docs/libraries) on the client libraries page  and then visit the [Text-to-Speech reference documentation for PHP.](/php/docs/reference/cloud-text-to-speech/latest) \n **Ruby** : Please follow the [Ruby setup instructions](/text-to-speech/docs/libraries) on the client libraries page  and then visit the [Text-to-Speech reference documentation for Ruby.](https://googleapis.dev/ruby/google-cloud-text_to_speech/latest/Google/Cloud/TextToSpeech/V1.html) \n## Create audio dataNow you can use Text-to-Speech to create an audio file of synthetic human speech. Use the following code to send a [synthesize](/text-to-speech/docs/reference/rest/v1beta1/text/synthesize) request to the Text-to-Speech API. [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/texttospeech/quickstart/quickstart.go) \n```\n// Command quickstart generates an audio file with the content \"Hello, World!\".package mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io/ioutil\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 texttospeech \"cloud.google.com/go/texttospeech/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/texttospeech/apiv1/texttospeechpb\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 // Instantiates a client.\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := texttospeech.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 // Perform the text-to-speech request on the text input with the selected\u00a0 \u00a0 \u00a0 \u00a0 // voice parameters and audio file type.\u00a0 \u00a0 \u00a0 \u00a0 req := texttospeechpb.SynthesizeSpeechRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set the text input to be synthesized.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input: &texttospeechpb.SynthesisInput{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputSource: &texttospeechpb.SynthesisInput_Text{Text: \"Hello, World!\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Build the voice request, select the language code (\"en-US\") and the SSML\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // voice gender (\"neutral\").\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Voice: &texttospeechpb.VoiceSelectionParams{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 LanguageCode: \"en-US\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SsmlGender: \u00a0 texttospeechpb.SsmlVoiceGender_NEUTRAL,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Select the type of audio file you want returned.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioConfig: &texttospeechpb.AudioConfig{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioEncoding: texttospeechpb.AudioEncoding_MP3,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := client.SynthesizeSpeech(ctx, &req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // The resp's AudioContent is binary.\u00a0 \u00a0 \u00a0 \u00a0 filename := \"output.mp3\"\u00a0 \u00a0 \u00a0 \u00a0 err = ioutil.WriteFile(filename, resp.AudioContent, 0644)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"Audio content written to file: %v\\n\", filename)}\n``` [  texttospeech/snippets/src/main/java/com/example/texttospeech/QuickstartSample.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/texttospeech/snippets/src/main/java/com/example/texttospeech/QuickstartSample.java) [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/texttospeech/snippets/src/main/java/com/example/texttospeech/QuickstartSample.java) \n```\n// Imports the Google Cloud client libraryimport com.google.cloud.texttospeech.v1.AudioConfig;import com.google.cloud.texttospeech.v1.AudioEncoding;import com.google.cloud.texttospeech.v1.SsmlVoiceGender;import com.google.cloud.texttospeech.v1.SynthesisInput;import com.google.cloud.texttospeech.v1.SynthesizeSpeechResponse;import com.google.cloud.texttospeech.v1.TextToSpeechClient;import com.google.cloud.texttospeech.v1.VoiceSelectionParams;import com.google.protobuf.ByteString;import java.io.FileOutputStream;import java.io.OutputStream;/**\u00a0* Google Cloud TextToSpeech API sample application. Example usage: mvn package exec:java\u00a0* -Dexec.mainClass='com.example.texttospeech.QuickstartSample'\u00a0*/public class QuickstartSample {\u00a0 /** Demonstrates using the Text-to-Speech API. */\u00a0 public static void main(String... args) throws Exception {\u00a0 \u00a0 // Instantiates a client\u00a0 \u00a0 try (TextToSpeechClient textToSpeechClient = TextToSpeechClient.create()) {\u00a0 \u00a0 \u00a0 // Set the text input to be synthesized\u00a0 \u00a0 \u00a0 SynthesisInput input = SynthesisInput.newBuilder().setText(\"Hello, World!\").build();\u00a0 \u00a0 \u00a0 // Build the voice request, select the language code (\"en-US\") and the ssml voice gender\u00a0 \u00a0 \u00a0 // (\"neutral\")\u00a0 \u00a0 \u00a0 VoiceSelectionParams voice =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 VoiceSelectionParams.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setLanguageCode(\"en-US\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSsmlGender(SsmlVoiceGender.NEUTRAL)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Select the type of audio file you want returned\u00a0 \u00a0 \u00a0 AudioConfig audioConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioConfig.newBuilder().setAudioEncoding(AudioEncoding.MP3).build();\u00a0 \u00a0 \u00a0 // Perform the text-to-speech request on the text input with the selected voice parameters and\u00a0 \u00a0 \u00a0 // audio file type\u00a0 \u00a0 \u00a0 SynthesizeSpeechResponse response =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 textToSpeechClient.synthesizeSpeech(input, voice, audioConfig);\u00a0 \u00a0 \u00a0 // Get the audio contents from the response\u00a0 \u00a0 \u00a0 ByteString audioContents = response.getAudioContent();\u00a0 \u00a0 \u00a0 // Write the response to the output file.\u00a0 \u00a0 \u00a0 try (OutputStream out = new FileOutputStream(\"output.mp3\")) {\u00a0 \u00a0 \u00a0 \u00a0 out.write(audioContents.toByteArray());\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Audio content written to file \\\"output.mp3\\\"\");\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```Before running the example, make sure you've [prepared your environment for Node.js development](/nodejs/docs/setup) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/texttospeech/quickstart.js) \n```\n// Imports the Google Cloud client libraryconst textToSpeech = require('@google-cloud/text-to-speech');// Import other required librariesconst fs = require('fs');const util = require('util');// Creates a clientconst client = new textToSpeech.TextToSpeechClient();async function quickStart() {\u00a0 // The text to synthesize\u00a0 const text = 'hello, world!';\u00a0 // Construct the request\u00a0 const request = {\u00a0 \u00a0 input: {text: text},\u00a0 \u00a0 // Select the language and SSML voice gender (optional)\u00a0 \u00a0 voice: {languageCode: 'en-US', ssmlGender: 'NEUTRAL'},\u00a0 \u00a0 // select the type of audio encoding\u00a0 \u00a0 audioConfig: {audioEncoding: 'MP3'},\u00a0 };\u00a0 // Performs the text-to-speech request\u00a0 const [response] = await client.synthesizeSpeech(request);\u00a0 // Write the binary audio content to a local file\u00a0 const writeFile = util.promisify(fs.writeFile);\u00a0 await writeFile('output.mp3', response.audioContent, 'binary');\u00a0 console.log('Audio content written to file: output.mp3');}quickStart();\n```Before running the example, make sure you've [prepared your environment for Python development](/python/docs/setup) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/texttospeech/snippets/quickstart.py) \n```\n\"\"\"Synthesizes speech from the input string of text or ssml.Make sure to be working in a virtual environment.Note: ssml must be well-formed according to:\u00a0 \u00a0 https://www.w3.org/TR/speech-synthesis/\"\"\"from google.cloud import texttospeech# Instantiates a clientclient = texttospeech.TextToSpeechClient()# Set the text input to be synthesizedsynthesis_input = texttospeech.SynthesisInput(text=\"Hello, World!\")# Build the voice request, select the language code (\"en-US\") and the ssml# voice gender (\"neutral\")voice = texttospeech.VoiceSelectionParams(\u00a0 \u00a0 language_code=\"en-US\", ssml_gender=texttospeech.SsmlVoiceGender.NEUTRAL)# Select the type of audio file you want returnedaudio_config = texttospeech.AudioConfig(\u00a0 \u00a0 audio_encoding=texttospeech.AudioEncoding.MP3)# Perform the text-to-speech request on the text input with the selected# voice parameters and audio file typeresponse = client.synthesize_speech(\u00a0 \u00a0 input=synthesis_input, voice=voice, audio_config=audio_config)# The response's audio_content is binary.with open(\"output.mp3\", \"wb\") as out:\u00a0 \u00a0 # Write the response to the output file.\u00a0 \u00a0 out.write(response.audio_content)\u00a0 \u00a0 print('Audio content written to file \"output.mp3\"')\n```Congratulations! You've sent your first request to Text-to-Speech.## How did it go?\n## Clean upTo avoid incurring charges to your Google Cloud account for   the resources used on this page, follow these steps.- Use the [Google Cloud console](https://console.cloud.google.com/) to delete your project if you don't need it.\n## What's next\n- Learn more about Cloud Text-to-Speech by reading the [basics](/text-to-speech/docs/basics) .\n- Review the list of [available voices](/text-to-speech/docs/voices) you can use for synthetic speech.", "guide": "Cloud Text-to-Speech API"}