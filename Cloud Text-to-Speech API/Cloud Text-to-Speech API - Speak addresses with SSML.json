{"title": "Cloud Text-to-Speech API - Speak addresses with SSML", "url": "https://cloud.google.com/text-to-speech/docs/ssml-tutorial", "abstract": "# Cloud Text-to-Speech API - Speak addresses with SSML\nThis tutorial demonstrates how to use [Speech Synthesis Markup Language (SSML)](/text-to-speech/docs/ssml) to speak a text file of addresses. You can mark up a string of text with SSML tags to personalize synthetic audio from Text-to-Speech.\n| Plaintext    | SSML rendering of plaintext   |\n|:-----------------------|:--------------------------------------|\n| 123 Street Ln   | <speak>123 Street Ln</speak>   |\n| 1 Number St   | <speak>1 Number St</speak>   |\n| 1 Piazza del Fibonacci | <speak>1 Piazza del Fibonacci</speak> |\n", "content": "## Objective\nSend a synthetic speech request to Text-to-Speech using SSML and [Text-to-Speech client libraries](/text-to-speech/docs/reference/libraries) .\n## Costs\nRefer to the [Text-to-Speech pricing page](/text-to-speech/pricing) for cost information.\n## Before you begin\n- Make sure that you have a [Text-to-Speech project](/text-to-speech/docs/reference/libraries) in [Google Cloud console](https://console.cloud.google.com/) .\n- This tutorial allows you to use Java, Node.js, or Python. If you plan to use Java, [download](https://maven.apache.org/download.cgi) and [install](https://maven.apache.org/install.html) Maven. If you plan to use Node.js, [download npm](https://www.npmjs.com/get-npm) .## Download the code samples\nTo download the code samples, clone the Google Cloud GitHub samples for the programming language that you intend to use.\nThis tutorial uses code in the `texttospeech/cloud-client/src/main/java/com/example/texttospeech/` directory of the [Google Cloud Platform Java samples repository](https://github.com/GoogleCloudPlatform/java-docs-samples) . To download and navigate to the code for this tutorial, run the following commands from the terminal.\n```\ngit clone https://github.com/GoogleCloudPlatform/java-docs-samples.git\ncd java-docs-samples/texttospeech/cloud-client/src/main/java/com/example/texttospeech/\n```This tutorial uses code in the `texttospeech` directory of the [Google Cloud Platform Node.js samples repository](https://github.com/GoogleCloudPlatform/nodejs-docs-samples) . To download and navigate to the code for this tutorial, run the following commands from the terminal.\n```\ngit clone https://github.com/GoogleCloudPlatform/nodejs-docs-samples.git\ncd texttospeech/\n```This tutorial uses code in the `texttospeech/snippets` directory of the [Google Cloud Platform Python samples repository](https://github.com/GoogleCloudPlatform/python-docs-samples) . To download and navigate to the code for this tutorial, run the following commands from the terminal.\n```\ngit clone https://github.com/GoogleCloudPlatform/python-docs-samples.git\ncd samples/snippets\n```\n## Install the client library\nThis tutorial uses the [Text-to-Speech client library](/text-to-speech/docs/reference/libraries) .\nThis tutorial uses the following dependencies. \n [  texttospeech/cloud-client/pom.xml ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/texttospeech/cloud-client/pom.xml) [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/texttospeech/cloud-client/pom.xml) \n```\n<!-- \u00a0Using libraries-bom to manage versions.See https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/The-Google-Cloud-Platform-Libraries-BOM --><dependencyManagement>\u00a0 <dependencies>\u00a0 \u00a0 <dependency>\u00a0 \u00a0 \u00a0 <groupId>com.google.cloud</groupId>\u00a0 \u00a0 \u00a0 <artifactId>libraries-bom</artifactId>\u00a0 \u00a0 \u00a0 <version>26.32.0</version>\u00a0 \u00a0 \u00a0 <type>pom</type>\u00a0 \u00a0 \u00a0 <scope>import</scope>\u00a0 \u00a0 </dependency>\u00a0 </dependencies></dependencyManagement><dependencies>\u00a0 <dependency>\u00a0 \u00a0 <groupId>com.google.cloud</groupId>\u00a0 \u00a0 <artifactId>google-cloud-texttospeech</artifactId>\u00a0 </dependency></dependencies>\n```From terminal, run the follow command.\n```\nnpm install @google-cloud/text-to-speech\n```From terminal, run the follow command.\n```\npip install --upgrade google-cloud-texttospeech\n```\n## Set up your Google Cloud Platform credentials\nProvide authentication credentials to your application code by setting the environment variable `GOOGLE_APPLICATION_CREDENTIALS` . This variable applies only to your current shell session. If you want the variable to apply to future shell sessions, set the variable in your shell startup file, for example in the `~/.bashrc` or `~/.profile` file.\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=\"KEY_PATH\"\n```\nReplace `` with the path of the JSON file that contains your credentials.\nFor example:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/home/user/Downloads/service-account-file.json\"\n```For PowerShell:\n```\n$env:GOOGLE_APPLICATION_CREDENTIALS=\"KEY_PATH\"\n```\nReplace `` with the path of the JSON file that contains your credentials.\nFor example:\n```\n$env:GOOGLE_APPLICATION_CREDENTIALS=\"C:\\Users\\username\\Downloads\\service-account-file.json\"\n```\nFor command prompt:\n```\nset GOOGLE_APPLICATION_CREDENTIALS=KEY_PATH\n```\nReplace `` with the path of the JSON file that contains your credentials.\n## Import libraries\nThis tutorial uses the following system and client libraries.\nTo learn how to install and use the client library for Text-to-Speech, see [Text-to-Speech client libraries](/text-to-speech/docs/libraries) .       For more information, see the [Text-to-Speech Java API reference documentation](/java/docs/reference/google-cloud-texttospeech/latest/overview) .\nTo authenticate to Text-to-Speech, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/texttospeech/snippets/src/main/java/com/example/texttospeech/SsmlAddresses.java) \n```\n// Imports the Google Cloud client libraryimport com.google.cloud.texttospeech.v1.AudioConfig;import com.google.cloud.texttospeech.v1.AudioEncoding;import com.google.cloud.texttospeech.v1.SsmlVoiceGender;import com.google.cloud.texttospeech.v1.SynthesisInput;import com.google.cloud.texttospeech.v1.SynthesizeSpeechResponse;import com.google.cloud.texttospeech.v1.TextToSpeechClient;import com.google.cloud.texttospeech.v1.VoiceSelectionParams;import com.google.common.html.HtmlEscapers;import com.google.protobuf.ByteString;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.nio.file.Files;import java.nio.file.Paths;\n```To learn how to install and use the client library for Text-to-Speech, see [Text-to-Speech client libraries](/text-to-speech/docs/libraries) .       For more information, see the [Text-to-Speech Node.js API reference documentation](/nodejs/docs/reference/text-to-speech/latest) .\nTo authenticate to Text-to-Speech, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/texttospeech/ssmlAddresses.js) \n```\n// Imports the Google Cloud client libraryconst textToSpeech = require('@google-cloud/text-to-speech');// Import other required librariesconst fs = require('fs');//const escape = require('escape-html');const util = require('util');\n```To learn how to install and use the client library for Text-to-Speech, see [Text-to-Speech client libraries](/text-to-speech/docs/libraries) .       For more information, see the [Text-to-Speech Python API reference documentation](/python/docs/reference/texttospeech/latest) .\nTo authenticate to Text-to-Speech, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/texttospeech/snippets/ssml_addresses.py) \n```\nimport htmlfrom google.cloud import texttospeech\n```\n## Use the Text-to-Speech API\nThe following function takes a string of text tagged with SSML and the name of an MP3 file. The function uses the text tagged with SSML to generate synthetic audio. The function saves the synthetic audio to the MP3 filename designated as a parameter.\nThe entire SSML input can only be read by a single voice. You can set the voice in the [VoiceSelectionParams](/text-to-speech/docs/reference/rest/v1/text/synthesize#voiceselectionparams) object.\n**Note** : This function overrides any pre-existing files with the same name as theparameter. Ensure that you do not lose any pre-existing local files by using a unique filename as your.\nTo learn how to install and use the client library for Text-to-Speech, see [Text-to-Speech client libraries](/text-to-speech/docs/libraries) .       For more information, see the [Text-to-Speech Java API reference documentation](/java/docs/reference/google-cloud-texttospeech/latest/overview) .\nTo authenticate to Text-to-Speech, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/texttospeech/snippets/src/main/java/com/example/texttospeech/SsmlAddresses.java) \n```\n/**\u00a0* Generates synthetic audio from a String of SSML text.\u00a0*\u00a0* <p>Given a string of SSML text and an output file name, this function calls the Text-to-Speech\u00a0* API. The API returns a synthetic audio version of the text, formatted according to the SSML\u00a0* commands. This function saves the synthetic audio to the designated output file.\u00a0*\u00a0* @param ssmlText String of tagged SSML text\u00a0* @param outFile String name of file under which to save audio output\u00a0* @throws Exception on errors while closing the client\u00a0*/public static void ssmlToAudio(String ssmlText, String outFile) throws Exception {\u00a0 // Instantiates a client\u00a0 try (TextToSpeechClient textToSpeechClient = TextToSpeechClient.create()) {\u00a0 \u00a0 // Set the ssml text input to synthesize\u00a0 \u00a0 SynthesisInput input = SynthesisInput.newBuilder().setSsml(ssmlText).build();\u00a0 \u00a0 // Build the voice request, select the language code (\"en-US\") and\u00a0 \u00a0 // the ssml voice gender (\"male\")\u00a0 \u00a0 VoiceSelectionParams voice =\u00a0 \u00a0 \u00a0 \u00a0 VoiceSelectionParams.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setLanguageCode(\"en-US\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSsmlGender(SsmlVoiceGender.MALE)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // Select the audio file type\u00a0 \u00a0 AudioConfig audioConfig =\u00a0 \u00a0 \u00a0 \u00a0 AudioConfig.newBuilder().setAudioEncoding(AudioEncoding.MP3).build();\u00a0 \u00a0 // Perform the text-to-speech request on the text input with the selected voice parameters and\u00a0 \u00a0 // audio file type\u00a0 \u00a0 SynthesizeSpeechResponse response =\u00a0 \u00a0 \u00a0 \u00a0 textToSpeechClient.synthesizeSpeech(input, voice, audioConfig);\u00a0 \u00a0 // Get the audio contents from the response\u00a0 \u00a0 ByteString audioContents = response.getAudioContent();\u00a0 \u00a0 // Write the response to the output file\u00a0 \u00a0 try (OutputStream out = new FileOutputStream(outFile)) {\u00a0 \u00a0 \u00a0 out.write(audioContents.toByteArray());\u00a0 \u00a0 \u00a0 System.out.println(\"Audio content written to file \" + outFile);\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for Text-to-Speech, see [Text-to-Speech client libraries](/text-to-speech/docs/libraries) .       For more information, see the [Text-to-Speech Node.js API reference documentation](/nodejs/docs/reference/text-to-speech/latest) .\nTo authenticate to Text-to-Speech, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/texttospeech/ssmlAddresses.js) \n```\n/**\u00a0* Generates synthetic audio from a String of SSML text.\u00a0*\u00a0* Given a string of SSML text and an output file name, this function\u00a0* calls the Text-to-Speech API. The API returns a synthetic audio\u00a0* version of the text, formatted according to the SSML commands. This\u00a0* function saves the synthetic audio to the designated output file.\u00a0*\u00a0* ARGS\u00a0* ssmlText: String of tagged SSML text\u00a0* outfile: String name of file under which to save audio output\u00a0* RETURNS\u00a0* nothing\u00a0*\u00a0*/async function ssmlToAudio(ssmlText, outFile) {\u00a0 // Creates a client\u00a0 const client = new textToSpeech.TextToSpeechClient();\u00a0 // Constructs the request\u00a0 const request = {\u00a0 \u00a0 // Select the text to synthesize\u00a0 \u00a0 input: {ssml: ssmlText},\u00a0 \u00a0 // Select the language and SSML Voice Gender (optional)\u00a0 \u00a0 voice: {languageCode: 'en-US', ssmlGender: 'MALE'},\u00a0 \u00a0 // Select the type of audio encoding\u00a0 \u00a0 audioConfig: {audioEncoding: 'MP3'},\u00a0 };\u00a0 // Performs the Text-to-Speech request\u00a0 const [response] = await client.synthesizeSpeech(request);\u00a0 // Write the binary audio content to a local file\u00a0 const writeFile = util.promisify(fs.writeFile);\u00a0 await writeFile(outFile, response.audioContent, 'binary');\u00a0 console.log('Audio content written to file ' + outFile);}\n```To learn how to install and use the client library for Text-to-Speech, see [Text-to-Speech client libraries](/text-to-speech/docs/libraries) .       For more information, see the [Text-to-Speech Python API reference documentation](/python/docs/reference/texttospeech/latest) .\nTo authenticate to Text-to-Speech, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/texttospeech/snippets/ssml_addresses.py) \n```\ndef ssml_to_audio(ssml_text, outfile):\u00a0 \u00a0 # Generates SSML text from plaintext.\u00a0 \u00a0 #\u00a0 \u00a0 # Given a string of SSML text and an output file name, this function\u00a0 \u00a0 # calls the Text-to-Speech API. The API returns a synthetic audio\u00a0 \u00a0 # version of the text, formatted according to the SSML commands. This\u00a0 \u00a0 # function saves the synthetic audio to the designated output file.\u00a0 \u00a0 #\u00a0 \u00a0 # Args:\u00a0 \u00a0 # ssml_text: string of SSML text\u00a0 \u00a0 # outfile: string name of file under which to save audio output\u00a0 \u00a0 #\u00a0 \u00a0 # Returns:\u00a0 \u00a0 # nothing\u00a0 \u00a0 # Instantiates a client\u00a0 \u00a0 client = texttospeech.TextToSpeechClient()\u00a0 \u00a0 # Sets the text input to be synthesized\u00a0 \u00a0 synthesis_input = texttospeech.SynthesisInput(ssml=ssml_text)\u00a0 \u00a0 # Builds the voice request, selects the language code (\"en-US\") and\u00a0 \u00a0 # the SSML voice gender (\"MALE\")\u00a0 \u00a0 voice = texttospeech.VoiceSelectionParams(\u00a0 \u00a0 \u00a0 \u00a0 language_code=\"en-US\", ssml_gender=texttospeech.SsmlVoiceGender.MALE\u00a0 \u00a0 )\u00a0 \u00a0 # Selects the type of audio file to return\u00a0 \u00a0 audio_config = texttospeech.AudioConfig(\u00a0 \u00a0 \u00a0 \u00a0 audio_encoding=texttospeech.AudioEncoding.MP3\u00a0 \u00a0 )\u00a0 \u00a0 # Performs the text-to-speech request on the text input with the selected\u00a0 \u00a0 # voice parameters and audio file type\u00a0 \u00a0 response = client.synthesize_speech(\u00a0 \u00a0 \u00a0 \u00a0 input=synthesis_input, voice=voice, audio_config=audio_config\u00a0 \u00a0 )\u00a0 \u00a0 # Writes the synthetic audio to the output file.\u00a0 \u00a0 with open(outfile, \"wb\") as out:\u00a0 \u00a0 \u00a0 \u00a0 out.write(response.audio_content)\u00a0 \u00a0 \u00a0 \u00a0 print(\"Audio content written to file \" + outfile)\n```\n## Personalize synthetic audio\nThe following function takes in the name of a text file and converts the contents of the file into a string of text tagged with SSML.\nTo learn how to install and use the client library for Text-to-Speech, see [Text-to-Speech client libraries](/text-to-speech/docs/libraries) .       For more information, see the [Text-to-Speech Java API reference documentation](/java/docs/reference/google-cloud-texttospeech/latest/overview) .\nTo authenticate to Text-to-Speech, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/texttospeech/snippets/src/main/java/com/example/texttospeech/SsmlAddresses.java) \n```\n/**\u00a0* Generates SSML text from plaintext.\u00a0*\u00a0* <p>Given an input filename, this function converts the contents of the input text file into a\u00a0* String of tagged SSML text. This function formats the SSML String so that, when synthesized,\u00a0* the synthetic audio will pause for two seconds between each line of the text file. This\u00a0* function also handles special text characters which might interfere with SSML commands.\u00a0*\u00a0* @param inputFile String name of plaintext file\u00a0* @return a String of SSML text based on plaintext input.\u00a0* @throws IOException on files that don't exist\u00a0*/public static String textToSsml(String inputFile) throws Exception {\u00a0 // Read lines of input file\u00a0 String rawLines = new String(Files.readAllBytes(Paths.get(inputFile)));\u00a0 // Replace special characters with HTML Ampersand Character Codes\u00a0 // These codes prevent the API from confusing text with SSML tags\u00a0 // For example, '<' --> '&lt;' and '&' --> '&amp;'\u00a0 String escapedLines = HtmlEscapers.htmlEscaper().escape(rawLines);\u00a0 // Convert plaintext to SSML\u00a0 // Tag SSML so that there is a 2 second pause between each address\u00a0 String expandedNewline = escapedLines.replaceAll(\"\\\\n\", \"\\n<break time='2s'/>\");\u00a0 String ssml = \"<speak>\" + expandedNewline + \"</speak>\";\u00a0 // Return the concatenated String of SSML\u00a0 return ssml;}\n```To learn how to install and use the client library for Text-to-Speech, see [Text-to-Speech client libraries](/text-to-speech/docs/libraries) .       For more information, see the [Text-to-Speech Node.js API reference documentation](/nodejs/docs/reference/text-to-speech/latest) .\nTo authenticate to Text-to-Speech, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/texttospeech/ssmlAddresses.js) \n```\n/**\u00a0* Generates SSML text from plaintext.\u00a0*\u00a0* Given an input filename, this function converts the contents of the input text file\u00a0* into a String of tagged SSML text. This function formats the SSML String so that,\u00a0* when synthesized, the synthetic audio will pause for two seconds between each line\u00a0* of the text file. This function also handles special text characters which might\u00a0* interfere with SSML commands.\u00a0*\u00a0* ARGS\u00a0* inputfile: String name of plaintext file\u00a0* RETURNS\u00a0* a String of SSML text based on plaintext input\u00a0*\u00a0*/function textToSsml(inputFile) {\u00a0 let rawLines = '';\u00a0 // Read input file\u00a0 try {\u00a0 \u00a0 rawLines = fs.readFileSync(inputFile, 'utf8');\u00a0 } catch (e) {\u00a0 \u00a0 console.log('Error:', e.stack);\u00a0 \u00a0 return;\u00a0 }\u00a0 // Replace special characters with HTML Ampersand Character Codes\u00a0 // These codes prevent the API from confusing text with SSML tags\u00a0 // For example, '<' --> '&lt;' and '&' --> '&amp;'\u00a0 let escapedLines = rawLines;\u00a0 escapedLines = escapedLines.replace(/&/g, '&amp;');\u00a0 escapedLines = escapedLines.replace(/\"/g, '&quot;');\u00a0 escapedLines = escapedLines.replace(/</g, '&lt;');\u00a0 escapedLines = escapedLines.replace(/>/g, '&gt;');\u00a0 // Convert plaintext to SSML\u00a0 // Tag SSML so that there is a 2 second pause between each address\u00a0 const expandedNewline = escapedLines.replace(/\\n/g, '\\n<break time=\"2s\"/>');\u00a0 const ssml = '<speak>' + expandedNewline + '</speak>';\u00a0 // Return the concatenated String of SSML\u00a0 return ssml;}\n```To learn how to install and use the client library for Text-to-Speech, see [Text-to-Speech client libraries](/text-to-speech/docs/libraries) .       For more information, see the [Text-to-Speech Python API reference documentation](/python/docs/reference/texttospeech/latest) .\nTo authenticate to Text-to-Speech, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/texttospeech/snippets/ssml_addresses.py) \n```\ndef text_to_ssml(inputfile):\u00a0 \u00a0 # Generates SSML text from plaintext.\u00a0 \u00a0 # Given an input filename, this function converts the contents of the text\u00a0 \u00a0 # file into a string of formatted SSML text. This function formats the SSML\u00a0 \u00a0 # string so that, when synthesized, the synthetic audio will pause for two\u00a0 \u00a0 # seconds between each line of the text file. This function also handles\u00a0 \u00a0 # special text characters which might interfere with SSML commands.\u00a0 \u00a0 #\u00a0 \u00a0 # Args:\u00a0 \u00a0 # inputfile: string name of plaintext file\u00a0 \u00a0 #\u00a0 \u00a0 # Returns:\u00a0 \u00a0 # A string of SSML text based on plaintext input\u00a0 \u00a0 # Parses lines of input file\u00a0 \u00a0 with open(inputfile) as f:\u00a0 \u00a0 \u00a0 \u00a0 raw_lines = f.read()\u00a0 \u00a0 # Replace special characters with HTML Ampersand Character Codes\u00a0 \u00a0 # These Codes prevent the API from confusing text with\u00a0 \u00a0 # SSML commands\u00a0 \u00a0 # For example, '<' --> '&lt;' and '&' --> '&amp;'\u00a0 \u00a0 escaped_lines = html.escape(raw_lines)\u00a0 \u00a0 # Convert plaintext to SSML\u00a0 \u00a0 # Wait two seconds between each address\u00a0 \u00a0 ssml = \"<speak>{}</speak>\".format(\u00a0 \u00a0 \u00a0 \u00a0 escaped_lines.replace(\"\\n\", '\\n<break time=\"2s\"/>')\u00a0 \u00a0 )\u00a0 \u00a0 # Return the concatenated string of ssml script\u00a0 \u00a0 return ssml\n```\n## Put it all together\nThis program uses the following input.\n```\n123 Street Ln, Small Town, IL 12345 USA\n1 Jenny St & Number St, Tutone City, CA 86753\n1 Piazza del Fibonacci, 12358 Pisa, Italy\n```\nPassing the above text to `text_to_ssml()` generates the following tagged text.\n```\n<speak>123 Street Ln, Small Town, IL 12345 USA\n<break time=\"2s\"/>1 Jenny St &amp; Number St, Tutone City, CA 86753\n<break time=\"2s\"/>1 Piazza del Fibonacci, 12358 Pisa, Italy\n<break time=\"2s\"/></speak>\n```\n### Run the code\nTo generate an audio file of synthetic speech, run the following code from the command line.\nFrom the `java-docs-samples/texttospeech/cloud-client/` directory, execute the following command on the command line.\n```\n$ mvn clean package\n```From the `java-docs-samples/texttospeech/cloud-client/` directory, execute the following command on the command line.\n```\n$ mvn clean package\n```In the `hybridGlossaries.js` file, uncomment the `TODO (developer)` commented-out variables.\nIn the following command, replace with your Google Cloud project ID. From the `nodejs-docs-samples/texttospeech` directory, execute the following command on the command line.\n```\n$ node ssmlAddresses.js projectId\n```In the `hybridGlossaries.js` file, uncomment the `TODO (developer)` commented-out variables.\nIn the following command, replace with your Google Cloud project ID. From the `nodejs-docs-samples/texttospeech` directory, execute the following command on the command line.\n```\n$env: C:/Node.js/node.exe C: ssmlAddresses.js projectId\n```From the `python-docs-samples/texttospeech/snippets` directory, execute the following command on the command line.\n```\n$ python ssml_addresses.py\n```From the `python-docs-samples/texttospeech/snippets` directory, execute the following command on the command line.\n```\n$env: C:/Python3/python.exe C: ssml_addresses.py\n```\n### Check your outputThis program outputs an audio file of synthetic speech.Navigate into `java-docs-samples/texttospeech/cloud-client/resources/` directory. Check the `resources` directory for an file.Navigate into `nodejs-docs-samples/texttospeech/resources/` directory. Check the `resources` directory for an file.Navigate into `python-docs-samples/texttospeech/snippets/resources` . Check the `resources` directory for an file.\nListen to the following audio clip to check that your file sounds the same.\n ## Troubleshoot\n- Forgetting to [set the GOOGLE_APPLICATION_CREDENTIALS](#setting_up_your_google_cloud_platform_credentials) environment variable on the command line generates the error message:```\nThe Application Default Credentials are not available.\n```\n- Passing `text_to_ssml()` the name of a non-existent file generates the error message:```\nIOError: [Errno 2] No such file or directory\n```\n- Passing `ssml_to_audio()` a parameter which contains generates the error message:```\nInvalidArgument: 400 Invalid input type. Type has to be text or SSML\n```\n- Make sure that you are running the code from the [correct directory](#running_the_code) .\n## What's next\n- Explore other [SSML tags](/text-to-speech/docs/ssml) .\n- Learn how to [use SSML with Translation and Vision](/translate/docs/hybrid-glossaries-tutorial) \n## Clean upTo avoid incurring charges to your Google Cloud Platform account for the resources used in this tutorial, use the [Google Cloud console](https://console.cloud.google.com/) to delete your project if you do not need it.\n### Delete your project\n- In the [Google Cloud console](https://console.cloud.google.com/) , go to the Projects page.\n- In the project list, select the project you want to delete and click **Delete** .\n- In the dialog box, type the project ID, and click **Shut down** to delete the project.\n-", "guide": "Cloud Text-to-Speech API"}