{"title": "Apigee - Upgrading Apigee hybrid to version 1.5", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Upgrading Apigee hybrid to version 1.5\nYou are currently viewing version 1.5 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\n**Note: ** This procedure covers upgrading from Apigee hybrid version 1.4.x to Apigee hybrid version 1.5.10 only.If you are upgrading from Apigee hybrid version 1.3 or older, you must first upgrade to  hybrid version 1.4 before upgrading to version 1.5.10.  See the instructions for [Upgrading Apigee hybrid to version 1.4](/apigee/docs/hybrid/v1.4/upgrade) .\n", "content": "## \n Upgrading to version 1.5.10 overview.\nUpgrading to Apigee hybrid version 1.5.10 may require downtime:- When upgrading the Apigee controller to version 1.5.10, all Apigee  deployments undergo a rolling restart. To minimize downtime in production hybrid environments  during a rolling restart, make sure you are running at least two clusters (in the same or  different region/data center). Divert all production traffic to a single cluster and take the  cluster you are about to upgrade offline, and then proceed with the upgrade process. Repeat  the process for each cluster.\n- If you are upgrading Anthos Service Mesh (ASM) to version 1.12.x, from a version prior to  ASM version 1.9, you should expect a few seconds of downtime in the cluster you are upgrading  when the ingress changes between the two versions.\n- If you change your certificate authority while upgrading ASM, you may experience downtime  in your ingress gateway. See [Migrating to Mesh  CA](/service-mesh/v1.10/docs/ca-migration) for more information.\nThe procedures for upgrading Apigee hybrid are organized in the following sections:\n- Backup your hybrid installation.\n- Check your Kubernetes version and upgrade as appropriate.\n- Upgrade ASM.\n- Install hybrid runtime version 1.5.## \n Prerequisite\n- Apigee hybrid version 1.4. If you are updating from an earlier version see the instructions  for [Upgrading Apigee hybrid to version 1.4](/apigee/docs/hybrid/v1.4/upgrade) .## \n Upgrade to version 1.5\n- These instructions use the environment variablefor the directory  in your file system where you have installed`apigeectl`. If needed,`cd`into your`apigeectl`directory and define the variable with the following command:\n```\nexport APIGEECTL_HOME=$PWD\n```\n```\necho $APIGEECTL_HOME\n``````\nexport APIGEECTL_HOME=$PWD\n```\n```\necho $APIGEECTL_HOME\n``````\nset APIGEECTL_HOME=%CD%\n```\n```\necho %APIGEECTL_HOME%\n```\n- (Recommended) Make a backup copy of your version 1.4`$APIGEECTL_HOME/`directory. For example:```\ntar -czvf $APIGEECTL_HOME/../apigeectl-v1.4-backup.tar.gz $APIGEECTL_HOME\n```\n- (Recommended) Backup your Cassandra database following the instructions in [Cassandra backup and recovery](/apigee/docs/hybrid/v1.5/backup-recovery) \n- Upgrade your Kubernetes platform to the versions supported by hybrid 1.5.  Follow your platform's documentation if you need help.\n- If you are running a version of`cert-manager`prior to v1.2.0, you need to upgrade it to v1.2.0.- Check the current `cert-manager` version using the following command:```\nkubectl -n cert-manager get deployment -o yaml | grep 'image:'\n```Something similar to the following is returned:```\nimage: quay.io/jetstack/cert-manager-controller:v1.2.0image: quay.io/jetstack/cert-manager-cainjector:v1.2.0image: quay.io/jetstack/cert-manager-webhook:v1.2.0\n```\n- Remove the deployments using the following command:```\nkubectl delete -n cert-manager deployment cert-manager cert-manager-cainjector cert-manager-webhook\n```\n- Upgrade`cert-manager`to v1.2.0 version using the following command:```\nkubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.2.0/cert-manager.yaml\n```\n## \n Upgrade ASM to version 1.12\nYou may experience a brief interruption of incoming traffic (typically less  than two seconds) when you upgrade ASM. If you are running hybrid in two or more clusters, you  can avoid this interruption by upgrading one cluster at a time. Divert all production traffic  away from the cluster you are about to upgrade, take the cluster offline, and then proceed  with the upgrade process. Repeat the process for each cluster.\nPerform the upgrade using the ASM documentation appropriate for your platform:\nThe instructions to install and configure ASM are different depending on your platform. The platforms are divided into the following categories:\n- **GKE** : Google Kubernetes Engine clusters running on Google Cloud.\n- **Outside Google Cloud** : Anthos clusters running on:- **Anthos clusters on VMware (GKE on-prem)** \n- **Anthos on bare metal** \n- **Anthos clusters on AWS** \n- **Amazon EKS** \n- **Other Kubernetes Platforms** : Conformant clusters created and running on:- **AKS** \n- **EKS** \n- **OpenShift** The sequence for upgrading to ASM version 1.8. for your hybrid    installation is as follows:- Prepare for the upgrade.\n- Install the new version of ASM.\n- Delete the previous ASM version's deployments, services, and webhooks from your     current installation.\n- Upgrade your gateways and configure the new webhooks.\nTo upgrade to ASM version 1.8. for hybrid on GKE:\n **Note:** You can upgrade directly from ASM version 1.10 or    higher to ASM version 1.8.. If you are running a version of ASM    older than 1.10, you must first upgrade to version 1.10. Follow the instructions in [Upgrading from earlier versions](/service-mesh/v1.12/docs/upgrade-path-old-versions-gke) - Review the requirements in [Upgrade Anthos     Service Mesh](/service-mesh/v1.12/docs/unified-install/upgrade) , but do not perform the upgrade yet.\n- Before installing the new version, determine the current revision. You will need     this information to delete the previous ASM version's deployments, services, and     webhooks from your current installation. Use the following command to store the     current istiod revision to an environment variable:```\nexport DELETE_REV=$(kubectl get deploy -n istio-system -l app=istiod -o jsonpath={.items[].metadata.labels.'istio\\.io\\/rev'}'{\"\\n\"}')\necho ${DELETE_REV}\n```\n- Create a new`overlay.yaml`file or verify that your existing`overlay.yaml`contains the following contents:```\napiVersion: install.istio.io/v1alpha1kind: IstioOperatorspec:\u00a0 revision: asm-1129-3\u00a0 components:\u00a0 \u00a0 ingressGateways:\u00a0 \u00a0 \u00a0 - name: istio-ingressgateway\u00a0 \u00a0 \u00a0 \u00a0 enabled: true\u00a0 \u00a0 \u00a0 \u00a0 k8s:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # default node selector, if different or not using node selectors, change accordingly.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cloud.google.com/gke-nodepool: apigee-runtime\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 1000m\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: LoadBalancer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 loadBalancerIP: STATIC_IP # If you do not have a reserved static IP, leave this out.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http-status-port\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 15021\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 80\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: https\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 443\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8443\u00a0 meshConfig:\u00a0 \u00a0 accessLogFormat:\u00a0 \u00a0 \u00a0 '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n```\n- Follow the instructions in the following sections in the ASM documentation: **Important:** Make sure to follow the instructions to     upgrade ASM with optional features, and to include your`overlay.yaml`.- [Download      asmcli](/service-mesh/v1.12/docs/unified-install/install-dependent-tools#download_asmcli) \n- [Grant      cluster admin permissions](/service-mesh/v1.12/docs/unified-install/install-dependent-tools#grant_cluster_admin_permissions) \n- [Validate      project and cluster](/service-mesh/v1.12/docs/unified-install/install-dependent-tools#validate_project_and_cluster) \n- [Upgrade      with optional features](/service-mesh/v1.12/docs/unified-install/upgrade#upgrade_with_optional_features) . Stop before starting the \"Upgrade Gateways section\"\n- Delete the mutating webhook and validating webhook:- `cd`into the directory where you installed`asmcli`.\n- Store the current new revision in an environment variable to use in the script      to delete the webhooks:```\nUPGRADE_REV=\"asm-1129-3\"\n```\n- create a shell script containing the following commands:```\n#!/bin/bash\nset -ex\nPROJECT_ID=\"YOUR_PROJECT_ID\"\nCLUSTER_NAME=\"YOUR_CLUSTER_NAME\"\nCLUSTER_LOCATION=\"YOUR_CLUSTER_LOCATION\"\nkubectl label namespace istio-system istio.io/rev=${UPGRADE_REV} istio-injection- --overwrite\nkubectl rollout restart deployment -n istio-system\nkubectl apply -n istio-system -f PATH_TO_INGRESSGATEWAYistio-ingressgateway\nkubectl apply -n istio-system -f PATH_TO_INGRESSGATEWAY/istio-ingressgateway-connectors\nif [[ \"${DELETE_REV}\" != \"${UPGRADE_REV}\" ]]; then\n kubectl apply -f out/asm/istio/istiod-service.yaml\n kubectl delete deploy -l app=istio-ingressgateway,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete deploy -l app=istio-ingressgateway-connectors,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete ValidatingWebhookConfiguration -l app=istiod,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete MutatingWebhookConfiguration -l app=sidecar-injector,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete Service,Deployment,HorizontalPodAutoscaler,PodDisruptionBudget istiod-${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete IstioOperator installed-state-${DELETE_REV} -n istio-system --ignore-not-found=true\nfi\n```\n- Execute the script to delete the current webhooks.\n- Follow the steps in [Upgrade     gateways](/service-mesh/v1.12/docs/unified-install/upgrade#upgrade_gateways) to create the new webhooks and switch traffic to the new gateways.\nThese instructions cover upgrading ASM on:- **Anthos clusters on VMware (GKE on-prem)** \n- **Anthos on bare metal** \n- **Anthos clusters on AWS** \n- **Amazon EKS** \n **Note:** You can upgrade directly from ASM version 1.10 or    higher to ASM version 1.8.. If you are running an older version of    ASM, you must first upgrade to version 1.10. Follow the instructions in [Upgrading from earlier versions](/service-mesh/v1.12/docs/upgrade-path-old-versions-on-prem) - Review the requirements in [Upgrade Anthos     Service Mesh](/service-mesh/v1.12/docs/unified-install/upgrade) , but do not perform the upgrade yet.\n- Before installing the new version, determine the current revision. You will need     this information to delete theandfrom your current ASM installation. Use the following command to store the current     istiod revision to an environment variable:```\nexport DELETE_REV=$(kubectl get deploy -n istio-system -l app=istiod -o jsonpath={.items[].metadata.labels.'istio\\.io\\/rev'}'{\"\\n\"}')\necho ${DELETE_REV}\n```\n- Create a new`overlay.yaml`file or verify that your existing`overlay.yaml`contains the following contents:```\napiVersion: install.istio.io/v1alpha1kind: IstioOperatorspec:\u00a0 revision: asm-1129-3\u00a0 components:\u00a0 \u00a0 ingressGateways:\u00a0 \u00a0 \u00a0 - name: istio-ingressgateway\u00a0 \u00a0 \u00a0 \u00a0 enabled: true\u00a0 \u00a0 \u00a0 \u00a0 k8s:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # default node selector, if different or not using node selectors, change accordingly.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cloud.google.com/gke-nodepool: apigee-runtime\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 1000m\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: LoadBalancer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 loadBalancerIP: STATIC_IP # If you do not have a reserved static IP, leave this out.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http-status-port\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 15021\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 80\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: https\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 443\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8443\u00a0 values:\u00a0 \u00a0 gateways:\u00a0 \u00a0 \u00a0 istio-ingressgateway:\u00a0 \u00a0 \u00a0 \u00a0 runAsRoot: true\u00a0 meshConfig:\u00a0 \u00a0 accessLogFormat:\u00a0 \u00a0 \u00a0 '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n```\n- Follow the instructions in the following sections in the ASM documentation: **Important:** Make sure to follow the instructions to     upgrade ASM with optional features, and to include your`overlay.yaml`.- [Download      asmcli](/service-mesh/v1.12/docs/unified-install/install-dependent-tools#download_asmcli) \n- [Grant      cluster admin permissions](/service-mesh/v1.12/docs/unified-install/install-dependent-tools#grant_cluster_admin_permissions) \n- [Validate      project and cluster](/service-mesh/v1.12/docs/unified-install/install-dependent-tools#validate_project_and_cluster) \n- [Upgrade      with optional features](/service-mesh/v1.12/docs/unified-install/upgrade#upgrade_with_optional_features) . Stop before starting the \"Upgrade Gateways section\"\n- Delete the mutating webhook and validating webhook:- `cd`into the directory where you installed`asmcli`.\n- Store the current new revision in an environment variable to use in the script      to delete the webhooks:```\nUPGRADE_REV=\"asm-1129-3\"\n```\n- create a shell script containing the following commands:```\n#!/bin/bash\nset -ex\nPROJECT_ID=\"YOUR_PROJECT_ID\"\nCLUSTER_NAME=\"YOUR_CLUSTER_NAME\"\nCLUSTER_LOCATION=\"YOUR_CLUSTER_LOCATION\"\ngcloud config configurations activate ${PROJECT_ID}\ngcloud container clusters get-credentials ${CLUSTER_NAME} --region ${CLUSTER_LOCATION} --project ${PROJECT_ID}\nkubectl label namespace istio-system istio.io/rev=${UPGRADE_REV} istio-injection- --overwrite\nkubectl rollout restart deployment -n istio-system\nkubectl apply -n istio-system -f PATH_TO_INGRESSGATEWAYistio-ingressgateway\nkubectl apply -n istio-system -f PATH_TO_INGRESSGATEWAY/istio-ingressgateway-connectors\nif [[ \"${DELETE_REV}\" != \"${UPGRADE_REV}\" ]]; then\n kubectl apply -f out/asm/istio/istiod-service.yaml\n kubectl delete deploy -l app=istio-ingressgateway,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete deploy -l app=istio-ingressgateway-connectors,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete ValidatingWebhookConfiguration -l app=istiod,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete MutatingWebhookConfiguration -l app=sidecar-injector,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete Service,Deployment,HorizontalPodAutoscaler,PodDisruptionBudget istiod-${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete IstioOperator installed-state-${DELETE_REV} -n istio-system --ignore-not-found=true\nfi\n```\n- Execute the script to delete the current webhooks.\n- Follow the steps in [Upgrade     gateways](/service-mesh/v1.12/docs/unified-install/upgrade#upgrade_gateways) to create the new webhooks and switch traffic to the new gateways.\nIn these instructions the process of upgrading Anthos Service Mesh (ASM) version  istio-1.12.9-asm.3 on Anthos attached clusters is the same as performing a fresh install.\n### \n Preparing to install Anthos Service Mesh\n \nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-linux-amd64.tar.gz\n```\nDownload the signature file and use openssl to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-linux-amd64.tar.gz.1.sig\n``````\nopenssl dgst -verify /dev/stdin -signature istio-1.12.9-asm.3-linux-amd64.tar.gz.1.sig istio-1.12.9-asm.3.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.12.9-asm.3-linux-amd64.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.12.9-asm.3` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.12.9-asm.3\n```\nFor convenience, add the tools in the /bin directory to your PATH:```\nexport PATH=$PWD/bin:$PATH\n```Download the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-osx.tar.gz\n```\nDownload the signature file and use openssl to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-osx.tar.gz.1.sig\n``````\nopenssl dgst -sha256 -verify /dev/stdin -signature istio-1.12.9-asm.3-osx.tar.gz.1.sig istio-1.12.9-asm.3.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.12.9-asm.3-osx.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.12.9-asm.3` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.12.9-asm.3\n```\nFor convenience, add the tools in the /bin directory to your PATH:```\nexport PATH=$PWD/bin:$PATH\n```Download the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-win.zip\n```\nDownload the signature file and use openssl to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-win.zip.1.sig\n``````\nopenssl dgst -verify - -signature istio-1.12.9-asm.3-win.zip.1.sig istio-1.12.9-asm.3.win.zip <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.12.9-asm.3-win.zip\n```The command creates an installation directory in your current working directory named `istio-1.12.9-asm.3` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests\\profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.12.9-asm.3\n```\nFor convenience, add the tools in the \\bin directory to your PATH:```\nset PATH=%CD%\\bin:%PATH%\n```\n- Now that ASM Istio is installed, check the version of`istioctl`:```\nistioctl version\n```\n- Create a namespace called istio-system for the control plane components:```\nkubectl create namespace istio-system\n```\n### \n Configure the validating webhook\nWhen you install Anthos Service Mesh, you set a revision label on istiod. You need to set the same revision on the validating webhook.- Create a file called`istiod-service.yaml`with the following contents:```\napiVersion: v1kind: Servicemetadata:\u00a0 name: istiod\u00a0 namespace: istio-system\u00a0 labels:\u00a0 \u00a0 istio.io/rev: asm-1129-3\u00a0 \u00a0 app: istiod\u00a0 \u00a0 istio: pilot\u00a0 \u00a0 release: istiospec:\u00a0 ports:\u00a0 \u00a0 - port: 15010\u00a0 \u00a0 \u00a0 name: grpc-xds # plaintext\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 - port: 15012\u00a0 \u00a0 \u00a0 name: https-dns # mTLS with k8s-signed cert\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 - port: 443\u00a0 \u00a0 \u00a0 name: https-webhook # validation and injection\u00a0 \u00a0 \u00a0 targetPort: 15017\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 - port: 15014\u00a0 \u00a0 \u00a0 name: http-monitoring # prometheus stats\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 selector:\u00a0 \u00a0 app: istiod\u00a0 \u00a0 istio.io/rev: asm-1129-3\u00a0 meshConfig:\u00a0 \u00a0 accessLogFormat:\u00a0 \u00a0 \u00a0 '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n```\n- Use`kubectl`to apply the validating webhook configuration:```\nkubectl apply -f istiod-service.yaml\n```\n- Verify that the configuration was applied:```\nkubectl get svc -n istio-system\n```The response should look similar to:```\nNAME \u00a0 \u00a0 TYPE \u00a0 \u00a0 \u00a0 \u00a0CLUSTER-IP \u00a0 \u00a0 \u00a0 EXTERNAL-IP \u00a0 PORT(S) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AGEistiod \u00a0 ClusterIP \u00a0 172.200.18.133 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 22s\n```\n### \n Installing Anthos Service Mesh\n- Install Anthos Service Mesh with`istioctl`using the`asm-multicloud`profile:```\nistioctl install \\\n --set profile=asm-multicloud \\\n --set revision=\"asm-1129-3\"\n```Your output should look something like:```\nkubectl get pods -n istio-systemNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 READY \u00a0 STATUS \u00a0 \u00a0RESTARTS \u00a0 AGEistio-ingressgateway-88b6fd976-flgp2 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m13sistio-ingressgateway-88b6fd976-p5dl9 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02m57sistiod-asm-1129-3-798ffb964-2ls88 \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21sistiod-asm-1129-3-798ffb964-fnj8c \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21s\n```The `--set revision` argument adds a revision label in the format `istio.io/rev=asm-1129-3` to istiod. The revision label is used by the  automatic sidecar injector webhook to associate injected sidecars with a particular istiod  revision. To enable sidecar auto-injection for a namespace, you must label it with a revision  that matches the label on istiod.\n- Verify that your install completed:```\nkubectl get svc -n istio-system\n```Your output should look something like:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TYPE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CLUSTER-IP \u00a0 \u00a0 \u00a0 EXTERNAL-IP \u00a0 \u00a0 PORT(S) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0AGEistio-ingressgateway \u00a0 LoadBalancer \u00a0 172.200.48.52 \u00a0 \u00a034.74.177.168 \u00a0 15021:30479/TCP,80:30030/TCP,443:32200/TCP,15012:32297/TCP,15443:30244/TCP \u00a0 3m35sistiod \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.18.133 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04m46sistiod-asm-1129-3 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.63.220 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m43s\n```\nIn these instructions the process of upgrading Anthos Service Mesh (ASM) version  istio-1.12.9-asm.3 on Anthos attached clusters is the same as performing a fresh install.\n### \n Preparing to install Anthos Service Mesh\n \nGrant the`anyuid`security context constraint (SCC) to the istio-system with the   following OpenShift CLI (`oc`) command:```\noc adm policy add-scc-to-group anyuid system:serviceaccounts:istio-system\n```\nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-linux-amd64.tar.gz\n```\nDownload the signature file and use openssl to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-linux-amd64.tar.gz.1.sig\n``````\nopenssl dgst -verify /dev/stdin -signature istio-1.12.9-asm.3-linux-amd64.tar.gz.1.sig istio-1.12.9-asm.3.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.12.9-asm.3-linux-amd64.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.12.9-asm.3` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.12.9-asm.3\n```\nFor convenience, add the tools in the /bin directory to your PATH:```\nexport PATH=$PWD/bin:$PATH\n```Grant the`anyuid`security context constraint (SCC) to the istio-system with the   following OpenShift CLI (`oc`) command:```\noc adm policy add-scc-to-group anyuid system:serviceaccounts:istio-system\n```\nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-osx.tar.gz\n```\nDownload the signature file and use openssl to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-osx.tar.gz.1.sig\n``````\nopenssl dgst -sha256 -verify /dev/stdin -signature istio-1.12.9-asm.3-osx.tar.gz.1.sig istio-1.12.9-asm.3.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.12.9-asm.3-osx.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.12.9-asm.3` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.12.9-asm.3\n```\nFor convenience, add the tools in the /bin directory to your PATH:```\nexport PATH=$PWD/bin:$PATH\n```Grant the`anyuid`security context constraint (SCC) to the istio-system with the   following OpenShift CLI (`oc`) command:```\noc adm policy add-scc-to-group anyuid system:serviceaccounts:istio-system\n```\nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-win.zip\n```\nDownload the signature file and use openssl to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-win.zip.1.sig\n``````\nopenssl dgst -verify - -signature istio-1.12.9-asm.3-win.zip.1.sig istio-1.12.9-asm.3.win.zip <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.12.9-asm.3-win.zip\n```The command creates an installation directory in your current working directory named `istio-1.12.9-asm.3` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests\\profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.12.9-asm.3\n```\nFor convenience, add the tools in the \\bin directory to your PATH:```\nset PATH=%CD%\\bin:%PATH%\n```\n- Now that ASM Istio is installed, check the version of`istioctl`:```\nistioctl version\n```\n- Create a namespace called istio-system for the control plane components:```\nkubectl create namespace istio-system\n```\n### \n Configure the validating webhook\nWhen you install Anthos Service Mesh, you set a revision label on istiod. You need to set the same revision on the validating webhook.- Create a file called`istiod-service.yaml`with the following contents:```\napiVersion: v1kind: Servicemetadata:\u00a0 name: istiod\u00a0 namespace: istio-system\u00a0 labels:\u00a0 \u00a0 istio.io/rev: asm-1129-3\u00a0 \u00a0 app: istiod\u00a0 \u00a0 istio: pilot\u00a0 \u00a0 release: istiospec:\u00a0 ports:\u00a0 \u00a0 - port: 15010\u00a0 \u00a0 \u00a0 name: grpc-xds # plaintext\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 - port: 15012\u00a0 \u00a0 \u00a0 name: https-dns # mTLS with k8s-signed cert\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 - port: 443\u00a0 \u00a0 \u00a0 name: https-webhook # validation and injection\u00a0 \u00a0 \u00a0 targetPort: 15017\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 - port: 15014\u00a0 \u00a0 \u00a0 name: http-monitoring # prometheus stats\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 selector:\u00a0 \u00a0 app: istiod\u00a0 \u00a0 istio.io/rev: asm-1129-3\u00a0 meshConfig:\u00a0 \u00a0 accessLogFormat:\u00a0 \u00a0 \u00a0 '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n```\n- Use`kubectl`to apply the validating webhook configuration:```\nkubectl apply -f istiod-service.yaml\n```\n- Verify that the configuration was applied:```\nkubectl get svc -n istio-system\n```The response should look similar to:```\nNAME \u00a0 \u00a0 TYPE \u00a0 \u00a0 \u00a0 \u00a0CLUSTER-IP \u00a0 \u00a0 \u00a0 EXTERNAL-IP \u00a0 PORT(S) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AGEistiod \u00a0 ClusterIP \u00a0 172.200.18.133 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 22s\n```\n### \n Installing Anthos Service Mesh\n- Install Anthos Service Mesh with`istioctl`using the`asm-multicloud`profile:```\nistioctl install \\\n --set profile=asm-multicloud \\\n --set revision=istio-1.12.9-asm.3\n```Your output should look something like:```\nkubectl get pods -n istio-systemNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 READY \u00a0 STATUS \u00a0 \u00a0RESTARTS \u00a0 AGEistio-ingressgateway-88b6fd976-flgp2 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m13sistio-ingressgateway-88b6fd976-p5dl9 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02m57sistiod-asm-1129-3-798ffb964-2ls88 \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21sistiod-asm-1129-3-798ffb964-fnj8c \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21s\n```The `--set revision` argument adds a revision label in the format `istio.io/rev=1.8.6-asm.1` to istiod. The revision label is used by the  automatic sidecar injector webhook to associate injected sidecars with a particular istiod  revision. To enable sidecar auto-injection for a namespace, you must label it with a revision  that matches the label on istiod.\n- Verify that your install completed:```\nkubectl get svc -n istio-system\n```Your output should look something like:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TYPE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CLUSTER-IP \u00a0 \u00a0 \u00a0 EXTERNAL-IP \u00a0 \u00a0 PORT(S) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0AGEistio-ingressgateway \u00a0 LoadBalancer \u00a0 172.200.48.52 \u00a0 \u00a034.74.177.168 \u00a0 15021:30479/TCP,80:30030/TCP,443:32200/TCP,15012:32297/TCP,15443:30244/TCP \u00a0 3m35sistiod \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.18.133 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04m46sistiod-asm-1129-3 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.63.220 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m43s\n```## \n Install the hybrid 1.5.10 runtime\n**Note: ** Do not create new environments during the upgrade process. This can lead to an error state that is difficult to diagnose.\n- Download the release package for your operating system: **Mac 64 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.5.10/apigeectl_mac_64.tar.gz\n``` **Linux 64 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.5.10/apigeectl_linux_64.tar.gz\n``` **Mac 32 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.5.10/apigeectl_mac_32.tar.gz\n``` **Linux 32 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.5.10/apigeectl_linux_32.tar.gz\n```\n- Rename your current`apigeectl/`directory to a backup directory name. For example:```\nmv $APIGEECTL_HOME/ $APIGEECTL_HOME-v1.2/ \n```\n- Extract the downloaded gzip file contents into your hybrid base directory. For example:```\ntar xvzf FILENAME.tar.gz -C HYBRID_BASE_DIRECTORY\n```\n- `cd`to the base directory.\n- The tar contents are, by default, expanded into a directory with the version and platform in its  name. For example: `./apigeectl_1.5.0-d591b23_linux_64` . Rename that directory  to `apigeectl` :```\nmv apigeectl_1.5.0-d591b23_linux_64 apigeectl\n```\n- In the **new** `apigeectl/`directory, run`apigeectl init`,`apigeectl apply`, and`apigeectl check-ready`:- Initialize hybrid 1.5.10:```\napigeectl init -f OVERRIDES.yaml\n```Where `.yaml` is your edited `overrides.yaml` file.\n- Check that it initialized correctly with the following commands:```\napigeectl check-ready -f OVERRIDES.yaml\n``````\nkubectl describe apigeeds -n apigee\n```Your output should look something like:```\nStatus:\n Cassandra Data Replication:\n Cassandra Pod Ips:\n 10.8.2.204\n Cassandra Ready Replicas: 1\n Components:\n Cassandra:\n  Last Successfully Released Version:\n  Revision: v1-f8aa9a82b9f69613\n  Version: v1\n  Replicas:\n  Available: 1\n  Ready:  1\n  Total:  1\n  Updated: 1\n  State:  running\n Scaling:\n In Progress:   false\n Operation:\n Requested Replicas: 0\n State:     running\n```\n- The syntax of the`apigeectl``--dry-run`flag depends on the  version of`kubectl`you are running. Check the version of`kubectl`:```\ngcloud version\n```\n- Check for errors with a dry run with the command appropriate to your version of`kubectl`: `kubectl` version 1.17 and older:```\napigeectl apply -f OVERRIDES.yaml --dry-run=true\n``` `kubectl` version 1.18 and newer:```\napigeectl apply -f OVERRIDES.yaml --dry-run=client\n```\n- Apply your overrides. Select and follow the instructions for production environments or  demo/experimental environments, depending on your installation.During the upgrade process each component will perform a rolling restart.   Therefore, for production environments, it is best to apply the upgrade to one component at   a time.\nFor production environments you should upgrade each hybrid component individually, and    check the status of the upgraded component before proceeding to the next component.- Apply your overrides to upgrade Cassandra:```\napigeectl apply -f OVERRIDES.yaml --datastore\n```\n- Check completion:```\napigeectl check-ready -f OVERRIDES.yaml\n``` **Tip:** If`check-ready`fails, you can get more     information about your pods with:```\nkubectl -n NAMESPACE get pods\n```Where is your Apigee hybrid namespace.Proceed to the next step only when the pods are ready.\n- Apply your overrides to upgrade Telemetry components and check completion:```\napigeectl apply -f OVERRIDES.yaml --telemetry\n``````\napigeectl check-ready -f OVERRIDES.yaml\n```\n- Bring up Redis components: **Note:** Redis support is new with hybrid v1.5.```\napigeectl apply -f OVERRIDES.yaml --redis\n```\n- Apply your overrides to upgrade the org-level components (MART, Watcher and Apigee    Connect) and check completion:```\napigeectl apply -f OVERRIDES.yaml --org\n``````\napigeectl check-ready -f OVERRIDES.yaml\n```\n- Apply your overrides to upgrade your environments. You have two choices:- **Environment by environment** : Apply your overrides to one environment at a time and check completion. Repeat     this step for each environment:```\napigeectl apply -f OVERRIDES.yaml --env ENV_NAME\n``````\napigeectl check-ready -f OVERRIDES.yaml\n```Where is the name of the environment you are upgrading.\n- **All environments at one time** : Apply your overrides to all environments at once and check completion:```\napigeectl apply -f OVERRIDES.yaml --all-envs\n``````\napigeectl check-ready -f OVERRIDES.yaml\n```In most demo or experimental environments, you can apply the overrides to all components    at once. If your demo/experimental environment large and complex or closely mimics a    production environment, you may want to use the instructions for upgrading [production environments](#production) - ```\napigeectl apply -f OVERRIDES.yaml\n```\n- Check the status:```\napigeectl check-ready -f OVERRIDES.yaml\n```**Congratulations!** You have successfully upgraded to Apigee hybrid version 1.5.10.\n## \n Rolling back an upgrade\nFollow these steps to roll back a previous upgrade:\n- Clean up completed jobs for the hybrid runtime namespace, whereis the  namespace specified in your overrides file, if you specified a namespace. If not, the default namespace  is`apigee`:```\nkubectl delete job -n NAMESPACE \\\n $(kubectl get job -n NAMESPACE \\\n -o=jsonpath='{.items[?(@.status.succeeded==1)].metadata.name}')\n```\n- Clean up completed jobs for the`apigee-system`namespace:```\nkubectl delete job -n apigee-system \\\n $(kubectl get job -n apigee-system \\\n -o=jsonpath='{.items[?(@.status.succeeded==1)].metadata.name}')\n```\n- Change the`APIGEECTL_HOME`variable to point to the directory that contains the previous  version of`apigeectl`. For example:```\nexport APIGEECTL_HOME=PATH_TO_PREVIOUS_APIGEECTL_DIRECTORY\n```\n- In the root directory of the installation you want to roll back to, run`apigeectl apply`, check the status of your pods,  delete the Redis component (new in hybrid v1.5.0), and then run`apigeectl init`. Be sure to use the original overrides file for the version you  wish to roll back to:- Run`apigeectl apply`:```\n$APIGEECTL_HOME/apigeectl apply -f overrides/ORIGINAL_OVERRIDES.yaml\n```\n- Check the status of your pods:```\nkubectl -n NAMESPACE get pods\n```Where is your Apigee hybrid namespace.Proceed to the next step only when the `apigeeds` pod is running.\n- Since Redis is a new component in hybrid v1.5, run the following command to delete it:```\napigeectl_1.5.0 delete --redis -f ORIGINAL_OVERRIDES.yaml\n```\n- Run`apigeectl init`:```\n$APIGEECTL_HOME/apigeectl init -f overrides/ORIGINAL_OVERRIDES.yaml\n```", "guide": "Apigee"}