{"title": "Apigee - Errors and error handling", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Errors and error handling\n**Announcement:** Application Integration is now available for your Google Cloud project. You can now use both Apigee Integration and Application Integration within the same Google Cloud project. [Learn more](/apigee/docs/api-platform/integration/using-application-integration)\nIn Apigee Integration, errors might occur when you're testing and publishing an integration, or during the execution of an integration. These errors can occur due to various client-side and server-side issues, and are broadly classified as follows:\n- **Permanent errors:** All client-side errors such as, authentication failures, data validation errors, are considered as permanent errors. Permanent errors cause permanent task failures.\n- **Temporary errors:** All server-side errors such as, HTTP 503 (service unavailable), HTTP 400 (bad request), are considered as temporary errors. Temporary errors cause temporary task failures.\nError messages appear in the following locations:\n- **Execution logs page** : Displays errors encountered during the execution of an  integration. Each execution of an integration has a separate log entry. For information about execution logs page, see [Execution logs](/apigee/docs/api-platform/integration/viewing-logs) .\n- **Integration editor page** : Displays errors encountered when you publish an  integration. The errors are displayed at the bottom of the integration editor page. For information about the integration editor page, see [Integration editor](/apigee/docs/api-platform/integration/integrations-ui-layout) .\nFor information on the list of error codes that you might encounter, see [Error codes](#codes) .\n", "content": "## Error handling methods\nApigee Integration offers multiple error handling methods to respond and recover from the errors that are encountered when creating, testing, publishing, or running your integrations. You can use error handling methods for both synchronous and asynchronous modes of integration execution.\n**Synchronous executions:** In synchronous mode, the execution result of the integration is available soon after the  integration runs. Synchronous mode is helpful in scenarios where you want the execution result  immediately after the integration runs.\n**Asynchronous executions:** Asynchronous executions use the fire and forget model. Asynchronous mode is helpful in scenarios  where integrations can take a long time to run, or the execution result is not required  immediately after the integration runs.\nApigee Integration supports the following error handling methods to throw, catch, retry, and customize the errors encountered in your integration:\n- [Error handling strategies](/apigee/docs/api-platform/integration/error-handling-strategy) \n- [Error catcher](/apigee/docs/api-platform/integration/error-catcher) ## Error codes\nThe following table describes the errors that you might encounter, and the corresponding causes for the errors. Apigee Integration uses the canonical error codes defined in [google.rpc.Code](https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto) .\n| Standard exception type  | Canonical code  | HTTP code | Description                                              |\n|:----------------------------|:--------------------|------------:|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| FailedPreconditionException | FAILED_PRECONDITION |   400 | Request can not be executed in the current system state.                                   |\n| BadRequestException   | INVALID_ARGUMENT |   400 | Client specified an invalid argument. Check error message and error details for more information.                        |\n| UnauthenticatedException | UNAUTHENTICATED  |   401 | Request not authenticated due to missing, invalid, or expired OAuth token.                              |\n| ForbiddenException   | PERMISSION_DENIED |   403 | Client does not have sufficient permission. This can happen if the OAuth token doesn't have the right scopes, the client doesn't have the required permissions, or the API has not been enabled. |\n| NotFoundException   | NOT_FOUND   |   404 | A specified resource is not found.                                        |\n| AlreadyExistsException  | ALREADY_EXISTS  |   409 | The resource that a client tried to create already exists.                                  |\n| InternalError    | INTERNAL   |   500 | Internal server error. Typically a server bug. This can happen if any of the tasks or triggers are incorrectly configured.                  |\n| UnimplementedException  | UNIMPLEMENTED  |   501 | API method not implemented by the server.                                      |\n| ServiceUnavailableException | UNAVAILABLE   |   503 | Service unavailable. Typically the server is down.                                    |\n| AbortedException   | ABORTED    |   409 | Response size is too large.                                          |", "guide": "Apigee"}