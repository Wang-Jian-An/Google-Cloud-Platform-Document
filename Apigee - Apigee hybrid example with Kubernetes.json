{"title": "Apigee - Apigee hybrid example with Kubernetes", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Apigee hybrid example with Kubernetes\nThis example demonstrates how to use Apigee Adapter for Envoy with an Apigee hybrid deployment.\n", "content": "## Prerequisites\n| Before you begin:                       |\n|:-----------------------------------------------------------------------------------------------------------|\n| Download and install the Apigee Adapter for Envoy Remote Service and CLI as explained in Getting started. |\n| Be sure you have the Google Cloud SDK installed. The SDK includes the gcloud command-line tool.   |\n| Be sure you have kubectl installed.                  |\n## \n Overview\nThis example explains how to use Apigee Adapter for Envoy with [ Apigee hybrid](/apigee/docs/hybrid/latest/what-is-hybrid) . In this example, you will deploy a simple HTTP service in the same Kubernetes cluster where Apigee hybrid is deployed. Then, you will configure the Apigee Adapter for Envoy to manage API calls to this service with Apigee.\nThe following figure shows the basic architecture for the Apigee hybrid integration:\nAn Envoy proxy is deployed with the target HTTP service as an Istio sidecar in the Istio service mesh. The sidecar handles API traffic to and from the target service, and communicates with the Remote Service. The Remote Service also communicates with the hybrid management plane to retrieve API product and proxy information.\n## \n Check your gcloud configuration\n- Check that your`gcloud`configuration is set to the Google Cloud project associated with your hybrid organization.To list the current settings:```\ngcloud config list\n```If necessary, set the correct Google Cloud project ID with this command:```\ngcloud config set project project-id\n```\n- You must be authenticated with Google Cloud SDK (gcloud) for your Google Cloud project:```\ngcloud auth login\n```## \n Provision Apigee hybrid\nIn this step, you will use the Remote Service CLI to provision hybrid with the `remote-service` API proxy. The provisioning command also sets up a certificate on Apigee, and generates credentials the remote service will use to securely connect back to Apigee.\n- Go to the`$CLI_HOME`directory:```\ncd $CLI_HOME\n```\n- If you are not an owner of the Google Cloud project associated with the Apigee hybrid organization,  be sure that your Google Cloud user account includes either the **Apigee Organization Admin** role, or  both the **API Creator** and the **Deployer** roles.See [Granting, changing, and revoking access to resources](https://cloud.google.com/iam/docs/granting-changing-revoking-access) .\n- Execute this command to get an access token:```\nTOKEN=$(gcloud auth print-access-token);echo $TOKEN\n```\n- (Optional) By default, the adapter looks for default service account credentials in your Google  Cloud project for permission to send analytics data to Apigee. If you don't want to use the [default service account credentials](https://cloud.google.com/docs/authentication/production#automatically) , you can create a service account and reference its key in the  provisioning command. The service account must have the`apigee.analyticsAgent`role.  For instructions, see [Creating and managing service accounts](https://cloud.google.com/iam/docs/creating-managing-service-accounts) .\n- Create the following environment variables. These variables will be used as  parameters to the provisioning script:```\nexport ORG=organization_nameexport ENV=environment_nameexport RUNTIME=host_alias_urlexport NAMESPACE=hybrid_runtime_namespaceexport AX_SERVICE_ACCOUNT=analytics_service_account \u00a0\n## Optional\n```Where:| Variable     | Description                                           |\n|:--------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| organization_name   | The name of the Apigee organization for you Apigee hybrid installation.                            |\n| environment_name   | The name of an environment in your Apigee hybrid organization.                              |\n| host_alias_url   | A URL that includes the hostAlias for a virtual host defined in your hybrid configuration. The URL must start with https://. For example: https://apitest.apigee-hybrid-docs.net |\n| hybrid_runtime_namepace | The namespace in which the Hybrid runtime components are deployed. Note: The default namespace for a hybrid deployment is apigee.             |\n| analytics_service_account | (Optional) The path to a Google Cloud service account key JSON file that has the Apigee Analytics Agent role. For a detailed description of this parameter, see Provision command. |\n- Execute the following command to provision the remote service proxy to Apigee hybrid: **NOTE: ** If your hybrid runtime installation is configured  using self-signed TLS certificates for the virtualhost, you must use the`--insecure`flag with the`provision`command shown below. **NOTE: ** The command output is redirected to a config file  that you will use in a later step. **IF YOU ARE UPGRADING: ** If you are upgrading an existing Apigee Adapter for Envoy, you must add the`--force-proxy-install`flag to the`provision`command. This flag forces  the Apigee proxy to be replaced with the latest proxy.If you are **not** upgrading, use this command to provision Apigee:```\n./apigee-remote-service-cli provision --organization $ORG --environment $ENV \\\n  --runtime $RUNTIME --namespace $NAMESPACE --analytics-sa $AX_SERVICE_ACCOUNT --token $TOKEN > config.yaml\n```If you are upgrading, use this command with the `--force-proxy-install` flag to provision Apigee:```\n./apigee-remote-service-cli provision --force-proxy-install --organization $ORG --environment $ENV \\\n  --runtime $RUNTIME --namespace $NAMESPACE --analytics-sa $AX_SERVICE_ACCOUNT --token $TOKEN > config.yaml\n```\n- Check the contents of the`config.yaml`file. It should look something like this:```\n# Configuration for apigee-remote-service-envoy (platform: Google Cloud)# generated by apigee-remote-service-cli provision on 2020-11-20 02:49:28apiVersion: v1kind: ConfigMapmetadata:\u00a0 name: apigee-remote-service-envoy\u00a0 namespace: apigeedata:\u00a0 config.yaml: |\u00a0 \u00a0 tenant:\u00a0 \u00a0 \u00a0 remote_service_api: https://apitest.example.com/remote-service\u00a0 \u00a0 \u00a0 org_name: hybrid-gke\u00a0 \u00a0 \u00a0 env_name: test\u00a0 \u00a0 analytics:\u00a0 \u00a0 \u00a0 collection_interval: 10s\u00a0 \u00a0 auth:\u00a0 \u00a0 \u00a0 jwt_provider_key: https://apitest.example.com/remote-token/token---apiVersion: v1kind: Secretmetadata:\u00a0 name: hybrid-gke-new-test-policy-secret\u00a0 namespace: apigeetype: Opaquedata:\u00a0 remote-service.crt: eyJrZXlzIjpbeyJrdHkiOiJSU0EiLCJhbGci...\u00a0 remote-service.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURS...\u00a0 remote-service.properties: a2lkPTIwMjAtMDctMDZ...---apiVersion: v1kind: Secretmetadata:\u00a0 name: hybrid-gke-new-test-analytics-secret\u00a0 namespace: apigeetype: Opaquedata:\u00a0 client_secret.json: ewogICJ0eXBlIjogInNlcnZ...---apiVersion: v1kind: ServiceAccountmetadata:\u00a0 name: apigee-remote-service-envoy\u00a0 namespace: apigee\n```\n- Apply the service configuration (the file output by the provisioning command) to the cluster:```\nkubectl apply -f $CLI_HOME/config.yaml\n```\n- Verify your proxy and certificate. The following should return valid JSON:```\ncurl -i $RUNTIME/remote-token/certs\n``` **Note: ** It can take some time for the provisioning  to complete. If this command fails, wait for a minute and try again.The output looks something like this:```\n{\n \"keys\": [  {\n   \"alg\": \"RS256\",\n   \"e\": \"AQAB\",\n   \"kid\": \"2020-05-11T11:32:26-06:00\",\n   \"kty\": \"RSA\",\n   \"n\": \"0v-nbTQyAmtVZ-wZRP0ZPIbrVaX91YO9JZ9xCQPb4mOdOSS7yKfTDJGg0KM130sGVYBvR76alN8\n   fhrrSDEG5VXG8YYMqPXarwRC7MRJWocCQ_ECYrjDD0_Q018M2HyXZYSd8fhAogi9mVUYsEmCKqJH53Dh1\n   jqsHOQzBLKsX0iDO9hEZNFtjbX0UCbSxsUlmBCub7Uj2S-PahA6DEQOMhQjZM7bBMtkTMpFmaJ_RZTmow\n   BHP57qMna17R8wHD4kUsO2u_-3HHs5PSj1NrEYoVU2dwLQw0GlkB__ZWeFgXTqot81vb-PmoM9YxwoZrm\n   TcHdljugWy_s7xROPzTod0uw\"\n  }\n ]\n}\n```## \n Create sample configuration files\nUse the `apigee-remote-service-cli samples create` command to generate sample configuration files.\nFor this example, you need these generated files:\n- `httpbin.yaml`- A deployment configuration for an HTTP service.\n- `apigee-envoy-adapter.yaml`- A deployment configuration for the Remote Service for Envoy.\n- `envoyfilter-sidecar.yaml`- A configuration that installs an EnvoyFilter. to the default namespace.\nTo generate the samples:\n- Go to the`$CLI_HOME`directory.\n- Execute this command to generate the files:```\n./apigee-remote-service-cli samples create -c ./config.yaml --template istio-1.12\n``` **Note: ** The above command generates the files using the  Istio 1.12 template. To see other available template versions run`./apigee-remote-service-cli samples templates`The following files are output the `./samples` directory:```\nls samples\napigee-envoy-adapter.yaml envoyfilter-sidecar.yaml httpbin.yaml request-authentication.yaml\n```\nFor more information, see [Samples command](/apigee/docs/api-platform/envoy-adapter/v2.0.x/reference#samples-command) .\n## \n Deploy a test service to the cluster\nIn this step, you will deploy a simple HTTP request/response test service to the same cluster where Apigee hybrid is deployed.\n- Enable Istio injection in the`default`namespace of the cluster. In a later step,  you will deploy an Envoy sidecar to this same cluster. Enabling Istio injection makes  the sidecar deployment possible. This example uses the`default`namespace, and  all subsequent instructions assume this is the case.If you are using open source Istio:```\nkubectl label namespace default istio-injection=enabled --overwrite\n```If you are using ASM:```\nkubectl label namespace default istio-injection=enabled istio.io/rev=REVISION --overwrite\n```\n- Apply the simple [httpbin](https://httpbin.org/) service to the  cluster in the default namespace:```\nkubectl apply -f $CLI_HOME/samples/httpbin.yaml\n```\n- Now, test the service. Start a`curl`service running in the cluster and open a  terminal:```\nkubectl run -it curl --image=curlimages/curl --restart=Never -- sh\n```\n- Test the service by calling it from inside the cluster:```\ncurl -i httpbin.default.svc.cluster.local/headers\n```On success, you will see a 200 status, and the service returns a list of headers. For example:```\nHTTP/1.1 200 OK\nserver: envoy\ndate: Tue, 12 May 2020 17:09:01 GMT\ncontent-type: application/json\ncontent-length: 328\naccess-control-allow-origin: *\naccess-control-allow-credentials: true\nx-envoy-upstream-service-time: 7\n{\n \"headers\": {\n \"Accept\": \"*/*\",\n \"Content-Length\": \"0\",\n \"Host\": \"httpbin.default.svc.cluster.local\",\n \"User-Agent\": \"curl/7.70.0-DEV\",\n \"X-B3-Parentspanid\": \"69f88bc3e322e157\",\n \"X-B3-Sampled\": \"0\",\n \"X-B3-Spanid\": \"8dd725f30e393d8b\",\n \"X-B3-Traceid\": \"38093cd817ad30a569f88bc3e322e157\"\n }\n}\n``` **TIP: ** Leave the`curl`client running and  the shell open. You will use it in a later step.## \n Run the Remote Service for Envoy\nIn this step, you start the Remote Service for Envoy client. This service provides the endpoints to the Istio sidecars that are installed on target services. You will also install a sidecar with the `httpbin` service.\n- Apply the Apigee Remote Service to the service mesh:```\nkubectl apply -f $CLI_HOME/samples/apigee-envoy-adapter.yaml\n```\n- Apply the`EnvoyFilter`to the Istio sidecars in the default namespace. The`EnvoyFilter`enables the`httpbin`sidecar to communicate  with the Apigee Remote Service.```\nkubectl apply -f $CLI_HOME/samples/envoyfilter-sidecar.yaml\n```## \n Test the installation\n- Now, go back to the curl shell you opened in the step [ Deploy a test service to the cluster](#deploy-a-test-service-to-the-cluster) and call the`httpbin`service:```\ncurl -i httpbin.default.svc.cluster.local/headers\n```The service is now being managed by Apigee, and because you did not supply an API key,  the server returns the following error.```\ncurl -i httpbin.default.svc.cluster.local/headers\nHTTP/1.1 403 Forbidden\ndate: Tue, 12 May 2020 17:51:36 GMT\nserver: envoy\ncontent-length: 0\nx-envoy-upstream-service-time: 11\n```\n- Configure an API product and get an API key as explained in [How to obtain an API key](/apigee/docs/api-platform/envoy-adapter/v2.0.x/operation#how-to-obtain-an-api-key) .\n- Make an API call using the key:```\nexport APIKEY=YOUR_API_KEYcurl -i httpbin.default.svc.cluster.local/headers -H \"x-api-key: $APIKEY\"\n```The call should succeed with a 200 status and returning a list of headers in the response.  For example:```\ncurl -i httpbin.default.svc.cluster.local/headers -H \"x-api-key: kyOTalNNLMPfOSy6rnVeclmVSL6pA2zS\"\nHTTP/1.1 200 OK\nserver: envoy\ndate: Tue, 12 May 2020 17:55:34 GMT\ncontent-type: application/json\ncontent-length: 828\naccess-control-allow-origin: *\naccess-control-allow-credentials: true\nx-envoy-upstream-service-time: 301\n{\n \"headers\": {\n \"Accept\": \"*/*\",\n \"Content-Length\": \"0\",\n \"Host\": \"httpbin.default.svc.cluster.local\",\n \"User-Agent\": \"curl/7.70.0-DEV\",\n \"X-Api-Key\": \"kyOTalNNLMPfOSy6rnVeclmVSL6pA2zS\",\n \"X-Apigee-Accesstoken\": \"\",\n \"X-Apigee-Api\": \"httpbin.default.svc.cluster.local\",\n \"X-Apigee-Apiproducts\": \"httpbin\",\n \"X-Apigee-Application\": \"httpbin\",\n \"X-Apigee-Authorized\": \"true\",\n \"X-Apigee-Clientid\": \"kyOTalNNLMPfOSy6rnVeclmVSL6pA2zS\",\n \"X-Apigee-Developeremail\": \"jdoe@example.com\",\n \"X-Apigee-Environment\": \"envoy\",\n \"X-Apigee-Organization\": \"acme-org\",\n \"X-Apigee-Scope\": \"\",\n \"X-B3-Parentspanid\": \"1476f9a2329bbdfa\",\n \"X-B3-Sampled\": \"0\",\n \"X-B3-Spanid\": \"1ad5c19bfb4bc96f\",\n \"X-B3-Traceid\": \"6f329a34e8ca07811476f9a2329bbdfa\"\n }\n}\n```## \n Next steps\nAPI traffic to the `httpbin` service is now managed by Apigee. Here are some features you can explore and try:\n- Access Apigee Analytics in the Edge UI. Go to **Analyze > API Metrics > API\n Proxy Performance** .\n- Use the CLI to manage, create tokens, and control bindings. For CLI details, see the [Reference](/apigee/docs/api-platform/envoy-adapter/v2.0.x/reference) .## \n Uninstall Apigee Adapter for Envoy\nTo remove an Apigee Envoy adapter installation:\n- Wherever you chose to have envoy adapter run (natively or on Docker), remove it.\n- Delete the **remote-service** and **remote-token** proxies from your Apigee environment(s). See [Deleting an API proxy](/apigee/docs/api-platform/develop/ui-delete-proxy) .\n- Remove any unused API products or [operations](/apigee/docs/api-platform/publish/create-api-products#operations) used by the Envoy adapter use cases. See [Deleting an API product](/apigee/docs/api-platform/publish/create-api-products#delete) .\nAlso, you can execute the following commands:\n```\nkubectl delete -f $CLI_HOME/samples/envoyfilter-sidecar.yaml\n kubectl delete -f $CLI_HOME/samples/apigee-envoy-adapter.yaml\n kubectl delete -f $CLI_HOME/samples/httpbin.yaml\n kubectl delete -f $CLI_HOME/config.yaml\n```", "guide": "Apigee"}