{"title": "Documentation - Collect operational logs from your AO project", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Collect operational logs from your AO project\nThis section describes how to collect operational logs from a service in Google Distributed Cloud Hosted (GDCH) for system logging and data observability.\nThe Logging platform provides a custom Kubernetes API to collect project-level logs your services generate through system logging targets. You must deploy a `LoggingTarget` custom resource to your project namespace in the org admin cluster. Based on this resource, the Logging platform starts collecting your system logging data. Access those logs using the user interface (UI) of the system monitoring tool or the GDCH Logging API, following the steps of [Query and view logs](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/query-and-view-logs) .\nFor information on best practices to implement system logging for data observability of components, see [https://github.com/kubernetes/community/blob/master/contributors/devel/sig-instrumentation/logging.md](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-instrumentation/logging.md) .\n", "content": "## Configure the collection of operational logs from a service\nOperational logs record conditions, changes, and actions as you manage ongoing operations in applications and services on GDCH. Deploy the `LoggingTarget` custom resource to the org admin cluster to configure the system logging pipeline for collecting operational logs from specific services at the project level.\nComplete the following steps to collect operational logs from a service:\n- Configure the`LoggingTarget`custom resource, specifying the selected pods for collecting your operational logs, the project namespace, and any additional settings. For more information, see [Configure the LoggingTarget custom resource](#loggingtarget-cr) .\n- Deploy the`LoggingTarget`custom resource to your project namespace in the org admin cluster. The pipeline starts collecting logs from the additional components of your project.\n- Query your logs from the system monitoring instance of your project. For more information, see [Query and view logs](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/query-and-view-logs) .\nUse the built-in color coding feature for different log levels of the service. For more information on setting log-level values, see [https://grafana.com/docs/grafana/latest/explore/logs-integration/](https://grafana.com/docs/grafana/latest/explore/logs-integration/) .\n## Configure the LoggingTarget custom resource\nThe `LoggingTarget` custom resource instructs the system logging pipeline to collect logs from specific services of your project and provide data observability. You must deploy this resource into the namespace from where you want to collect logs.\nThe following YAML file shows a `LoggingTarget` configuration example:\n```\n# Configures a log scraping jobapiVersion: logging.gdc.goog/v1kind: LoggingTargetmetadata:\u00a0 # Choose a namespace that matches the namespace of the workload pods\u00a0 namespace: PROJECT_NAMESPACE\u00a0 name: my-service-logging-targetspec:\u00a0 # Choose a matching pattern that identifies the pods for this job\u00a0 # Optional\u00a0 # Relationship between different selectors: 'AND'\u00a0 selector:\u00a0 \u00a0 # The clusters to collect logs from.\u00a0 \u00a0 # The default configuration is to collect logs from all clusters.\u00a0 \u00a0 # The relationship between different clusters is an 'OR' relationship.\u00a0 \u00a0 # For example, the value '[\"admin\", \"system\"]' indicates to consider\u00a0 \u00a0 # the admin cluster 'OR' the system cluster.\u00a0 \u00a0 # Optional\u00a0 \u00a0 matchClusters:\u00a0 \u00a0 - CLUSTER_NAME\u00a0 \u00a0 - CLUSTER_NAME\u00a0 \u00a0 # The pod name prefixes to collect logs from.\u00a0 \u00a0 # The Observability platform scrapes all pods with names\u00a0 \u00a0 # that start with the specified prefixes.\u00a0 \u00a0 # The values must contain '[a-z0-9-]' characters only.\u00a0 \u00a0 # The relationship between different list elements is an 'OR' relationship.\u00a0 \u00a0 # Optional\u00a0 \u00a0 matchPodNames:\u00a0 \u00a0 \u00a0 - POD_NAME\u00a0 \u00a0 \u00a0 - POD_NAME\u00a0 \u00a0 # The container name prefixes to collect logs from.\u00a0 \u00a0 # The Observability platform scrapes all containers with names\u00a0 \u00a0 # that start with the specified prefixes.\u00a0 \u00a0 # The values must contain '[a-z0-9-]' characters only.\u00a0 \u00a0 # The relationship between different list elements is an 'OR' relationship.\u00a0 \u00a0 # Optional\u00a0 \u00a0 matchContainerNames:\u00a0 \u00a0 \u00a0 - CONTAINER_NAME\u00a0 \u00a0 \u00a0 - CONTAINER_NAME\u00a0 # Choose the predefined parser for log entries.\u00a0 # Use parsers to map the log output to labels and extract fields.\u00a0 # Specify the log format.\u00a0 # Optional\u00a0 # Options: klog_text, klog_json, klogr, gdch_json, json\u00a0 parser: klog_text\u00a0 # Specify an access level for log entries.\u00a0 # The default value is 'ao'.\u00a0 # Optional\u00a0 # Options: ao, pa, io\u00a0 logAccessLevel: ao\u00a0 # Specify a service name to be applied as a label\u00a0 # For user workloads consider this field as a workload name\u00a0 # Required\u00a0 serviceName: SERVICE_NAME\u00a0 # The additional static fields to apply to log entries.\u00a0 # The field is a key-value pair, where the field name is the key and\u00a0 # the field value is the value.\u00a0 # Optional\u00a0 additionalFields:\u00a0 \u00a0 app: workload2\u00a0 \u00a0 key: value\n```\nReplace the following:\n- ``: the namespace of your project\n- ``: the name of the cluster\n- ``: the pod name prefix\n- ``: the container name prefix\n- ``: the name of the service\nThe `parser` , `logAccessLevel` , and `additionalFields` fields contain example values that you can modify.\nBy default, all operational log entries are saved for the tenant ID of the project namespace. To overwrite this behavior, provide a `logAccessLevel` value in the `LoggingTarget` custom resource.", "guide": "Documentation"}