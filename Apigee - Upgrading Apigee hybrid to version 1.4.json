{"title": "Apigee - Upgrading Apigee hybrid to version 1.4", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Upgrading Apigee hybrid to version 1.4\nYou are currently viewing version 1.4 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\n**Note: ** This procedure covers upgrading from Apigee hybrid version 1.3.x to Apigee hybrid version 1.4.4 only.If you are upgrading from Apigee hybrid version 1.2 or older, you must first upgrade to  hybrid version 1.3 before upgrading to version 1.4.4.  See the instructions for [Upgrading Apigee hybrid to version 1.3](/apigee/docs/hybrid/v1.3/upgrade) .\n", "content": "## \n Upgrading to version 1.4.4 overview.\nUpgrading to Apigee hybrid version 1.4.4 may require downtime:- When upgrading Anthos Service Mesh (ASM) 1.5.x Ingress Gateway to version 1.6.x, you should  expect a few seconds of downtime when the ingress changes between the two versions.\n- When upgrading the Apigee controller to version 1.4.4, all Apigee  deployments undergo a rolling restart.\nTo minimize downtime in production hybrid environments, make sure you are running at least two  clusters (in the same or different region/data center). Divert all production traffic to a  single cluster and take the cluster you are about to upgrade offline, and then proceed with the  upgrade process. Repeat the process for each cluster.\nThe procedures for upgrading Apigee hybrid are organized in the following sections:\n- Backup your hybrid installation.\n- Check your Kubernetes version and upgrade as appropriate.\n- Upgrade ASM.\n- Install hybrid runtime version 1.4.\n**Note: ** Do not create new environments during the upgrade process.\n## \n Prerequisite\n- Apigee hybrid version 1.3. If you are updating from an earlier version see the instructions  for [Upgrading Apigee hybrid to version 1.3](/apigee/docs/hybrid/v1.3/upgrade) .## \n Upgrade to version 1.4\n- (Recommended) Make a backup copy of your version 1.3`$APIGEECTL_HOME/`directory. For example:```\ntar -czvf $APIGEECTL_HOME/../apigeectl-v1.3-backup.tar.gz $APIGEECTL_HOME\n```\n- (Recommended) Backup your Cassandra database following the instructions in [Cassandra backup and recovery](/apigee/docs/hybrid/v1.4/backup-recovery) \n- Upgrade your Kubernetes platform as follows. Follow your platform's documentation if  you need help:| Platform    | Upgrade to version      |\n|:---------------------|:---------------------------------------|\n| GKE     | 1.18.x         |\n| GKE on-prem (Anthos) | 1.5.x         |\n| AKS     | 1.18.x using Anthos attached clusters |\n| EKS     | 1.18.x using Anthos attached clusters |\n- Upgrade ASM to version 1.6.x.You may experience a brief interruption of incoming traffic (typically less  than two seconds) when you upgrade ASM. If you are running hybrid in two or more clusters, you  can avoid this interruption by:- Disable your load balancer.\n- Upgrade ASM on one cluster at a time.\n- Enable your load balancer.\n- Perform the upgrade using the ASM documentation:- GKE on-prem (Anthos): [Upgrading    Anthos Service Mesh on premises](https://cloud.google.com/service-mesh/docs/archive/1.6/docs/gke-on-prem-upgrading) \n- All other platforms: [Upgrading    Anthos Service Mesh on GKE](https://cloud.google.com/service-mesh/docs/archive/1.6/docs/upgrading-gke) \n- Specify the following ingress ports and set the`runAsRoot`property to`true`in your`istio-operator.yaml`file\"```\n \u2026 \u2026 \u2026\n   ports:\n   - port: 15021\n    name: status-port\n    targetPort: 15021\n   - port: 80\n    name: http2\n    targetPort: 80\n   - port: 443\n    name: https\n    targetPort: 443\n \u2026 \u2026 \u2026\n values:\n  gateways:\n  istio-ingressgateway:\n   runAsRoot: true \n```\n- Create PeerAuthentication CRs for disabling mTLS in your`istio-operator.yaml`file:```\n--apiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n name: apigee-system\n namespace: apigee-system\nspec:\n mtls:\n mode: DISABLE\n--apiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n name: user-namespace\n namespace: user-namespace\nspec:\n mtls:\n mode: DISABLE\n```\n- Apply these changes with`istioctl`as described in the ASM documentation:\n- GKE on-prem (Anthos): [Updating the control plane](https://cloud.google.com/service-mesh/docs/archive/1.6/docs/gke-on-prem-upgrading?hl=en#updating_the_control_plane) \n- All other platforms: [Updating the control plane](https://cloud.google.com/service-mesh/docs/archive/1.6/docs/upgrading-gke?hl=en#updating_the_control_plane) ## \n Install the hybrid 1.4.4 runtime\n- Store the latest version number in a variable:```\nexport VERSION=$(curl -s \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/current-version.txt?ignoreCache=1)\n```\n- Check that the variable was populated with a version number. If you want to use a different  version, you can save that in an environment variable instead. For example:```\necho $VERSION\n``````\n 1.4.4\n```\n- Download the release package for your operating system: **Mac 64 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_mac_64.tar.gz\n``` **Linux 64 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_linux_64.tar.gz\n``` **Mac 32 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_mac_32.tar.gz\n``` **Linux 32 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_linux_32.tar.gz\n```\n- Rename your current`apigeectl/`directory to a backup directory name. For example:```\nmv $APIGEECTL_HOME/ $APIGEECTL_HOME-v1.2/ \n```\n- Extract the downloaded gzip file contents into your hybrid base directory. For example:```\ntar xvzf filename.tar.gz -C hybrid-base-directory\n```\n- `cd`to the base directory.\n- The tar contents are, by default, expanded into a directory with the version and platform in its  name. For example: `./apigeectl_1.4.4-xxx_linux_64` . Rename that directory  to `apigeectl` :```\nmv apigeectl_1.4.5-xxx_linux_64 apigeectl\n```\n- In the **new** `apigeectl/`directory, run`apigeectl init`,`apigeectl apply`, and`apigeectl check-ready`:- Initialize hybrid 1.4.4:```\napigeectl init -f overrides.yaml\n```Where is your edited overrides.yaml file.\n- Check that it initialized correctly with the following commands:```\napigeectl check-ready -f overrides.yaml\n``````\nkubectl describe apigeeds -n apigee\n```Your output should look something like:```\nStatus:\n Cassandra Data Replication:\n Cassandra Pod Ips:\n 10.8.2.204\n Cassandra Ready Replicas: 1\n Components:\n Cassandra:\n  Last Successfully Released Version:\n  Revision: v1-f8aa9a82b9f69613\n  Version: v1\n  Replicas:\n  Available: 1\n  Ready:  1\n  Total:  1\n  Updated: 1\n  State:  running\n Scaling:\n In Progress:   false\n Operation:\n Requested Replicas: 0\n State:     running\n```\n- The syntax of the`apigeectl``--dry-run`flag depends on the  version of`kubectl`you are running. Check the version of`kubectl`:```\ngcloud version\n```\n- Check for errors with a dry run with the command appropriate to your version of`kubectl`: `kubectl` version 1.17 and older:```\napigeectl apply -f overrides.yaml --dry-run=true\n``` `kubectl` version 1.18 and newer:```\napigeectl apply -f overrides.yaml --dry-run=client\n```\n- Apply your overrides. Select and follow the instructions for production environments or  demo/experimental environments, depending on your installation.During the upgrade process each component will perform a rolling restart.   Therefore, for production environments, it is best to apply the upgrade to one component at   a time.\nFor production environments you should upgrade each hybrid component individually, and    check the status of the upgraded component before proceeding to the next component.- Apply your overrides to upgrade Cassandra:```\napigeectl apply -f overrides.yaml --datastore\n```\n- Check completion:```\nkubectl -n namespace get pods\n``````\napigeectl check-ready -f overrides.yaml\n```Where is your Apigee hybrid namespace.Proceed to the next step only when the pods are ready.\n- Apply your overrides to upgrade Telemetry components and check completion:```\napigeectl apply -f overrides.yaml --telemetry\n``````\nkubectl -n namespace get pods\n``````\napigeectl check-ready -f overrides.yaml\n```\n- Apply your overrides to upgrade the org-level components (MART, Watcher and Apigee    Connect) and check completion:```\napigeectl apply -f overrides.yaml --org\n``````\nkubectl -n namespace get pods\n``````\napigeectl check-ready -f overrides.yaml\n```\n- Apply your overrides to upgrade your environments. You have two choices:- **Environment by environment** : Apply your overrides to one environment at a time and check completion. Repeat     this step for each environment:```\napigeectl apply -f overrides.yaml --env env_name\n``````\nkubectl -n namespace get pods\n``````\napigeectl check-ready -f overrides.yaml\n```Where is the name of the environment you are upgrading.\n- **All environments at one time** : Apply your overrides to all environments at once and check completion:```\napigeectl apply -f overrides.yaml --all-envs\n``````\nkubectl -n namespace get pods\n``````\napigeectl check-ready -f overrides.yaml\n```In most demo or experimental environments, you can apply the overrides to all components    at once. If your demo/experimental environment large and complex or closely mimics a    production environment, you may want to use the instructions for upgrading [production environments](#production) - ```\napigeectl apply -f overrides.yaml\n```\n- Check the status:```\napigeectl check-ready -f overrides.yaml\n```\n **Congratulations!** You have successfully upgraded to Apigee hybrid version 1.4.4.", "guide": "Apigee"}